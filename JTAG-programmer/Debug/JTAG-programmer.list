
JTAG-programmer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a60  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009d8  08005bf0  08005bf0  00015bf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080065c8  080065c8  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  080065c8  080065c8  000165c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080065d0  080065d0  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080065d0  080065d0  000165d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080065d4  080065d4  000165d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080065d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001fc  20000068  08006640  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000264  08006640  00020264  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c42c  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000022aa  00000000  00000000  0002c507  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ba0  00000000  00000000  0002e7b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008c7  00000000  00000000  0002f358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022c4a  00000000  00000000  0002fc1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000dd92  00000000  00000000  00052869  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000caea6  00000000  00000000  000605fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003604  00000000  00000000  0012b4a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  0012eaa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005bd8 	.word	0x08005bd8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08005bd8 	.word	0x08005bd8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <is_valid_hex_char>:
#include "LowLevelFunc430.h"
#include "memory.h" // for memcpy
#include "stdlib.h" // for malloc

uint8_t is_valid_hex_char(uint8_t c)
{
 800056c:	b480      	push	{r7}
 800056e:	b083      	sub	sp, #12
 8000570:	af00      	add	r7, sp, #0
 8000572:	4603      	mov	r3, r0
 8000574:	71fb      	strb	r3, [r7, #7]
	return (c >= '0' && c <= '9') || (c >= 'A' && c <= 'F') || (c >= 'a' && c <= 'f');
 8000576:	79fb      	ldrb	r3, [r7, #7]
 8000578:	2b2f      	cmp	r3, #47	; 0x2f
 800057a:	d902      	bls.n	8000582 <is_valid_hex_char+0x16>
 800057c:	79fb      	ldrb	r3, [r7, #7]
 800057e:	2b39      	cmp	r3, #57	; 0x39
 8000580:	d90b      	bls.n	800059a <is_valid_hex_char+0x2e>
 8000582:	79fb      	ldrb	r3, [r7, #7]
 8000584:	2b40      	cmp	r3, #64	; 0x40
 8000586:	d902      	bls.n	800058e <is_valid_hex_char+0x22>
 8000588:	79fb      	ldrb	r3, [r7, #7]
 800058a:	2b46      	cmp	r3, #70	; 0x46
 800058c:	d905      	bls.n	800059a <is_valid_hex_char+0x2e>
 800058e:	79fb      	ldrb	r3, [r7, #7]
 8000590:	2b60      	cmp	r3, #96	; 0x60
 8000592:	d904      	bls.n	800059e <is_valid_hex_char+0x32>
 8000594:	79fb      	ldrb	r3, [r7, #7]
 8000596:	2b66      	cmp	r3, #102	; 0x66
 8000598:	d801      	bhi.n	800059e <is_valid_hex_char+0x32>
 800059a:	2301      	movs	r3, #1
 800059c:	e000      	b.n	80005a0 <is_valid_hex_char+0x34>
 800059e:	2300      	movs	r3, #0
 80005a0:	b2db      	uxtb	r3, r3
}
 80005a2:	4618      	mov	r0, r3
 80005a4:	370c      	adds	r7, #12
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr

080005ae <ascii_string_to_byte>:

uint8_t ascii_string_to_byte(const uint8_t* const string)
{
 80005ae:	b480      	push	{r7}
 80005b0:	b085      	sub	sp, #20
 80005b2:	af00      	add	r7, sp, #0
 80005b4:	6078      	str	r0, [r7, #4]
	uint8_t answer = 0;
 80005b6:	2300      	movs	r3, #0
 80005b8:	73fb      	strb	r3, [r7, #15]

	//process LSB first
	for (int i = 0; i < 2; i++)
 80005ba:	2300      	movs	r3, #0
 80005bc:	60bb      	str	r3, [r7, #8]
 80005be:	e03c      	b.n	800063a <ascii_string_to_byte+0x8c>
	{
		if (string[i] <= '9') // its a digit
 80005c0:	68bb      	ldr	r3, [r7, #8]
 80005c2:	687a      	ldr	r2, [r7, #4]
 80005c4:	4413      	add	r3, r2
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	2b39      	cmp	r3, #57	; 0x39
 80005ca:	d80c      	bhi.n	80005e6 <ascii_string_to_byte+0x38>
		{
			answer |= (string[i] - '0');
 80005cc:	68bb      	ldr	r3, [r7, #8]
 80005ce:	687a      	ldr	r2, [r7, #4]
 80005d0:	4413      	add	r3, r2
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	3b30      	subs	r3, #48	; 0x30
 80005d6:	b2db      	uxtb	r3, r3
 80005d8:	b25a      	sxtb	r2, r3
 80005da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80005de:	4313      	orrs	r3, r2
 80005e0:	b25b      	sxtb	r3, r3
 80005e2:	73fb      	strb	r3, [r7, #15]
 80005e4:	e01e      	b.n	8000624 <ascii_string_to_byte+0x76>
		}
		else if (string[i] <= 'F') // its an upper case letter
 80005e6:	68bb      	ldr	r3, [r7, #8]
 80005e8:	687a      	ldr	r2, [r7, #4]
 80005ea:	4413      	add	r3, r2
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	2b46      	cmp	r3, #70	; 0x46
 80005f0:	d80c      	bhi.n	800060c <ascii_string_to_byte+0x5e>
		{
			answer |= (string[i] - 'A' + 10);
 80005f2:	68bb      	ldr	r3, [r7, #8]
 80005f4:	687a      	ldr	r2, [r7, #4]
 80005f6:	4413      	add	r3, r2
 80005f8:	781b      	ldrb	r3, [r3, #0]
 80005fa:	3b37      	subs	r3, #55	; 0x37
 80005fc:	b2db      	uxtb	r3, r3
 80005fe:	b25a      	sxtb	r2, r3
 8000600:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000604:	4313      	orrs	r3, r2
 8000606:	b25b      	sxtb	r3, r3
 8000608:	73fb      	strb	r3, [r7, #15]
 800060a:	e00b      	b.n	8000624 <ascii_string_to_byte+0x76>
		}
		else // its a lower case letter
		{
			answer |= (string[i] - 'a' + 10);
 800060c:	68bb      	ldr	r3, [r7, #8]
 800060e:	687a      	ldr	r2, [r7, #4]
 8000610:	4413      	add	r3, r2
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	3b57      	subs	r3, #87	; 0x57
 8000616:	b2db      	uxtb	r3, r3
 8000618:	b25a      	sxtb	r2, r3
 800061a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800061e:	4313      	orrs	r3, r2
 8000620:	b25b      	sxtb	r3, r3
 8000622:	73fb      	strb	r3, [r7, #15]
		}

		answer <<= (4 * (1-i));
 8000624:	7bfa      	ldrb	r2, [r7, #15]
 8000626:	68bb      	ldr	r3, [r7, #8]
 8000628:	f1c3 0301 	rsb	r3, r3, #1
 800062c:	009b      	lsls	r3, r3, #2
 800062e:	fa02 f303 	lsl.w	r3, r2, r3
 8000632:	73fb      	strb	r3, [r7, #15]
	for (int i = 0; i < 2; i++)
 8000634:	68bb      	ldr	r3, [r7, #8]
 8000636:	3301      	adds	r3, #1
 8000638:	60bb      	str	r3, [r7, #8]
 800063a:	68bb      	ldr	r3, [r7, #8]
 800063c:	2b01      	cmp	r3, #1
 800063e:	ddbf      	ble.n	80005c0 <ascii_string_to_byte+0x12>
	}
	return answer;
 8000640:	7bfb      	ldrb	r3, [r7, #15]
}
 8000642:	4618      	mov	r0, r3
 8000644:	3714      	adds	r7, #20
 8000646:	46bd      	mov	sp, r7
 8000648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064c:	4770      	bx	lr

0800064e <ascii_string_to_address>:

uint16_t ascii_string_to_address(uint8_t* const string)
{
 800064e:	b590      	push	{r4, r7, lr}
 8000650:	b085      	sub	sp, #20
 8000652:	af00      	add	r7, sp, #0
 8000654:	6078      	str	r0, [r7, #4]
	uint16_t answer = (ascii_string_to_byte(string) << 8) |
 8000656:	6878      	ldr	r0, [r7, #4]
 8000658:	f7ff ffa9 	bl	80005ae <ascii_string_to_byte>
 800065c:	4603      	mov	r3, r0
 800065e:	021b      	lsls	r3, r3, #8
 8000660:	b21c      	sxth	r4, r3
					ascii_string_to_byte(string+2);
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	3302      	adds	r3, #2
 8000666:	4618      	mov	r0, r3
 8000668:	f7ff ffa1 	bl	80005ae <ascii_string_to_byte>
 800066c:	4603      	mov	r3, r0
 800066e:	b21b      	sxth	r3, r3
	uint16_t answer = (ascii_string_to_byte(string) << 8) |
 8000670:	4323      	orrs	r3, r4
 8000672:	b21b      	sxth	r3, r3
 8000674:	81fb      	strh	r3, [r7, #14]
	return answer;
 8000676:	89fb      	ldrh	r3, [r7, #14]
}
 8000678:	4618      	mov	r0, r3
 800067a:	3714      	adds	r7, #20
 800067c:	46bd      	mov	sp, r7
 800067e:	bd90      	pop	{r4, r7, pc}

08000680 <verify_hexfile_and_return_program_linklist>:
			(ascii_string_to_byte(string+2) << 8);
}


uint8_t verify_hexfile_and_return_program_linklist(const uint8_t *const file, uint16_t file_size, node_t** program)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b0ca      	sub	sp, #296	; 0x128
 8000684:	af00      	add	r7, sp, #0
 8000686:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800068a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800068e:	6018      	str	r0, [r3, #0]
 8000690:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000694:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8000698:	601a      	str	r2, [r3, #0]
 800069a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800069e:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 80006a2:	460a      	mov	r2, r1
 80006a4:	801a      	strh	r2, [r3, #0]
	const uint8_t * readptr= file;
 80006a6:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80006aa:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	*program = NULL;
 80006b4:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80006b8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	2200      	movs	r2, #0
 80006c0:	601a      	str	r2, [r3, #0]

	while (readptr < file + file_size)	// for each line...
 80006c2:	e14f      	b.n	8000964 <verify_hexfile_and_return_program_linklist+0x2e4>
	{
		while (*readptr != ':' && readptr < file + file_size)	// ignore everything before the :
		{
			++readptr;
 80006c4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80006c8:	3301      	adds	r3, #1
 80006ca:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
		while (*readptr != ':' && readptr < file + file_size)	// ignore everything before the :
 80006ce:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	2b3a      	cmp	r3, #58	; 0x3a
 80006d6:	d00e      	beq.n	80006f6 <verify_hexfile_and_return_program_linklist+0x76>
 80006d8:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80006dc:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 80006e0:	881b      	ldrh	r3, [r3, #0]
 80006e2:	f507 7294 	add.w	r2, r7, #296	; 0x128
 80006e6:	f5a2 728e 	sub.w	r2, r2, #284	; 0x11c
 80006ea:	6812      	ldr	r2, [r2, #0]
 80006ec:	4413      	add	r3, r2
 80006ee:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80006f2:	429a      	cmp	r2, r3
 80006f4:	d3e6      	bcc.n	80006c4 <verify_hexfile_and_return_program_linklist+0x44>
		}
		readptr += 1;
 80006f6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80006fa:	3301      	adds	r3, #1
 80006fc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124

		if (!(readptr < file + file_size)) {
 8000700:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000704:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 8000708:	881b      	ldrh	r3, [r3, #0]
 800070a:	f507 7294 	add.w	r2, r7, #296	; 0x128
 800070e:	f5a2 728e 	sub.w	r2, r2, #284	; 0x11c
 8000712:	6812      	ldr	r2, [r2, #0]
 8000714:	4413      	add	r3, r2
 8000716:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800071a:	429a      	cmp	r2, r3
 800071c:	d303      	bcc.n	8000726 <verify_hexfile_and_return_program_linklist+0xa6>
			printf("Critical Error! File not ended correctly. Ensure last line of file is ':00000001FF'\n");
 800071e:	48a2      	ldr	r0, [pc, #648]	; (80009a8 <verify_hexfile_and_return_program_linklist+0x328>)
 8000720:	f004 fc5c 	bl	8004fdc <puts>
			goto error;
 8000724:	e130      	b.n	8000988 <verify_hexfile_and_return_program_linklist+0x308>
		}

		if (!(is_valid_hex_char(readptr[0]) && is_valid_hex_char(readptr[1]))) {
 8000726:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	4618      	mov	r0, r3
 800072e:	f7ff ff1d 	bl	800056c <is_valid_hex_char>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d009      	beq.n	800074c <verify_hexfile_and_return_program_linklist+0xcc>
 8000738:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800073c:	3301      	adds	r3, #1
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	4618      	mov	r0, r3
 8000742:	f7ff ff13 	bl	800056c <is_valid_hex_char>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d103      	bne.n	8000754 <verify_hexfile_and_return_program_linklist+0xd4>
			printf("Critical Error! First two bytes after : must be in the range '0'-'9' or 'A'-'F' or 'a'-'f'\n");
 800074c:	4897      	ldr	r0, [pc, #604]	; (80009ac <verify_hexfile_and_return_program_linklist+0x32c>)
 800074e:	f004 fc45 	bl	8004fdc <puts>
			goto error;
 8000752:	e119      	b.n	8000988 <verify_hexfile_and_return_program_linklist+0x308>
		}

		uint8_t byte_count = ascii_string_to_byte(readptr);
 8000754:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 8000758:	f7ff ff29 	bl	80005ae <ascii_string_to_byte>
 800075c:	4603      	mov	r3, r0
 800075e:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
		readptr += 2;
 8000762:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000766:	3302      	adds	r3, #2
 8000768:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124

		if (readptr + 4 + 2 + 2 * byte_count + 2 >= file + file_size) {
 800076c:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8000770:	005b      	lsls	r3, r3, #1
 8000772:	3308      	adds	r3, #8
 8000774:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8000778:	441a      	add	r2, r3
 800077a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800077e:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 8000782:	881b      	ldrh	r3, [r3, #0]
 8000784:	f507 7194 	add.w	r1, r7, #296	; 0x128
 8000788:	f5a1 718e 	sub.w	r1, r1, #284	; 0x11c
 800078c:	6809      	ldr	r1, [r1, #0]
 800078e:	440b      	add	r3, r1
 8000790:	429a      	cmp	r2, r3
 8000792:	d303      	bcc.n	800079c <verify_hexfile_and_return_program_linklist+0x11c>
			printf("Critical Error! Length of data field exceeds number of bytes in .hex file\n");
 8000794:	4886      	ldr	r0, [pc, #536]	; (80009b0 <verify_hexfile_and_return_program_linklist+0x330>)
 8000796:	f004 fc21 	bl	8004fdc <puts>
			goto error;
 800079a:	e0f5      	b.n	8000988 <verify_hexfile_and_return_program_linklist+0x308>
		}

		uint16_t address = ascii_string_to_address(readptr);
 800079c:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 80007a0:	f7ff ff55 	bl	800064e <ascii_string_to_address>
 80007a4:	4603      	mov	r3, r0
 80007a6:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
		readptr += 4;
 80007aa:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80007ae:	3304      	adds	r3, #4
 80007b0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124

		uint8_t record_type = ascii_string_to_byte(readptr);
 80007b4:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 80007b8:	f7ff fef9 	bl	80005ae <ascii_string_to_byte>
 80007bc:	4603      	mov	r3, r0
 80007be:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		readptr += 2;
 80007c2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80007c6:	3302      	adds	r3, #2
 80007c8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124

		if (!(record_type == 0x00 || record_type == 0x01)) {
 80007cc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d00a      	beq.n	80007ea <verify_hexfile_and_return_program_linklist+0x16a>
 80007d4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80007d8:	2b01      	cmp	r3, #1
 80007da:	d006      	beq.n	80007ea <verify_hexfile_and_return_program_linklist+0x16a>
			printf("Critical Error! Encountered unsupported record type 0x%02x\n", record_type);
 80007dc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80007e0:	4619      	mov	r1, r3
 80007e2:	4874      	ldr	r0, [pc, #464]	; (80009b4 <verify_hexfile_and_return_program_linklist+0x334>)
 80007e4:	f004 fb8c 	bl	8004f00 <iprintf>
			goto error;
 80007e8:	e0ce      	b.n	8000988 <verify_hexfile_and_return_program_linklist+0x308>
		}

		if (record_type == 0x00 && !(address >= 0xF800 && address <= 0xFFFF)) {
 80007ea:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d10b      	bne.n	800080a <verify_hexfile_and_return_program_linklist+0x18a>
 80007f2:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 80007f6:	f5b3 4f78 	cmp.w	r3, #63488	; 0xf800
 80007fa:	d206      	bcs.n	800080a <verify_hexfile_and_return_program_linklist+0x18a>
			printf("Critical Error! Address 0x%04x is outside of valid range (0xF800 - 0xFFFF)\n", address);
 80007fc:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8000800:	4619      	mov	r1, r3
 8000802:	486d      	ldr	r0, [pc, #436]	; (80009b8 <verify_hexfile_and_return_program_linklist+0x338>)
 8000804:	f004 fb7c 	bl	8004f00 <iprintf>
			goto error;
 8000808:	e0be      	b.n	8000988 <verify_hexfile_and_return_program_linklist+0x308>
		}

		uint8_t data[255];// the maximum data per line is 255 bytes. https://en.wikipedia.org/wiki/Intel_HEX#Record_structure

		uint8_t checksum_calc = byte_count + (address & 0xFF)
 800080a:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 800080e:	b2da      	uxtb	r2, r3
 8000810:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8000814:	4413      	add	r3, r2
 8000816:	b2da      	uxtb	r2, r3
				+ ((address & 0xFF00) >> 8) + record_type;
 8000818:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 800081c:	0a1b      	lsrs	r3, r3, #8
 800081e:	b29b      	uxth	r3, r3
 8000820:	b2db      	uxtb	r3, r3
 8000822:	4413      	add	r3, r2
 8000824:	b2da      	uxtb	r2, r3
		uint8_t checksum_calc = byte_count + (address & 0xFF)
 8000826:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800082a:	4413      	add	r3, r2
 800082c:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123

		for (int i = 0; i < byte_count; i++) {
 8000830:	2300      	movs	r3, #0
 8000832:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8000836:	e025      	b.n	8000884 <verify_hexfile_and_return_program_linklist+0x204>
			data[i] = ascii_string_to_byte(readptr);
 8000838:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 800083c:	f7ff feb7 	bl	80005ae <ascii_string_to_byte>
 8000840:	4603      	mov	r3, r0
 8000842:	4619      	mov	r1, r3
 8000844:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000848:	f5a3 728c 	sub.w	r2, r3, #280	; 0x118
 800084c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000850:	4413      	add	r3, r2
 8000852:	460a      	mov	r2, r1
 8000854:	701a      	strb	r2, [r3, #0]
			readptr += 2;
 8000856:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800085a:	3302      	adds	r3, #2
 800085c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124

			checksum_calc += data[i];
 8000860:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000864:	f5a3 728c 	sub.w	r2, r3, #280	; 0x118
 8000868:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800086c:	4413      	add	r3, r2
 800086e:	781a      	ldrb	r2, [r3, #0]
 8000870:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
 8000874:	4413      	add	r3, r2
 8000876:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
		for (int i = 0; i < byte_count; i++) {
 800087a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800087e:	3301      	adds	r3, #1
 8000880:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8000884:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8000888:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800088c:	429a      	cmp	r2, r3
 800088e:	dbd3      	blt.n	8000838 <verify_hexfile_and_return_program_linklist+0x1b8>
		}

		uint8_t checksum = ascii_string_to_byte(readptr);
 8000890:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 8000894:	f7ff fe8b 	bl	80005ae <ascii_string_to_byte>
 8000898:	4603      	mov	r3, r0
 800089a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
		readptr += 2;
 800089e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80008a2:	3302      	adds	r3, #2
 80008a4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124

		if (((checksum_calc + checksum) & 0xff) != 0x00) {
 80008a8:	f897 2123 	ldrb.w	r2, [r7, #291]	; 0x123
 80008ac:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 80008b0:	4413      	add	r3, r2
 80008b2:	b2db      	uxtb	r3, r3
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d008      	beq.n	80008ca <verify_hexfile_and_return_program_linklist+0x24a>
			printf( "Critical Error! Checksums dont match! Given: 0x%02x calculated: 0x%02x\n", checksum, checksum_calc);
 80008b8:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 80008bc:	f897 2123 	ldrb.w	r2, [r7, #291]	; 0x123
 80008c0:	4619      	mov	r1, r3
 80008c2:	483e      	ldr	r0, [pc, #248]	; (80009bc <verify_hexfile_and_return_program_linklist+0x33c>)
 80008c4:	f004 fb1c 	bl	8004f00 <iprintf>
			goto error;
 80008c8:	e05e      	b.n	8000988 <verify_hexfile_and_return_program_linklist+0x308>
		}

		if (record_type == 0x00) {
 80008ca:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d140      	bne.n	8000954 <verify_hexfile_and_return_program_linklist+0x2d4>
			// copy the data into the virtual flash
			node_t* next = (node_t*) malloc(sizeof(node_t));
 80008d2:	200c      	movs	r0, #12
 80008d4:	f004 f9a8 	bl	8004c28 <malloc>
 80008d8:	4603      	mov	r3, r0
 80008da:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
			next->address = address;
 80008de:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80008e2:	f8b7 2118 	ldrh.w	r2, [r7, #280]	; 0x118
 80008e6:	801a      	strh	r2, [r3, #0]
			next->data = (uint16_t*)malloc(byte_count);
 80008e8:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 80008ec:	4618      	mov	r0, r3
 80008ee:	f004 f99b 	bl	8004c28 <malloc>
 80008f2:	4603      	mov	r3, r0
 80008f4:	461a      	mov	r2, r3
 80008f6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80008fa:	605a      	str	r2, [r3, #4]
			memcpy(next->data, data, byte_count);		// copying array of uint8_t to array of uint16_t.
 80008fc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000900:	685b      	ldr	r3, [r3, #4]
 8000902:	f897 211b 	ldrb.w	r2, [r7, #283]	; 0x11b
 8000906:	f107 0110 	add.w	r1, r7, #16
 800090a:	4618      	mov	r0, r3
 800090c:	f004 fcd0 	bl	80052b0 <memcpy>
			next->length = byte_count / 2;
 8000910:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	b2da      	uxtb	r2, r3
 8000918:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800091c:	709a      	strb	r2, [r3, #2]
			next->next = *program;
 800091e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000922:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	681a      	ldr	r2, [r3, #0]
 800092a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800092e:	609a      	str	r2, [r3, #8]

			*program = next;
 8000930:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000934:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 800093e:	601a      	str	r2, [r3, #0]

			printf("-vData: %u bytes @ 0x%04x cs=0x%02x\n", byte_count, address, checksum_calc);
 8000940:	f897 111b 	ldrb.w	r1, [r7, #283]	; 0x11b
 8000944:	f8b7 2118 	ldrh.w	r2, [r7, #280]	; 0x118
 8000948:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
 800094c:	481c      	ldr	r0, [pc, #112]	; (80009c0 <verify_hexfile_and_return_program_linklist+0x340>)
 800094e:	f004 fad7 	bl	8004f00 <iprintf>
 8000952:	e007      	b.n	8000964 <verify_hexfile_and_return_program_linklist+0x2e4>
		} else {
			printf("-vEof cs=0x%02x\n", checksum_calc);
 8000954:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
 8000958:	4619      	mov	r1, r3
 800095a:	481a      	ldr	r0, [pc, #104]	; (80009c4 <verify_hexfile_and_return_program_linklist+0x344>)
 800095c:	f004 fad0 	bl	8004f00 <iprintf>
			return 0;
 8000960:	2300      	movs	r3, #0
 8000962:	e01b      	b.n	800099c <verify_hexfile_and_return_program_linklist+0x31c>
	while (readptr < file + file_size)	// for each line...
 8000964:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000968:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 800096c:	881b      	ldrh	r3, [r3, #0]
 800096e:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8000972:	f5a2 728e 	sub.w	r2, r2, #284	; 0x11c
 8000976:	6812      	ldr	r2, [r2, #0]
 8000978:	4413      	add	r3, r2
 800097a:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800097e:	429a      	cmp	r2, r3
 8000980:	f4ff aea5 	bcc.w	80006ce <verify_hexfile_and_return_program_linklist+0x4e>
		}
	}
	return 0;
 8000984:	2300      	movs	r3, #0
 8000986:	e009      	b.n	800099c <verify_hexfile_and_return_program_linklist+0x31c>

error: // cleanup the linked list
	free_linkedlist(*program);
 8000988:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800098c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4618      	mov	r0, r3
 8000996:	f000 f817 	bl	80009c8 <free_linkedlist>
	return 1;
 800099a:	2301      	movs	r3, #1
}
 800099c:	4618      	mov	r0, r3
 800099e:	f507 7794 	add.w	r7, r7, #296	; 0x128
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	08005bf0 	.word	0x08005bf0
 80009ac:	08005c44 	.word	0x08005c44
 80009b0:	08005ca0 	.word	0x08005ca0
 80009b4:	08005cec 	.word	0x08005cec
 80009b8:	08005d28 	.word	0x08005d28
 80009bc:	08005d74 	.word	0x08005d74
 80009c0:	08005dbc 	.word	0x08005dbc
 80009c4:	08005de4 	.word	0x08005de4

080009c8 <free_linkedlist>:

void free_linkedlist(node_t* head)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b084      	sub	sp, #16
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
	while(head != NULL)
 80009d0:	e00c      	b.n	80009ec <free_linkedlist+0x24>
	{
		free(head->data);
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	685b      	ldr	r3, [r3, #4]
 80009d6:	4618      	mov	r0, r3
 80009d8:	f004 f92e 	bl	8004c38 <free>
		node_t* todelete = head;	// temp
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	60fb      	str	r3, [r7, #12]
		head = head->next;
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	689b      	ldr	r3, [r3, #8]
 80009e4:	607b      	str	r3, [r7, #4]
		free(todelete);
 80009e6:	68f8      	ldr	r0, [r7, #12]
 80009e8:	f004 f926 	bl	8004c38 <free>
	while(head != NULL)
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d1ef      	bne.n	80009d2 <free_linkedlist+0xa>
	}
}
 80009f2:	bf00      	nop
 80009f4:	bf00      	nop
 80009f6:	3710      	adds	r7, #16
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}

080009fc <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b083      	sub	sp, #12
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
 8000a04:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	683a      	ldr	r2, [r7, #0]
 8000a0a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000a0c:	bf00      	nop
 8000a0e:	370c      	adds	r7, #12
 8000a10:	46bd      	mov	sp, r7
 8000a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a16:	4770      	bx	lr

08000a18 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b085      	sub	sp, #20
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000a20:	4b08      	ldr	r3, [pc, #32]	; (8000a44 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000a22:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000a24:	4907      	ldr	r1, [pc, #28]	; (8000a44 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	4313      	orrs	r3, r2
 8000a2a:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000a2c:	4b05      	ldr	r3, [pc, #20]	; (8000a44 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000a2e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	4013      	ands	r3, r2
 8000a34:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a36:	68fb      	ldr	r3, [r7, #12]
}
 8000a38:	bf00      	nop
 8000a3a:	3714      	adds	r7, #20
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr
 8000a44:	40021000 	.word	0x40021000

08000a48 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#define GETCHAR_PROTOTYPE int fgetc(FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000a50:	1d39      	adds	r1, r7, #4
 8000a52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a56:	2201      	movs	r2, #1
 8000a58:	4803      	ldr	r0, [pc, #12]	; (8000a68 <__io_putchar+0x20>)
 8000a5a:	f002 fa5d 	bl	8002f18 <HAL_UART_Transmit>
  return ch;
 8000a5e:	687b      	ldr	r3, [r7, #4]
}
 8000a60:	4618      	mov	r0, r3
 8000a62:	3708      	adds	r7, #8
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	20000084 	.word	0x20000084

08000a6c <__io_getchar>:

GETCHAR_PROTOTYPE
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
  uint8_t ch = 0;
 8000a72:	2300      	movs	r3, #0
 8000a74:	71fb      	strb	r3, [r7, #7]

  /* Clear the Overrun flag just before receiving the first character */
  __HAL_UART_CLEAR_OREFLAG(&huart2);
 8000a76:	4b0b      	ldr	r3, [pc, #44]	; (8000aa4 <__io_getchar+0x38>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	2208      	movs	r2, #8
 8000a7c:	621a      	str	r2, [r3, #32]

  /* Wait for reception of a character on the USART RX line and echo this
   * character on console */
  HAL_UART_Receive(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000a7e:	1df9      	adds	r1, r7, #7
 8000a80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a84:	2201      	movs	r2, #1
 8000a86:	4807      	ldr	r0, [pc, #28]	; (8000aa4 <__io_getchar+0x38>)
 8000a88:	f002 fad0 	bl	800302c <HAL_UART_Receive>
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000a8c:	1df9      	adds	r1, r7, #7
 8000a8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a92:	2201      	movs	r2, #1
 8000a94:	4803      	ldr	r0, [pc, #12]	; (8000aa4 <__io_getchar+0x38>)
 8000a96:	f002 fa3f 	bl	8002f18 <HAL_UART_Transmit>
  return ch;
 8000a9a:	79fb      	ldrb	r3, [r7, #7]
}
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	3708      	adds	r7, #8
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	20000084 	.word	0x20000084

08000aa8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000aa8:	b590      	push	{r4, r7, lr}
 8000aaa:	b0a3      	sub	sp, #140	; 0x8c
 8000aac:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000aae:	f000 fd5e 	bl	800156e <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000ab2:	f000 fa9b 	bl	8000fec <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000ab6:	f000 fb0f 	bl	80010d8 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000aba:	f000 fadd 	bl	8001078 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */
	printf("starting...\r\n");
 8000abe:	48b5      	ldr	r0, [pc, #724]	; (8000d94 <main+0x2ec>)
 8000ac0:	f004 fa8c 	bl	8004fdc <puts>
	HAL_Delay(1000);
 8000ac4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ac8:	f000 fdc6 	bl	8001658 <HAL_Delay>

	uint8_t ret = 0;
 8000acc:	2300      	movs	r3, #0
 8000ace:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
	node_t *program = NULL;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	64fb      	str	r3, [r7, #76]	; 0x4c

	printf("Ready\n");
 8000ad6:	48b0      	ldr	r0, [pc, #704]	; (8000d98 <main+0x2f0>)
 8000ad8:	f004 fa80 	bl	8004fdc <puts>

	uint8_t *c = NULL;
 8000adc:	2300      	movs	r3, #0
 8000ade:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	uint16_t bytes_received = 0;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68

	uint16_t file_len = 0;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

	if (HAL_UART_Receive(&huart2, (uint8_t*) &file_len, 2, 4000) != HAL_OK)	// receive 2 bytes, LSB first
 8000aee:	f107 014a 	add.w	r1, r7, #74	; 0x4a
 8000af2:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8000af6:	2202      	movs	r2, #2
 8000af8:	48a8      	ldr	r0, [pc, #672]	; (8000d9c <main+0x2f4>)
 8000afa:	f002 fa97 	bl	800302c <HAL_UART_Receive>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d003      	beq.n	8000b0c <main+0x64>
	{
		printf("Critical Error! Failed to receive file length\n");
 8000b04:	48a6      	ldr	r0, [pc, #664]	; (8000da0 <main+0x2f8>)
 8000b06:	f004 fa69 	bl	8004fdc <puts>
		goto error;
 8000b0a:	e234      	b.n	8000f76 <main+0x4ce>
	}

	if (file_len < 12) // the smallest possible .hex file is 12 bytes. ":00000001FF" + EOF
 8000b0c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8000b10:	2b0b      	cmp	r3, #11
 8000b12:	d803      	bhi.n	8000b1c <main+0x74>
	{
		printf("Critical Error! File is too short (<12 bytes)\n");
 8000b14:	48a3      	ldr	r0, [pc, #652]	; (8000da4 <main+0x2fc>)
 8000b16:	f004 fa61 	bl	8004fdc <puts>
		goto error;
 8000b1a:	e22c      	b.n	8000f76 <main+0x4ce>
	}

	printf("-vSuccessfully received file length %u bytes\n", file_len);
 8000b1c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8000b20:	4619      	mov	r1, r3
 8000b22:	48a1      	ldr	r0, [pc, #644]	; (8000da8 <main+0x300>)
 8000b24:	f004 f9ec 	bl	8004f00 <iprintf>

	c = (uint8_t*) malloc(file_len);
 8000b28:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f004 f87b 	bl	8004c28 <malloc>
 8000b32:	4603      	mov	r3, r0
 8000b34:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

	{
		uint8_t *cptr = c;
 8000b38:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000b3c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
		while ((ret = HAL_UART_Receive(&huart2, cptr, 1, 4000)) == HAL_OK) // 4 second timeout
 8000b40:	e00f      	b.n	8000b62 <main+0xba>
		{
			++cptr;
 8000b42:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000b46:	3301      	adds	r3, #1
 8000b48:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

			if (cptr >= c + file_len) {
 8000b4c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8000b50:	461a      	mov	r2, r3
 8000b52:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000b56:	4413      	add	r3, r2
 8000b58:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8000b5c:	429a      	cmp	r2, r3
 8000b5e:	d210      	bcs.n	8000b82 <main+0xda>
				break;
			}
			continue;
 8000b60:	bf00      	nop
		while ((ret = HAL_UART_Receive(&huart2, cptr, 1, 4000)) == HAL_OK) // 4 second timeout
 8000b62:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8000b66:	2201      	movs	r2, #1
 8000b68:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8000b6c:	488b      	ldr	r0, [pc, #556]	; (8000d9c <main+0x2f4>)
 8000b6e:	f002 fa5d 	bl	800302c <HAL_UART_Receive>
 8000b72:	4603      	mov	r3, r0
 8000b74:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 8000b78:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d0e0      	beq.n	8000b42 <main+0x9a>
 8000b80:	e000      	b.n	8000b84 <main+0xdc>
				break;
 8000b82:	bf00      	nop
		}

		bytes_received = (uint16_t) (cptr - c);
 8000b84:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8000b88:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000b8c:	1ad3      	subs	r3, r2, r3
 8000b8e:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
		if (ret != HAL_OK)
 8000b92:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d00d      	beq.n	8000bb6 <main+0x10e>
		{
			printf("Critical Error! Timed out while waiting for file. Received %u/%u ret = %u\n", cptr - c, file_len, ret);
 8000b9a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8000b9e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000ba2:	1ad1      	subs	r1, r2, r3
 8000ba4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8000ba8:	461a      	mov	r2, r3
 8000baa:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8000bae:	487f      	ldr	r0, [pc, #508]	; (8000dac <main+0x304>)
 8000bb0:	f004 f9a6 	bl	8004f00 <iprintf>
			goto error;
 8000bb4:	e1df      	b.n	8000f76 <main+0x4ce>
		}
	}

	printf("-vReceived file of length %u bytes\n", bytes_received);
 8000bb6:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8000bba:	4619      	mov	r1, r3
 8000bbc:	487c      	ldr	r0, [pc, #496]	; (8000db0 <main+0x308>)
 8000bbe:	f004 f99f 	bl	8004f00 <iprintf>

	if (bytes_received < 12) // the smallest possible .hex file is 12 bytes. ":00000001FF" + EOF
 8000bc2:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8000bc6:	2b0b      	cmp	r3, #11
 8000bc8:	d803      	bhi.n	8000bd2 <main+0x12a>
	{
		printf("Critical Error! File is too short (<12 bytes)\n");
 8000bca:	4876      	ldr	r0, [pc, #472]	; (8000da4 <main+0x2fc>)
 8000bcc:	f004 fa06 	bl	8004fdc <puts>
		goto error;
 8000bd0:	e1d1      	b.n	8000f76 <main+0x4ce>
	}

	printf("Verifying .hex file...\n");
 8000bd2:	4878      	ldr	r0, [pc, #480]	; (8000db4 <main+0x30c>)
 8000bd4:	f004 fa02 	bl	8004fdc <puts>
	ret = verify_hexfile_and_return_program_linklist(c, bytes_received, &program);
 8000bd8:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8000bdc:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8000be0:	4619      	mov	r1, r3
 8000be2:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8000be6:	f7ff fd4b 	bl	8000680 <verify_hexfile_and_return_program_linklist>
 8000bea:	4603      	mov	r3, r0
 8000bec:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
	if (ret != 0)
 8000bf0:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d003      	beq.n	8000c00 <main+0x158>
	{
		printf("Aborting...\n");
 8000bf8:	486f      	ldr	r0, [pc, #444]	; (8000db8 <main+0x310>)
 8000bfa:	f004 f9ef 	bl	8004fdc <puts>
		goto error;
 8000bfe:	e1ba      	b.n	8000f76 <main+0x4ce>
	}
	printf("-vSuccessfully verified .hex file\n");
 8000c00:	486e      	ldr	r0, [pc, #440]	; (8000dbc <main+0x314>)
 8000c02:	f004 f9eb 	bl	8004fdc <puts>

	printf("Connecting to target...\n");
 8000c06:	486e      	ldr	r0, [pc, #440]	; (8000dc0 <main+0x318>)
 8000c08:	f004 f9e8 	bl	8004fdc <puts>
	uint16_t deviceID;
	word status = GetDevice(&deviceID);
 8000c0c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000c10:	4618      	mov	r0, r3
 8000c12:	f003 fbf3 	bl	80043fc <GetDevice>
 8000c16:	4603      	mov	r3, r0
 8000c18:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
	if (status != STATUS_OK)         // Set DeviceId
 8000c1c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8000c20:	2b01      	cmp	r3, #1
 8000c22:	d006      	beq.n	8000c32 <main+0x18a>
	{
		printf("Get device failed. status=0x%x\n\r", status);
 8000c24:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8000c28:	4619      	mov	r1, r3
 8000c2a:	4866      	ldr	r0, [pc, #408]	; (8000dc4 <main+0x31c>)
 8000c2c:	f004 f968 	bl	8004f00 <iprintf>
		goto error;
 8000c30:	e1a1      	b.n	8000f76 <main+0x4ce>
	}                                    // time-out. (error: red LED is ON)
	printf("-vSuccessfully connected to target 0x%04x\n", deviceID);
 8000c32:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8000c36:	4619      	mov	r1, r3
 8000c38:	4863      	ldr	r0, [pc, #396]	; (8000dc8 <main+0x320>)
 8000c3a:	f004 f961 	bl	8004f00 <iprintf>

	printf("Erasing target flash...\n");
 8000c3e:	4863      	ldr	r0, [pc, #396]	; (8000dcc <main+0x324>)
 8000c40:	f004 f9cc 	bl	8004fdc <puts>

	uint8_t main_segments[64] = { 0 };// 64 segments of main memory 512 bytes each 0x8000 to 0xffff (in reality only 4 segments are used in 2k flash but this is easier
 8000c44:	2300      	movs	r3, #0
 8000c46:	60bb      	str	r3, [r7, #8]
 8000c48:	f107 030c 	add.w	r3, r7, #12
 8000c4c:	223c      	movs	r2, #60	; 0x3c
 8000c4e:	2100      	movs	r1, #0
 8000c50:	4618      	mov	r0, r3
 8000c52:	f004 faa3 	bl	800519c <memset>
	uint8_t info_segments[4] = { 0 }; // 4 segments of info memory 64 bytes each 0x1000 to 0x10ff. [0] is segment A and [3] is segment D
 8000c56:	2300      	movs	r3, #0
 8000c58:	607b      	str	r3, [r7, #4]

	// iterate through program linked list to find out which segments need to be erased
	for (node_t *iter = program; iter != NULL; iter = iter->next)// traverse the linked list
 8000c5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c5c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000c5e:	e059      	b.n	8000d14 <main+0x26c>
	{
		if (iter->address >= 0x8000) // technically 32kb flash region starts at 0x8000
 8000c60:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000c62:	881b      	ldrh	r3, [r3, #0]
 8000c64:	b21b      	sxth	r3, r3
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	da23      	bge.n	8000cb2 <main+0x20a>
		{
			//main
			uint8_t seg_index = (0xffff - iter->address) / 0x0200;
 8000c6a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000c6c:	881b      	ldrh	r3, [r3, #0]
 8000c6e:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8000c72:	33ff      	adds	r3, #255	; 0xff
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	da01      	bge.n	8000c7c <main+0x1d4>
 8000c78:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8000c7c:	125b      	asrs	r3, r3, #9
 8000c7e:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
			if (main_segments[seg_index] == 0)
 8000c82:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8000c86:	3388      	adds	r3, #136	; 0x88
 8000c88:	443b      	add	r3, r7
 8000c8a:	f813 3c80 	ldrb.w	r3, [r3, #-128]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d13d      	bne.n	8000d0e <main+0x266>
			{
				printf("-vPlan to flash main segment %u (0x%04x)\n", seg_index, iter->address);
 8000c92:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 8000c96:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000c98:	881b      	ldrh	r3, [r3, #0]
 8000c9a:	461a      	mov	r2, r3
 8000c9c:	484c      	ldr	r0, [pc, #304]	; (8000dd0 <main+0x328>)
 8000c9e:	f004 f92f 	bl	8004f00 <iprintf>
				main_segments[seg_index] = 1;
 8000ca2:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8000ca6:	3388      	adds	r3, #136	; 0x88
 8000ca8:	443b      	add	r3, r7
 8000caa:	2201      	movs	r2, #1
 8000cac:	f803 2c80 	strb.w	r2, [r3, #-128]
 8000cb0:	e02d      	b.n	8000d0e <main+0x266>
			}
		}
		else if (iter->address >= 0x1000 && iter->address <= 0x10ff)
 8000cb2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000cb4:	881b      	ldrh	r3, [r3, #0]
 8000cb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000cba:	d328      	bcc.n	8000d0e <main+0x266>
 8000cbc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000cbe:	881b      	ldrh	r3, [r3, #0]
 8000cc0:	f5b3 5f88 	cmp.w	r3, #4352	; 0x1100
 8000cc4:	d223      	bcs.n	8000d0e <main+0x266>
		{
			//info
			uint8_t seg_index = (0x10ff - iter->address) / 0x40;
 8000cc6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000cc8:	881b      	ldrh	r3, [r3, #0]
 8000cca:	f5c3 5387 	rsb	r3, r3, #4320	; 0x10e0
 8000cce:	331f      	adds	r3, #31
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	da00      	bge.n	8000cd6 <main+0x22e>
 8000cd4:	333f      	adds	r3, #63	; 0x3f
 8000cd6:	119b      	asrs	r3, r3, #6
 8000cd8:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			if (info_segments[seg_index] == 0)
 8000cdc:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8000ce0:	3388      	adds	r3, #136	; 0x88
 8000ce2:	443b      	add	r3, r7
 8000ce4:	f813 3c84 	ldrb.w	r3, [r3, #-132]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d110      	bne.n	8000d0e <main+0x266>
			{
				info_segments[seg_index] = 1;
 8000cec:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8000cf0:	3388      	adds	r3, #136	; 0x88
 8000cf2:	443b      	add	r3, r7
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	f803 2c84 	strb.w	r2, [r3, #-132]
				printf("-vNeed to flash info segment %c (0x%04x)\n", seg_index + 'A', iter->address);
 8000cfa:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8000cfe:	f103 0141 	add.w	r1, r3, #65	; 0x41
 8000d02:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000d04:	881b      	ldrh	r3, [r3, #0]
 8000d06:	461a      	mov	r2, r3
 8000d08:	4832      	ldr	r0, [pc, #200]	; (8000dd4 <main+0x32c>)
 8000d0a:	f004 f8f9 	bl	8004f00 <iprintf>
	for (node_t *iter = program; iter != NULL; iter = iter->next)// traverse the linked list
 8000d0e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000d10:	689b      	ldr	r3, [r3, #8]
 8000d12:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000d14:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d1a2      	bne.n	8000c60 <main+0x1b8>
			}
		}
	}

	uint32_t now = HAL_GetTick();
 8000d1a:	f000 fc91 	bl	8001640 <HAL_GetTick>
 8000d1e:	6638      	str	r0, [r7, #96]	; 0x60
	for (int i = 0; i < 64; i++)
 8000d20:	2300      	movs	r3, #0
 8000d22:	67bb      	str	r3, [r7, #120]	; 0x78
 8000d24:	e030      	b.n	8000d88 <main+0x2e0>
	{
		if (main_segments[i])
 8000d26:	f107 0208 	add.w	r2, r7, #8
 8000d2a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000d2c:	4413      	add	r3, r2
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d026      	beq.n	8000d82 <main+0x2da>
		{
			uint16_t address = 0xFE00 - 0x200 * i;
 8000d34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000d36:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8000d3a:	b29b      	uxth	r3, r3
 8000d3c:	025b      	lsls	r3, r3, #9
 8000d3e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54

			EraseFLASH(ERASE_SGMT, address);
 8000d42:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8000d46:	4619      	mov	r1, r3
 8000d48:	f24a 5002 	movw	r0, #42242	; 0xa502
 8000d4c:	f003 fd6a 	bl	8004824 <EraseFLASH>
			if (EraseCheck(address, 0x0100) != STATUS_OK) // Check main memory erasure (Fxx2..9)
 8000d50:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8000d54:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f003 fe3f 	bl	80049dc <EraseCheck>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b01      	cmp	r3, #1
 8000d62:	d007      	beq.n	8000d74 <main+0x2cc>
			{
				printf("Critical Error! Failed to erase main flash segment %u (begins 0x%04x)\n", i, address);
 8000d64:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8000d68:	461a      	mov	r2, r3
 8000d6a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8000d6c:	481a      	ldr	r0, [pc, #104]	; (8000dd8 <main+0x330>)
 8000d6e:	f004 f8c7 	bl	8004f00 <iprintf>
				goto error;
 8000d72:	e100      	b.n	8000f76 <main+0x4ce>
			}
			printf("-vSuccessfully erased flash segment %u (begins 0x%04x)\n", i, address);
 8000d74:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8000d78:	461a      	mov	r2, r3
 8000d7a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8000d7c:	4817      	ldr	r0, [pc, #92]	; (8000ddc <main+0x334>)
 8000d7e:	f004 f8bf 	bl	8004f00 <iprintf>
	for (int i = 0; i < 64; i++)
 8000d82:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000d84:	3301      	adds	r3, #1
 8000d86:	67bb      	str	r3, [r7, #120]	; 0x78
 8000d88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000d8a:	2b3f      	cmp	r3, #63	; 0x3f
 8000d8c:	ddcb      	ble.n	8000d26 <main+0x27e>
		}
	}
	for (int i = 0; i < 4; i++)
 8000d8e:	2300      	movs	r3, #0
 8000d90:	677b      	str	r3, [r7, #116]	; 0x74
 8000d92:	e05e      	b.n	8000e52 <main+0x3aa>
 8000d94:	08005df8 	.word	0x08005df8
 8000d98:	08005e08 	.word	0x08005e08
 8000d9c:	20000084 	.word	0x20000084
 8000da0:	08005e10 	.word	0x08005e10
 8000da4:	08005e40 	.word	0x08005e40
 8000da8:	08005e70 	.word	0x08005e70
 8000dac:	08005ea0 	.word	0x08005ea0
 8000db0:	08005eec 	.word	0x08005eec
 8000db4:	08005f10 	.word	0x08005f10
 8000db8:	08005f28 	.word	0x08005f28
 8000dbc:	08005f34 	.word	0x08005f34
 8000dc0:	08005f58 	.word	0x08005f58
 8000dc4:	08005f70 	.word	0x08005f70
 8000dc8:	08005f94 	.word	0x08005f94
 8000dcc:	08005fc0 	.word	0x08005fc0
 8000dd0:	08005fd8 	.word	0x08005fd8
 8000dd4:	08006004 	.word	0x08006004
 8000dd8:	08006030 	.word	0x08006030
 8000ddc:	08006078 	.word	0x08006078
	{
		if (info_segments[i])
 8000de0:	1d3a      	adds	r2, r7, #4
 8000de2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000de4:	4413      	add	r3, r2
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d02f      	beq.n	8000e4c <main+0x3a4>
		{
			uint16_t address = 0x10C0 - 0x40 * i;
 8000dec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000dee:	f1c3 0343 	rsb	r3, r3, #67	; 0x43
 8000df2:	b29b      	uxth	r3, r3
 8000df4:	019b      	lsls	r3, r3, #6
 8000df6:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

			EraseFLASH(ERASE_SGMT, address);
 8000dfa:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8000dfe:	4619      	mov	r1, r3
 8000e00:	f24a 5002 	movw	r0, #42242	; 0xa502
 8000e04:	f003 fd0e 	bl	8004824 <EraseFLASH>
			if (EraseCheck(address, 0x0020) != STATUS_OK) // Check main memory erasure (Fxx2..9)
 8000e08:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8000e0c:	2120      	movs	r1, #32
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f003 fde4 	bl	80049dc <EraseCheck>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b01      	cmp	r3, #1
 8000e18:	d00f      	beq.n	8000e3a <main+0x392>
			{
				if (i == 0) // segment A
 8000e1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d103      	bne.n	8000e28 <main+0x380>
				{
					printf("Error! Failed to erase info flash segment A (begins 0x10C0). This is a special segment which contains configuration data\n");
 8000e20:	4863      	ldr	r0, [pc, #396]	; (8000fb0 <main+0x508>)
 8000e22:	f004 f8db 	bl	8004fdc <puts>
					continue;
 8000e26:	e011      	b.n	8000e4c <main+0x3a4>
				}

				printf("Critical Error! Failed to erase info flash segment %c (begins 0x%04x)\n", i + 'A', address);
 8000e28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000e2a:	3341      	adds	r3, #65	; 0x41
 8000e2c:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 8000e30:	4619      	mov	r1, r3
 8000e32:	4860      	ldr	r0, [pc, #384]	; (8000fb4 <main+0x50c>)
 8000e34:	f004 f864 	bl	8004f00 <iprintf>
				goto error;
 8000e38:	e09d      	b.n	8000f76 <main+0x4ce>
			}
			printf("-vSuccessfully erased flash segment %c (begins 0x%04x)\n", i = 'A', address);
 8000e3a:	2341      	movs	r3, #65	; 0x41
 8000e3c:	677b      	str	r3, [r7, #116]	; 0x74
 8000e3e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8000e42:	461a      	mov	r2, r3
 8000e44:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8000e46:	485c      	ldr	r0, [pc, #368]	; (8000fb8 <main+0x510>)
 8000e48:	f004 f85a 	bl	8004f00 <iprintf>
	for (int i = 0; i < 4; i++)
 8000e4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000e4e:	3301      	adds	r3, #1
 8000e50:	677b      	str	r3, [r7, #116]	; 0x74
 8000e52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000e54:	2b03      	cmp	r3, #3
 8000e56:	ddc3      	ble.n	8000de0 <main+0x338>
		}
	}
	uint32_t delta = HAL_GetTick() - now;
 8000e58:	f000 fbf2 	bl	8001640 <HAL_GetTick>
 8000e5c:	4602      	mov	r2, r0
 8000e5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000e60:	1ad3      	subs	r3, r2, r3
 8000e62:	65fb      	str	r3, [r7, #92]	; 0x5c
	printf("-vSuccessfully erased target flash\n");
 8000e64:	4855      	ldr	r0, [pc, #340]	; (8000fbc <main+0x514>)
 8000e66:	f004 f8b9 	bl	8004fdc <puts>

	printf("Writing target flash...\n");
 8000e6a:	4855      	ldr	r0, [pc, #340]	; (8000fc0 <main+0x518>)
 8000e6c:	f004 f8b6 	bl	8004fdc <puts>
	now = HAL_GetTick();
 8000e70:	f000 fbe6 	bl	8001640 <HAL_GetTick>
 8000e74:	6638      	str	r0, [r7, #96]	; 0x60

	for (node_t *iter = program; iter != NULL; iter = iter->next)// traverse the linked list
 8000e76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e78:	673b      	str	r3, [r7, #112]	; 0x70
 8000e7a:	e052      	b.n	8000f22 <main+0x47a>
	{
		WriteFLASH(iter->address, iter->length, iter->data);
 8000e7c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000e7e:	8818      	ldrh	r0, [r3, #0]
 8000e80:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000e82:	789b      	ldrb	r3, [r3, #2]
 8000e84:	b299      	uxth	r1, r3
 8000e86:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	461a      	mov	r2, r3
 8000e8c:	f003 fb7a 	bl	8004584 <WriteFLASH>

		uint16_t *temp = (uint16_t*) malloc(iter->length * sizeof(uint16_t));
 8000e90:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000e92:	789b      	ldrb	r3, [r3, #2]
 8000e94:	005b      	lsls	r3, r3, #1
 8000e96:	4618      	mov	r0, r3
 8000e98:	f003 fec6 	bl	8004c28 <malloc>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	65bb      	str	r3, [r7, #88]	; 0x58
		ReadMemQuick(iter->address, iter->length, temp);
 8000ea0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000ea2:	8818      	ldrh	r0, [r3, #0]
 8000ea4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000ea6:	789b      	ldrb	r3, [r3, #2]
 8000ea8:	b29b      	uxth	r3, r3
 8000eaa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000eac:	4619      	mov	r1, r3
 8000eae:	f003 fc79 	bl	80047a4 <ReadMemQuick>

		printf("-v0x%04x: ", iter->address);
 8000eb2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000eb4:	881b      	ldrh	r3, [r3, #0]
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	4842      	ldr	r0, [pc, #264]	; (8000fc4 <main+0x51c>)
 8000eba:	f004 f821 	bl	8004f00 <iprintf>
		for (int i = 0; i < iter->length; i++)
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000ec2:	e00b      	b.n	8000edc <main+0x434>
		{
			printf("%04x", temp[i]);
 8000ec4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000ec6:	005b      	lsls	r3, r3, #1
 8000ec8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000eca:	4413      	add	r3, r2
 8000ecc:	881b      	ldrh	r3, [r3, #0]
 8000ece:	4619      	mov	r1, r3
 8000ed0:	483d      	ldr	r0, [pc, #244]	; (8000fc8 <main+0x520>)
 8000ed2:	f004 f815 	bl	8004f00 <iprintf>
		for (int i = 0; i < iter->length; i++)
 8000ed6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000ed8:	3301      	adds	r3, #1
 8000eda:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000edc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000ede:	789b      	ldrb	r3, [r3, #2]
 8000ee0:	461a      	mov	r2, r3
 8000ee2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	dbed      	blt.n	8000ec4 <main+0x41c>
		}
		printf("\n");
 8000ee8:	200a      	movs	r0, #10
 8000eea:	f004 f81b 	bl	8004f24 <putchar>

		free(temp);
 8000eee:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8000ef0:	f003 fea2 	bl	8004c38 <free>

		if (VerifyMem(iter->address, iter->length, iter->data) != STATUS_OK)
 8000ef4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000ef6:	8818      	ldrh	r0, [r3, #0]
 8000ef8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000efa:	789b      	ldrb	r3, [r3, #2]
 8000efc:	b299      	uxth	r1, r3
 8000efe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	461a      	mov	r2, r3
 8000f04:	f003 fd7d 	bl	8004a02 <VerifyMem>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b01      	cmp	r3, #1
 8000f0c:	d006      	beq.n	8000f1c <main+0x474>
		{
			printf("Critical Error! Verification of memory block 0x%04x failed!\n", iter->address);
 8000f0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000f10:	881b      	ldrh	r3, [r3, #0]
 8000f12:	4619      	mov	r1, r3
 8000f14:	482d      	ldr	r0, [pc, #180]	; (8000fcc <main+0x524>)
 8000f16:	f003 fff3 	bl	8004f00 <iprintf>
			goto error;
 8000f1a:	e02c      	b.n	8000f76 <main+0x4ce>
	for (node_t *iter = program; iter != NULL; iter = iter->next)// traverse the linked list
 8000f1c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000f1e:	689b      	ldr	r3, [r3, #8]
 8000f20:	673b      	str	r3, [r7, #112]	; 0x70
 8000f22:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d1a9      	bne.n	8000e7c <main+0x3d4>
		}
	}

	delta = HAL_GetTick() - now;
 8000f28:	f000 fb8a 	bl	8001640 <HAL_GetTick>
 8000f2c:	4602      	mov	r2, r0
 8000f2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000f30:	1ad3      	subs	r3, r2, r3
 8000f32:	65fb      	str	r3, [r7, #92]	; 0x5c
	printf("Successfully wrote target flash. Time elapsed %01lu:%02lu.%03lu\n", delta / 60000, (delta / 1000) % 60, delta % 1000);
 8000f34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000f36:	4a26      	ldr	r2, [pc, #152]	; (8000fd0 <main+0x528>)
 8000f38:	fba2 2303 	umull	r2, r3, r2, r3
 8000f3c:	0b98      	lsrs	r0, r3, #14
 8000f3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000f40:	4a24      	ldr	r2, [pc, #144]	; (8000fd4 <main+0x52c>)
 8000f42:	fba2 2303 	umull	r2, r3, r2, r3
 8000f46:	0999      	lsrs	r1, r3, #6
 8000f48:	4b23      	ldr	r3, [pc, #140]	; (8000fd8 <main+0x530>)
 8000f4a:	fba3 2301 	umull	r2, r3, r3, r1
 8000f4e:	095a      	lsrs	r2, r3, #5
 8000f50:	4613      	mov	r3, r2
 8000f52:	011b      	lsls	r3, r3, #4
 8000f54:	1a9b      	subs	r3, r3, r2
 8000f56:	009b      	lsls	r3, r3, #2
 8000f58:	1aca      	subs	r2, r1, r3
 8000f5a:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8000f5c:	4b1d      	ldr	r3, [pc, #116]	; (8000fd4 <main+0x52c>)
 8000f5e:	fba3 4301 	umull	r4, r3, r3, r1
 8000f62:	099b      	lsrs	r3, r3, #6
 8000f64:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8000f68:	fb04 f303 	mul.w	r3, r4, r3
 8000f6c:	1acb      	subs	r3, r1, r3
 8000f6e:	4601      	mov	r1, r0
 8000f70:	481a      	ldr	r0, [pc, #104]	; (8000fdc <main+0x534>)
 8000f72:	f003 ffc5 	bl	8004f00 <iprintf>

error:
	printf("Shutting down JTAG connection...\n");
 8000f76:	481a      	ldr	r0, [pc, #104]	; (8000fe0 <main+0x538>)
 8000f78:	f004 f830 	bl	8004fdc <puts>
	ReleaseDevice(V_RESET);
 8000f7c:	f64f 70fe 	movw	r0, #65534	; 0xfffe
 8000f80:	f003 faa8 	bl	80044d4 <ReleaseDevice>

	// cleanup
	free(c);
 8000f84:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8000f88:	f003 fe56 	bl	8004c38 <free>
	free_linkedlist(program);
 8000f8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f7ff fd1a 	bl	80009c8 <free_linkedlist>

	GPIO_DeInit();
 8000f94:	f000 f926 	bl	80011e4 <GPIO_DeInit>

	printf("Exit\n");
 8000f98:	4812      	ldr	r0, [pc, #72]	; (8000fe4 <main+0x53c>)
 8000f9a:	f004 f81f 	bl	8004fdc <puts>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {

		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000f9e:	2108      	movs	r1, #8
 8000fa0:	4811      	ldr	r0, [pc, #68]	; (8000fe8 <main+0x540>)
 8000fa2:	f000 fdcd 	bl	8001b40 <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 8000fa6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000faa:	f000 fb55 	bl	8001658 <HAL_Delay>
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000fae:	e7f6      	b.n	8000f9e <main+0x4f6>
 8000fb0:	080060b0 	.word	0x080060b0
 8000fb4:	0800612c 	.word	0x0800612c
 8000fb8:	08006174 	.word	0x08006174
 8000fbc:	080061ac 	.word	0x080061ac
 8000fc0:	080061d0 	.word	0x080061d0
 8000fc4:	080061e8 	.word	0x080061e8
 8000fc8:	080061f4 	.word	0x080061f4
 8000fcc:	080061fc 	.word	0x080061fc
 8000fd0:	45e7b273 	.word	0x45e7b273
 8000fd4:	10624dd3 	.word	0x10624dd3
 8000fd8:	88888889 	.word	0x88888889
 8000fdc:	0800623c 	.word	0x0800623c
 8000fe0:	08006280 	.word	0x08006280
 8000fe4:	080062a4 	.word	0x080062a4
 8000fe8:	48000400 	.word	0x48000400

08000fec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b096      	sub	sp, #88	; 0x58
 8000ff0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ff2:	f107 0314 	add.w	r3, r7, #20
 8000ff6:	2244      	movs	r2, #68	; 0x44
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f004 f8ce 	bl	800519c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001000:	463b      	mov	r3, r7
 8001002:	2200      	movs	r2, #0
 8001004:	601a      	str	r2, [r3, #0]
 8001006:	605a      	str	r2, [r3, #4]
 8001008:	609a      	str	r2, [r3, #8]
 800100a:	60da      	str	r2, [r3, #12]
 800100c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800100e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001012:	f000 fdbd 	bl	8001b90 <HAL_PWREx_ControlVoltageScaling>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800101c:	f000 f90a 	bl	8001234 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001020:	2302      	movs	r3, #2
 8001022:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001024:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001028:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800102a:	2310      	movs	r3, #16
 800102c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800102e:	2300      	movs	r3, #0
 8001030:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001032:	f107 0314 	add.w	r3, r7, #20
 8001036:	4618      	mov	r0, r3
 8001038:	f000 fe00 	bl	8001c3c <HAL_RCC_OscConfig>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <SystemClock_Config+0x5a>
  {
    Error_Handler();
 8001042:	f000 f8f7 	bl	8001234 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001046:	230f      	movs	r3, #15
 8001048:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800104a:	2301      	movs	r3, #1
 800104c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800104e:	2300      	movs	r3, #0
 8001050:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001052:	2300      	movs	r3, #0
 8001054:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001056:	2300      	movs	r3, #0
 8001058:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800105a:	463b      	mov	r3, r7
 800105c:	2100      	movs	r1, #0
 800105e:	4618      	mov	r0, r3
 8001060:	f001 fa00 	bl	8002464 <HAL_RCC_ClockConfig>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800106a:	f000 f8e3 	bl	8001234 <Error_Handler>
  }
}
 800106e:	bf00      	nop
 8001070:	3758      	adds	r7, #88	; 0x58
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
	...

08001078 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800107c:	4b14      	ldr	r3, [pc, #80]	; (80010d0 <MX_USART2_UART_Init+0x58>)
 800107e:	4a15      	ldr	r2, [pc, #84]	; (80010d4 <MX_USART2_UART_Init+0x5c>)
 8001080:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001082:	4b13      	ldr	r3, [pc, #76]	; (80010d0 <MX_USART2_UART_Init+0x58>)
 8001084:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001088:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800108a:	4b11      	ldr	r3, [pc, #68]	; (80010d0 <MX_USART2_UART_Init+0x58>)
 800108c:	2200      	movs	r2, #0
 800108e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001090:	4b0f      	ldr	r3, [pc, #60]	; (80010d0 <MX_USART2_UART_Init+0x58>)
 8001092:	2200      	movs	r2, #0
 8001094:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001096:	4b0e      	ldr	r3, [pc, #56]	; (80010d0 <MX_USART2_UART_Init+0x58>)
 8001098:	2200      	movs	r2, #0
 800109a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800109c:	4b0c      	ldr	r3, [pc, #48]	; (80010d0 <MX_USART2_UART_Init+0x58>)
 800109e:	220c      	movs	r2, #12
 80010a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010a2:	4b0b      	ldr	r3, [pc, #44]	; (80010d0 <MX_USART2_UART_Init+0x58>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010a8:	4b09      	ldr	r3, [pc, #36]	; (80010d0 <MX_USART2_UART_Init+0x58>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010ae:	4b08      	ldr	r3, [pc, #32]	; (80010d0 <MX_USART2_UART_Init+0x58>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010b4:	4b06      	ldr	r3, [pc, #24]	; (80010d0 <MX_USART2_UART_Init+0x58>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010ba:	4805      	ldr	r0, [pc, #20]	; (80010d0 <MX_USART2_UART_Init+0x58>)
 80010bc:	f001 fede 	bl	8002e7c <HAL_UART_Init>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80010c6:	f000 f8b5 	bl	8001234 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010ca:	bf00      	nop
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	20000084 	.word	0x20000084
 80010d4:	40004400 	.word	0x40004400

080010d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b086      	sub	sp, #24
 80010dc:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010de:	463b      	mov	r3, r7
 80010e0:	2200      	movs	r2, #0
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	605a      	str	r2, [r3, #4]
 80010e6:	609a      	str	r2, [r3, #8]
 80010e8:	60da      	str	r2, [r3, #12]
 80010ea:	611a      	str	r2, [r3, #16]
 80010ec:	615a      	str	r2, [r3, #20]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 80010ee:	2004      	movs	r0, #4
 80010f0:	f7ff fc92 	bl	8000a18 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80010f4:	2001      	movs	r0, #1
 80010f6:	f7ff fc8f 	bl	8000a18 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 80010fa:	2002      	movs	r0, #2
 80010fc:	f7ff fc8c 	bl	8000a18 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOH);
 8001100:	2080      	movs	r0, #128	; 0x80
 8001102:	f7ff fc89 	bl	8000a18 <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, TMS_Pin|TCK_Pin|TDI_Pin|TEST_Pin);
 8001106:	21b8      	movs	r1, #184	; 0xb8
 8001108:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800110c:	f7ff fc76 	bl	80009fc <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, TARGET_RESET_Pin|LD3_Pin);
 8001110:	210a      	movs	r1, #10
 8001112:	4832      	ldr	r0, [pc, #200]	; (80011dc <MX_GPIO_Init+0x104>)
 8001114:	f7ff fc72 	bl	80009fc <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1|LL_GPIO_PIN_8|LL_GPIO_PIN_9|LL_GPIO_PIN_10
 8001118:	f641 7302 	movw	r3, #7938	; 0x1f02
 800111c:	603b      	str	r3, [r7, #0]
                          |LL_GPIO_PIN_11|LL_GPIO_PIN_12;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800111e:	2303      	movs	r3, #3
 8001120:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001122:	2300      	movs	r3, #0
 8001124:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001126:	463b      	mov	r3, r7
 8001128:	4619      	mov	r1, r3
 800112a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800112e:	f002 fdd3 	bl	8003cd8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TMS_Pin|TCK_Pin|TDI_Pin|TEST_Pin;
 8001132:	23b8      	movs	r3, #184	; 0xb8
 8001134:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001136:	2301      	movs	r3, #1
 8001138:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800113a:	2303      	movs	r3, #3
 800113c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800113e:	2300      	movs	r3, #0
 8001140:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001142:	2300      	movs	r3, #0
 8001144:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001146:	463b      	mov	r3, r7
 8001148:	4619      	mov	r1, r3
 800114a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800114e:	f002 fdc3 	bl	8003cd8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TDO_Pin;
 8001152:	2340      	movs	r3, #64	; 0x40
 8001154:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001156:	2300      	movs	r3, #0
 8001158:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800115a:	2300      	movs	r3, #0
 800115c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(TDO_GPIO_Port, &GPIO_InitStruct);
 800115e:	463b      	mov	r3, r7
 8001160:	4619      	mov	r1, r3
 8001162:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001166:	f002 fdb7 	bl	8003cd8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_4|LL_GPIO_PIN_5|LL_GPIO_PIN_6
 800116a:	23f1      	movs	r3, #241	; 0xf1
 800116c:	603b      	str	r3, [r7, #0]
                          |LL_GPIO_PIN_7;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800116e:	2303      	movs	r3, #3
 8001170:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001172:	2300      	movs	r3, #0
 8001174:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001176:	463b      	mov	r3, r7
 8001178:	4619      	mov	r1, r3
 800117a:	4818      	ldr	r0, [pc, #96]	; (80011dc <MX_GPIO_Init+0x104>)
 800117c:	f002 fdac 	bl	8003cd8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TARGET_RESET_Pin;
 8001180:	2302      	movs	r3, #2
 8001182:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001184:	2301      	movs	r3, #1
 8001186:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001188:	2303      	movs	r3, #3
 800118a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800118c:	2300      	movs	r3, #0
 800118e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001190:	2300      	movs	r3, #0
 8001192:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(TARGET_RESET_GPIO_Port, &GPIO_InitStruct);
 8001194:	463b      	mov	r3, r7
 8001196:	4619      	mov	r1, r3
 8001198:	4810      	ldr	r0, [pc, #64]	; (80011dc <MX_GPIO_Init+0x104>)
 800119a:	f002 fd9d 	bl	8003cd8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LD3_Pin;
 800119e:	2308      	movs	r3, #8
 80011a0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80011a2:	2301      	movs	r3, #1
 80011a4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80011a6:	2300      	movs	r3, #0
 80011a8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80011aa:	2300      	movs	r3, #0
 80011ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80011ae:	2300      	movs	r3, #0
 80011b0:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80011b2:	463b      	mov	r3, r7
 80011b4:	4619      	mov	r1, r3
 80011b6:	4809      	ldr	r0, [pc, #36]	; (80011dc <MX_GPIO_Init+0x104>)
 80011b8:	f002 fd8e 	bl	8003cd8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 80011bc:	2308      	movs	r3, #8
 80011be:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80011c0:	2303      	movs	r3, #3
 80011c2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80011c4:	2300      	movs	r3, #0
 80011c6:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80011c8:	463b      	mov	r3, r7
 80011ca:	4619      	mov	r1, r3
 80011cc:	4804      	ldr	r0, [pc, #16]	; (80011e0 <MX_GPIO_Init+0x108>)
 80011ce:	f002 fd83 	bl	8003cd8 <LL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011d2:	bf00      	nop
 80011d4:	3718      	adds	r7, #24
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	48000400 	.word	0x48000400
 80011e0:	48001c00 	.word	0x48001c00

080011e4 <GPIO_DeInit>:

/* USER CODE BEGIN 4 */

// deinits all JTAG pins
static void GPIO_DeInit(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b086      	sub	sp, #24
 80011e8:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ea:	463b      	mov	r3, r7
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]
 80011f0:	605a      	str	r2, [r3, #4]
 80011f2:	609a      	str	r2, [r3, #8]
 80011f4:	60da      	str	r2, [r3, #12]
 80011f6:	611a      	str	r2, [r3, #16]
 80011f8:	615a      	str	r2, [r3, #20]

  GPIO_InitStruct.Pin = TMS_Pin|TCK_Pin|TDI_Pin|TEST_Pin|TDO_Pin;
 80011fa:	23f8      	movs	r3, #248	; 0xf8
 80011fc:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80011fe:	2303      	movs	r3, #3
 8001200:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001202:	2300      	movs	r3, #0
 8001204:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001206:	463b      	mov	r3, r7
 8001208:	4619      	mov	r1, r3
 800120a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800120e:	f002 fd63 	bl	8003cd8 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = TARGET_RESET_Pin;
 8001212:	2302      	movs	r3, #2
 8001214:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001216:	2303      	movs	r3, #3
 8001218:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800121a:	2300      	movs	r3, #0
 800121c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800121e:	463b      	mov	r3, r7
 8001220:	4619      	mov	r1, r3
 8001222:	4803      	ldr	r0, [pc, #12]	; (8001230 <GPIO_DeInit+0x4c>)
 8001224:	f002 fd58 	bl	8003cd8 <LL_GPIO_Init>
}
 8001228:	bf00      	nop
 800122a:	3718      	adds	r7, #24
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	48000400 	.word	0x48000400

08001234 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001238:	b672      	cpsid	i
}
 800123a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800123c:	e7fe      	b.n	800123c <Error_Handler+0x8>
	...

08001240 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001246:	4b0f      	ldr	r3, [pc, #60]	; (8001284 <HAL_MspInit+0x44>)
 8001248:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800124a:	4a0e      	ldr	r2, [pc, #56]	; (8001284 <HAL_MspInit+0x44>)
 800124c:	f043 0301 	orr.w	r3, r3, #1
 8001250:	6613      	str	r3, [r2, #96]	; 0x60
 8001252:	4b0c      	ldr	r3, [pc, #48]	; (8001284 <HAL_MspInit+0x44>)
 8001254:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001256:	f003 0301 	and.w	r3, r3, #1
 800125a:	607b      	str	r3, [r7, #4]
 800125c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800125e:	4b09      	ldr	r3, [pc, #36]	; (8001284 <HAL_MspInit+0x44>)
 8001260:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001262:	4a08      	ldr	r2, [pc, #32]	; (8001284 <HAL_MspInit+0x44>)
 8001264:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001268:	6593      	str	r3, [r2, #88]	; 0x58
 800126a:	4b06      	ldr	r3, [pc, #24]	; (8001284 <HAL_MspInit+0x44>)
 800126c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800126e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001272:	603b      	str	r3, [r7, #0]
 8001274:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001276:	bf00      	nop
 8001278:	370c      	adds	r7, #12
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	40021000 	.word	0x40021000

08001288 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b09e      	sub	sp, #120	; 0x78
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001290:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]
 8001298:	605a      	str	r2, [r3, #4]
 800129a:	609a      	str	r2, [r3, #8]
 800129c:	60da      	str	r2, [r3, #12]
 800129e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012a0:	f107 0310 	add.w	r3, r7, #16
 80012a4:	2254      	movs	r2, #84	; 0x54
 80012a6:	2100      	movs	r1, #0
 80012a8:	4618      	mov	r0, r3
 80012aa:	f003 ff77 	bl	800519c <memset>
  if(huart->Instance==USART2)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a28      	ldr	r2, [pc, #160]	; (8001354 <HAL_UART_MspInit+0xcc>)
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d148      	bne.n	800134a <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80012b8:	2302      	movs	r3, #2
 80012ba:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80012bc:	2300      	movs	r3, #0
 80012be:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012c0:	f107 0310 	add.w	r3, r7, #16
 80012c4:	4618      	mov	r0, r3
 80012c6:	f001 faf1 	bl	80028ac <HAL_RCCEx_PeriphCLKConfig>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80012d0:	f7ff ffb0 	bl	8001234 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80012d4:	4b20      	ldr	r3, [pc, #128]	; (8001358 <HAL_UART_MspInit+0xd0>)
 80012d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012d8:	4a1f      	ldr	r2, [pc, #124]	; (8001358 <HAL_UART_MspInit+0xd0>)
 80012da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012de:	6593      	str	r3, [r2, #88]	; 0x58
 80012e0:	4b1d      	ldr	r3, [pc, #116]	; (8001358 <HAL_UART_MspInit+0xd0>)
 80012e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012e8:	60fb      	str	r3, [r7, #12]
 80012ea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ec:	4b1a      	ldr	r3, [pc, #104]	; (8001358 <HAL_UART_MspInit+0xd0>)
 80012ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012f0:	4a19      	ldr	r2, [pc, #100]	; (8001358 <HAL_UART_MspInit+0xd0>)
 80012f2:	f043 0301 	orr.w	r3, r3, #1
 80012f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012f8:	4b17      	ldr	r3, [pc, #92]	; (8001358 <HAL_UART_MspInit+0xd0>)
 80012fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012fc:	f003 0301 	and.w	r3, r3, #1
 8001300:	60bb      	str	r3, [r7, #8]
 8001302:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001304:	2304      	movs	r3, #4
 8001306:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001308:	2302      	movs	r3, #2
 800130a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130c:	2300      	movs	r3, #0
 800130e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001310:	2303      	movs	r3, #3
 8001312:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001314:	2307      	movs	r3, #7
 8001316:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001318:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800131c:	4619      	mov	r1, r3
 800131e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001322:	f000 faa3 	bl	800186c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001326:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800132a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800132c:	2302      	movs	r3, #2
 800132e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001330:	2300      	movs	r3, #0
 8001332:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001334:	2303      	movs	r3, #3
 8001336:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001338:	2303      	movs	r3, #3
 800133a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800133c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001340:	4619      	mov	r1, r3
 8001342:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001346:	f000 fa91 	bl	800186c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800134a:	bf00      	nop
 800134c:	3778      	adds	r7, #120	; 0x78
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	40004400 	.word	0x40004400
 8001358:	40021000 	.word	0x40021000

0800135c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001360:	e7fe      	b.n	8001360 <NMI_Handler+0x4>

08001362 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001362:	b480      	push	{r7}
 8001364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001366:	e7fe      	b.n	8001366 <HardFault_Handler+0x4>

08001368 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800136c:	e7fe      	b.n	800136c <MemManage_Handler+0x4>

0800136e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800136e:	b480      	push	{r7}
 8001370:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001372:	e7fe      	b.n	8001372 <BusFault_Handler+0x4>

08001374 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001378:	e7fe      	b.n	8001378 <UsageFault_Handler+0x4>

0800137a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800137a:	b480      	push	{r7}
 800137c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800137e:	bf00      	nop
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr

08001388 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800138c:	bf00      	nop
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr

08001396 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001396:	b480      	push	{r7}
 8001398:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800139a:	bf00      	nop
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr

080013a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013a8:	f000 f936 	bl	8001618 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013ac:	bf00      	nop
 80013ae:	bd80      	pop	{r7, pc}

080013b0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b086      	sub	sp, #24
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	60f8      	str	r0, [r7, #12]
 80013b8:	60b9      	str	r1, [r7, #8]
 80013ba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013bc:	2300      	movs	r3, #0
 80013be:	617b      	str	r3, [r7, #20]
 80013c0:	e00a      	b.n	80013d8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80013c2:	f7ff fb53 	bl	8000a6c <__io_getchar>
 80013c6:	4601      	mov	r1, r0
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	1c5a      	adds	r2, r3, #1
 80013cc:	60ba      	str	r2, [r7, #8]
 80013ce:	b2ca      	uxtb	r2, r1
 80013d0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	3301      	adds	r3, #1
 80013d6:	617b      	str	r3, [r7, #20]
 80013d8:	697a      	ldr	r2, [r7, #20]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	429a      	cmp	r2, r3
 80013de:	dbf0      	blt.n	80013c2 <_read+0x12>
  }

  return len;
 80013e0:	687b      	ldr	r3, [r7, #4]
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3718      	adds	r7, #24
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}

080013ea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013ea:	b580      	push	{r7, lr}
 80013ec:	b086      	sub	sp, #24
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	60f8      	str	r0, [r7, #12]
 80013f2:	60b9      	str	r1, [r7, #8]
 80013f4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013f6:	2300      	movs	r3, #0
 80013f8:	617b      	str	r3, [r7, #20]
 80013fa:	e009      	b.n	8001410 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	1c5a      	adds	r2, r3, #1
 8001400:	60ba      	str	r2, [r7, #8]
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	4618      	mov	r0, r3
 8001406:	f7ff fb1f 	bl	8000a48 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	3301      	adds	r3, #1
 800140e:	617b      	str	r3, [r7, #20]
 8001410:	697a      	ldr	r2, [r7, #20]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	429a      	cmp	r2, r3
 8001416:	dbf1      	blt.n	80013fc <_write+0x12>
  }
  return len;
 8001418:	687b      	ldr	r3, [r7, #4]
}
 800141a:	4618      	mov	r0, r3
 800141c:	3718      	adds	r7, #24
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}

08001422 <_close>:

int _close(int file)
{
 8001422:	b480      	push	{r7}
 8001424:	b083      	sub	sp, #12
 8001426:	af00      	add	r7, sp, #0
 8001428:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800142a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800142e:	4618      	mov	r0, r3
 8001430:	370c      	adds	r7, #12
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr

0800143a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800143a:	b480      	push	{r7}
 800143c:	b083      	sub	sp, #12
 800143e:	af00      	add	r7, sp, #0
 8001440:	6078      	str	r0, [r7, #4]
 8001442:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800144a:	605a      	str	r2, [r3, #4]
  return 0;
 800144c:	2300      	movs	r3, #0
}
 800144e:	4618      	mov	r0, r3
 8001450:	370c      	adds	r7, #12
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr

0800145a <_isatty>:

int _isatty(int file)
{
 800145a:	b480      	push	{r7}
 800145c:	b083      	sub	sp, #12
 800145e:	af00      	add	r7, sp, #0
 8001460:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001462:	2301      	movs	r3, #1
}
 8001464:	4618      	mov	r0, r3
 8001466:	370c      	adds	r7, #12
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr

08001470 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001470:	b480      	push	{r7}
 8001472:	b085      	sub	sp, #20
 8001474:	af00      	add	r7, sp, #0
 8001476:	60f8      	str	r0, [r7, #12]
 8001478:	60b9      	str	r1, [r7, #8]
 800147a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800147c:	2300      	movs	r3, #0
}
 800147e:	4618      	mov	r0, r3
 8001480:	3714      	adds	r7, #20
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
	...

0800148c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b086      	sub	sp, #24
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001494:	4a14      	ldr	r2, [pc, #80]	; (80014e8 <_sbrk+0x5c>)
 8001496:	4b15      	ldr	r3, [pc, #84]	; (80014ec <_sbrk+0x60>)
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014a0:	4b13      	ldr	r3, [pc, #76]	; (80014f0 <_sbrk+0x64>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d102      	bne.n	80014ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014a8:	4b11      	ldr	r3, [pc, #68]	; (80014f0 <_sbrk+0x64>)
 80014aa:	4a12      	ldr	r2, [pc, #72]	; (80014f4 <_sbrk+0x68>)
 80014ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014ae:	4b10      	ldr	r3, [pc, #64]	; (80014f0 <_sbrk+0x64>)
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4413      	add	r3, r2
 80014b6:	693a      	ldr	r2, [r7, #16]
 80014b8:	429a      	cmp	r2, r3
 80014ba:	d207      	bcs.n	80014cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014bc:	f003 fecc 	bl	8005258 <__errno>
 80014c0:	4603      	mov	r3, r0
 80014c2:	220c      	movs	r2, #12
 80014c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014ca:	e009      	b.n	80014e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014cc:	4b08      	ldr	r3, [pc, #32]	; (80014f0 <_sbrk+0x64>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014d2:	4b07      	ldr	r3, [pc, #28]	; (80014f0 <_sbrk+0x64>)
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4413      	add	r3, r2
 80014da:	4a05      	ldr	r2, [pc, #20]	; (80014f0 <_sbrk+0x64>)
 80014dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014de:	68fb      	ldr	r3, [r7, #12]
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	3718      	adds	r7, #24
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	20010000 	.word	0x20010000
 80014ec:	00000400 	.word	0x00000400
 80014f0:	2000010c 	.word	0x2000010c
 80014f4:	20000268 	.word	0x20000268

080014f8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80014fc:	4b06      	ldr	r3, [pc, #24]	; (8001518 <SystemInit+0x20>)
 80014fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001502:	4a05      	ldr	r2, [pc, #20]	; (8001518 <SystemInit+0x20>)
 8001504:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001508:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800150c:	bf00      	nop
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	e000ed00 	.word	0xe000ed00

0800151c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800151c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001554 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001520:	f7ff ffea 	bl	80014f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001524:	480c      	ldr	r0, [pc, #48]	; (8001558 <LoopForever+0x6>)
  ldr r1, =_edata
 8001526:	490d      	ldr	r1, [pc, #52]	; (800155c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001528:	4a0d      	ldr	r2, [pc, #52]	; (8001560 <LoopForever+0xe>)
  movs r3, #0
 800152a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800152c:	e002      	b.n	8001534 <LoopCopyDataInit>

0800152e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800152e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001530:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001532:	3304      	adds	r3, #4

08001534 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001534:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001536:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001538:	d3f9      	bcc.n	800152e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800153a:	4a0a      	ldr	r2, [pc, #40]	; (8001564 <LoopForever+0x12>)
  ldr r4, =_ebss
 800153c:	4c0a      	ldr	r4, [pc, #40]	; (8001568 <LoopForever+0x16>)
  movs r3, #0
 800153e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001540:	e001      	b.n	8001546 <LoopFillZerobss>

08001542 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001542:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001544:	3204      	adds	r2, #4

08001546 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001546:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001548:	d3fb      	bcc.n	8001542 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800154a:	f003 fe8b 	bl	8005264 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800154e:	f7ff faab 	bl	8000aa8 <main>

08001552 <LoopForever>:

LoopForever:
    b LoopForever
 8001552:	e7fe      	b.n	8001552 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001554:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001558:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800155c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001560:	080065d8 	.word	0x080065d8
  ldr r2, =_sbss
 8001564:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001568:	20000264 	.word	0x20000264

0800156c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800156c:	e7fe      	b.n	800156c <ADC1_IRQHandler>

0800156e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800156e:	b580      	push	{r7, lr}
 8001570:	b082      	sub	sp, #8
 8001572:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001574:	2300      	movs	r3, #0
 8001576:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001578:	2003      	movs	r0, #3
 800157a:	f000 f943 	bl	8001804 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800157e:	2000      	movs	r0, #0
 8001580:	f000 f80e 	bl	80015a0 <HAL_InitTick>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d002      	beq.n	8001590 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	71fb      	strb	r3, [r7, #7]
 800158e:	e001      	b.n	8001594 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001590:	f7ff fe56 	bl	8001240 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001594:	79fb      	ldrb	r3, [r7, #7]
}
 8001596:	4618      	mov	r0, r3
 8001598:	3708      	adds	r7, #8
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
	...

080015a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80015a8:	2300      	movs	r3, #0
 80015aa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80015ac:	4b17      	ldr	r3, [pc, #92]	; (800160c <HAL_InitTick+0x6c>)
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d023      	beq.n	80015fc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80015b4:	4b16      	ldr	r3, [pc, #88]	; (8001610 <HAL_InitTick+0x70>)
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	4b14      	ldr	r3, [pc, #80]	; (800160c <HAL_InitTick+0x6c>)
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	4619      	mov	r1, r3
 80015be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80015c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ca:	4618      	mov	r0, r3
 80015cc:	f000 f941 	bl	8001852 <HAL_SYSTICK_Config>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d10f      	bne.n	80015f6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2b0f      	cmp	r3, #15
 80015da:	d809      	bhi.n	80015f0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015dc:	2200      	movs	r2, #0
 80015de:	6879      	ldr	r1, [r7, #4]
 80015e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80015e4:	f000 f919 	bl	800181a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80015e8:	4a0a      	ldr	r2, [pc, #40]	; (8001614 <HAL_InitTick+0x74>)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6013      	str	r3, [r2, #0]
 80015ee:	e007      	b.n	8001600 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80015f0:	2301      	movs	r3, #1
 80015f2:	73fb      	strb	r3, [r7, #15]
 80015f4:	e004      	b.n	8001600 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	73fb      	strb	r3, [r7, #15]
 80015fa:	e001      	b.n	8001600 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80015fc:	2301      	movs	r3, #1
 80015fe:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001600:	7bfb      	ldrb	r3, [r7, #15]
}
 8001602:	4618      	mov	r0, r3
 8001604:	3710      	adds	r7, #16
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	20000008 	.word	0x20000008
 8001610:	20000000 	.word	0x20000000
 8001614:	20000004 	.word	0x20000004

08001618 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800161c:	4b06      	ldr	r3, [pc, #24]	; (8001638 <HAL_IncTick+0x20>)
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	461a      	mov	r2, r3
 8001622:	4b06      	ldr	r3, [pc, #24]	; (800163c <HAL_IncTick+0x24>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4413      	add	r3, r2
 8001628:	4a04      	ldr	r2, [pc, #16]	; (800163c <HAL_IncTick+0x24>)
 800162a:	6013      	str	r3, [r2, #0]
}
 800162c:	bf00      	nop
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	20000008 	.word	0x20000008
 800163c:	20000110 	.word	0x20000110

08001640 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  return uwTick;
 8001644:	4b03      	ldr	r3, [pc, #12]	; (8001654 <HAL_GetTick+0x14>)
 8001646:	681b      	ldr	r3, [r3, #0]
}
 8001648:	4618      	mov	r0, r3
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
 8001652:	bf00      	nop
 8001654:	20000110 	.word	0x20000110

08001658 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b084      	sub	sp, #16
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001660:	f7ff ffee 	bl	8001640 <HAL_GetTick>
 8001664:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001670:	d005      	beq.n	800167e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001672:	4b0a      	ldr	r3, [pc, #40]	; (800169c <HAL_Delay+0x44>)
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	461a      	mov	r2, r3
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	4413      	add	r3, r2
 800167c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800167e:	bf00      	nop
 8001680:	f7ff ffde 	bl	8001640 <HAL_GetTick>
 8001684:	4602      	mov	r2, r0
 8001686:	68bb      	ldr	r3, [r7, #8]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	68fa      	ldr	r2, [r7, #12]
 800168c:	429a      	cmp	r2, r3
 800168e:	d8f7      	bhi.n	8001680 <HAL_Delay+0x28>
  {
  }
}
 8001690:	bf00      	nop
 8001692:	bf00      	nop
 8001694:	3710      	adds	r7, #16
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	20000008 	.word	0x20000008

080016a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b085      	sub	sp, #20
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	f003 0307 	and.w	r3, r3, #7
 80016ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016b0:	4b0c      	ldr	r3, [pc, #48]	; (80016e4 <__NVIC_SetPriorityGrouping+0x44>)
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016b6:	68ba      	ldr	r2, [r7, #8]
 80016b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016bc:	4013      	ands	r3, r2
 80016be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016d2:	4a04      	ldr	r2, [pc, #16]	; (80016e4 <__NVIC_SetPriorityGrouping+0x44>)
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	60d3      	str	r3, [r2, #12]
}
 80016d8:	bf00      	nop
 80016da:	3714      	adds	r7, #20
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr
 80016e4:	e000ed00 	.word	0xe000ed00

080016e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016ec:	4b04      	ldr	r3, [pc, #16]	; (8001700 <__NVIC_GetPriorityGrouping+0x18>)
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	0a1b      	lsrs	r3, r3, #8
 80016f2:	f003 0307 	and.w	r3, r3, #7
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr
 8001700:	e000ed00 	.word	0xe000ed00

08001704 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	4603      	mov	r3, r0
 800170c:	6039      	str	r1, [r7, #0]
 800170e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001710:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001714:	2b00      	cmp	r3, #0
 8001716:	db0a      	blt.n	800172e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	b2da      	uxtb	r2, r3
 800171c:	490c      	ldr	r1, [pc, #48]	; (8001750 <__NVIC_SetPriority+0x4c>)
 800171e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001722:	0112      	lsls	r2, r2, #4
 8001724:	b2d2      	uxtb	r2, r2
 8001726:	440b      	add	r3, r1
 8001728:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800172c:	e00a      	b.n	8001744 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	b2da      	uxtb	r2, r3
 8001732:	4908      	ldr	r1, [pc, #32]	; (8001754 <__NVIC_SetPriority+0x50>)
 8001734:	79fb      	ldrb	r3, [r7, #7]
 8001736:	f003 030f 	and.w	r3, r3, #15
 800173a:	3b04      	subs	r3, #4
 800173c:	0112      	lsls	r2, r2, #4
 800173e:	b2d2      	uxtb	r2, r2
 8001740:	440b      	add	r3, r1
 8001742:	761a      	strb	r2, [r3, #24]
}
 8001744:	bf00      	nop
 8001746:	370c      	adds	r7, #12
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr
 8001750:	e000e100 	.word	0xe000e100
 8001754:	e000ed00 	.word	0xe000ed00

08001758 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001758:	b480      	push	{r7}
 800175a:	b089      	sub	sp, #36	; 0x24
 800175c:	af00      	add	r7, sp, #0
 800175e:	60f8      	str	r0, [r7, #12]
 8001760:	60b9      	str	r1, [r7, #8]
 8001762:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	f003 0307 	and.w	r3, r3, #7
 800176a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800176c:	69fb      	ldr	r3, [r7, #28]
 800176e:	f1c3 0307 	rsb	r3, r3, #7
 8001772:	2b04      	cmp	r3, #4
 8001774:	bf28      	it	cs
 8001776:	2304      	movcs	r3, #4
 8001778:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	3304      	adds	r3, #4
 800177e:	2b06      	cmp	r3, #6
 8001780:	d902      	bls.n	8001788 <NVIC_EncodePriority+0x30>
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	3b03      	subs	r3, #3
 8001786:	e000      	b.n	800178a <NVIC_EncodePriority+0x32>
 8001788:	2300      	movs	r3, #0
 800178a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800178c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001790:	69bb      	ldr	r3, [r7, #24]
 8001792:	fa02 f303 	lsl.w	r3, r2, r3
 8001796:	43da      	mvns	r2, r3
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	401a      	ands	r2, r3
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017a0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	fa01 f303 	lsl.w	r3, r1, r3
 80017aa:	43d9      	mvns	r1, r3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017b0:	4313      	orrs	r3, r2
         );
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3724      	adds	r7, #36	; 0x24
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr
	...

080017c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	3b01      	subs	r3, #1
 80017cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017d0:	d301      	bcc.n	80017d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017d2:	2301      	movs	r3, #1
 80017d4:	e00f      	b.n	80017f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017d6:	4a0a      	ldr	r2, [pc, #40]	; (8001800 <SysTick_Config+0x40>)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	3b01      	subs	r3, #1
 80017dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017de:	210f      	movs	r1, #15
 80017e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80017e4:	f7ff ff8e 	bl	8001704 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017e8:	4b05      	ldr	r3, [pc, #20]	; (8001800 <SysTick_Config+0x40>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017ee:	4b04      	ldr	r3, [pc, #16]	; (8001800 <SysTick_Config+0x40>)
 80017f0:	2207      	movs	r2, #7
 80017f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017f4:	2300      	movs	r3, #0
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3708      	adds	r7, #8
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	e000e010 	.word	0xe000e010

08001804 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800180c:	6878      	ldr	r0, [r7, #4]
 800180e:	f7ff ff47 	bl	80016a0 <__NVIC_SetPriorityGrouping>
}
 8001812:	bf00      	nop
 8001814:	3708      	adds	r7, #8
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}

0800181a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800181a:	b580      	push	{r7, lr}
 800181c:	b086      	sub	sp, #24
 800181e:	af00      	add	r7, sp, #0
 8001820:	4603      	mov	r3, r0
 8001822:	60b9      	str	r1, [r7, #8]
 8001824:	607a      	str	r2, [r7, #4]
 8001826:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001828:	2300      	movs	r3, #0
 800182a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800182c:	f7ff ff5c 	bl	80016e8 <__NVIC_GetPriorityGrouping>
 8001830:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001832:	687a      	ldr	r2, [r7, #4]
 8001834:	68b9      	ldr	r1, [r7, #8]
 8001836:	6978      	ldr	r0, [r7, #20]
 8001838:	f7ff ff8e 	bl	8001758 <NVIC_EncodePriority>
 800183c:	4602      	mov	r2, r0
 800183e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001842:	4611      	mov	r1, r2
 8001844:	4618      	mov	r0, r3
 8001846:	f7ff ff5d 	bl	8001704 <__NVIC_SetPriority>
}
 800184a:	bf00      	nop
 800184c:	3718      	adds	r7, #24
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}

08001852 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001852:	b580      	push	{r7, lr}
 8001854:	b082      	sub	sp, #8
 8001856:	af00      	add	r7, sp, #0
 8001858:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	f7ff ffb0 	bl	80017c0 <SysTick_Config>
 8001860:	4603      	mov	r3, r0
}
 8001862:	4618      	mov	r0, r3
 8001864:	3708      	adds	r7, #8
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
	...

0800186c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800186c:	b480      	push	{r7}
 800186e:	b087      	sub	sp, #28
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
 8001874:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001876:	2300      	movs	r3, #0
 8001878:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800187a:	e148      	b.n	8001b0e <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	2101      	movs	r1, #1
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	fa01 f303 	lsl.w	r3, r1, r3
 8001888:	4013      	ands	r3, r2
 800188a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	2b00      	cmp	r3, #0
 8001890:	f000 813a 	beq.w	8001b08 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	f003 0303 	and.w	r3, r3, #3
 800189c:	2b01      	cmp	r3, #1
 800189e:	d005      	beq.n	80018ac <HAL_GPIO_Init+0x40>
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	f003 0303 	and.w	r3, r3, #3
 80018a8:	2b02      	cmp	r3, #2
 80018aa:	d130      	bne.n	800190e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	005b      	lsls	r3, r3, #1
 80018b6:	2203      	movs	r2, #3
 80018b8:	fa02 f303 	lsl.w	r3, r2, r3
 80018bc:	43db      	mvns	r3, r3
 80018be:	693a      	ldr	r2, [r7, #16]
 80018c0:	4013      	ands	r3, r2
 80018c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	68da      	ldr	r2, [r3, #12]
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	005b      	lsls	r3, r3, #1
 80018cc:	fa02 f303 	lsl.w	r3, r2, r3
 80018d0:	693a      	ldr	r2, [r7, #16]
 80018d2:	4313      	orrs	r3, r2
 80018d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	693a      	ldr	r2, [r7, #16]
 80018da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80018e2:	2201      	movs	r2, #1
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ea:	43db      	mvns	r3, r3
 80018ec:	693a      	ldr	r2, [r7, #16]
 80018ee:	4013      	ands	r3, r2
 80018f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	091b      	lsrs	r3, r3, #4
 80018f8:	f003 0201 	and.w	r2, r3, #1
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001902:	693a      	ldr	r2, [r7, #16]
 8001904:	4313      	orrs	r3, r2
 8001906:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	693a      	ldr	r2, [r7, #16]
 800190c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	f003 0303 	and.w	r3, r3, #3
 8001916:	2b03      	cmp	r3, #3
 8001918:	d017      	beq.n	800194a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	68db      	ldr	r3, [r3, #12]
 800191e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	005b      	lsls	r3, r3, #1
 8001924:	2203      	movs	r2, #3
 8001926:	fa02 f303 	lsl.w	r3, r2, r3
 800192a:	43db      	mvns	r3, r3
 800192c:	693a      	ldr	r2, [r7, #16]
 800192e:	4013      	ands	r3, r2
 8001930:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	689a      	ldr	r2, [r3, #8]
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	005b      	lsls	r3, r3, #1
 800193a:	fa02 f303 	lsl.w	r3, r2, r3
 800193e:	693a      	ldr	r2, [r7, #16]
 8001940:	4313      	orrs	r3, r2
 8001942:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	693a      	ldr	r2, [r7, #16]
 8001948:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	f003 0303 	and.w	r3, r3, #3
 8001952:	2b02      	cmp	r3, #2
 8001954:	d123      	bne.n	800199e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	08da      	lsrs	r2, r3, #3
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	3208      	adds	r2, #8
 800195e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001962:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	f003 0307 	and.w	r3, r3, #7
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	220f      	movs	r2, #15
 800196e:	fa02 f303 	lsl.w	r3, r2, r3
 8001972:	43db      	mvns	r3, r3
 8001974:	693a      	ldr	r2, [r7, #16]
 8001976:	4013      	ands	r3, r2
 8001978:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	691a      	ldr	r2, [r3, #16]
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	f003 0307 	and.w	r3, r3, #7
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	fa02 f303 	lsl.w	r3, r2, r3
 800198a:	693a      	ldr	r2, [r7, #16]
 800198c:	4313      	orrs	r3, r2
 800198e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	08da      	lsrs	r2, r3, #3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	3208      	adds	r2, #8
 8001998:	6939      	ldr	r1, [r7, #16]
 800199a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	005b      	lsls	r3, r3, #1
 80019a8:	2203      	movs	r2, #3
 80019aa:	fa02 f303 	lsl.w	r3, r2, r3
 80019ae:	43db      	mvns	r3, r3
 80019b0:	693a      	ldr	r2, [r7, #16]
 80019b2:	4013      	ands	r3, r2
 80019b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	f003 0203 	and.w	r2, r3, #3
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	005b      	lsls	r3, r3, #1
 80019c2:	fa02 f303 	lsl.w	r3, r2, r3
 80019c6:	693a      	ldr	r2, [r7, #16]
 80019c8:	4313      	orrs	r3, r2
 80019ca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	693a      	ldr	r2, [r7, #16]
 80019d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019da:	2b00      	cmp	r3, #0
 80019dc:	f000 8094 	beq.w	8001b08 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019e0:	4b52      	ldr	r3, [pc, #328]	; (8001b2c <HAL_GPIO_Init+0x2c0>)
 80019e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019e4:	4a51      	ldr	r2, [pc, #324]	; (8001b2c <HAL_GPIO_Init+0x2c0>)
 80019e6:	f043 0301 	orr.w	r3, r3, #1
 80019ea:	6613      	str	r3, [r2, #96]	; 0x60
 80019ec:	4b4f      	ldr	r3, [pc, #316]	; (8001b2c <HAL_GPIO_Init+0x2c0>)
 80019ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019f0:	f003 0301 	and.w	r3, r3, #1
 80019f4:	60bb      	str	r3, [r7, #8]
 80019f6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80019f8:	4a4d      	ldr	r2, [pc, #308]	; (8001b30 <HAL_GPIO_Init+0x2c4>)
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	089b      	lsrs	r3, r3, #2
 80019fe:	3302      	adds	r3, #2
 8001a00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a04:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	f003 0303 	and.w	r3, r3, #3
 8001a0c:	009b      	lsls	r3, r3, #2
 8001a0e:	220f      	movs	r2, #15
 8001a10:	fa02 f303 	lsl.w	r3, r2, r3
 8001a14:	43db      	mvns	r3, r3
 8001a16:	693a      	ldr	r2, [r7, #16]
 8001a18:	4013      	ands	r3, r2
 8001a1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001a22:	d00d      	beq.n	8001a40 <HAL_GPIO_Init+0x1d4>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	4a43      	ldr	r2, [pc, #268]	; (8001b34 <HAL_GPIO_Init+0x2c8>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d007      	beq.n	8001a3c <HAL_GPIO_Init+0x1d0>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	4a42      	ldr	r2, [pc, #264]	; (8001b38 <HAL_GPIO_Init+0x2cc>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d101      	bne.n	8001a38 <HAL_GPIO_Init+0x1cc>
 8001a34:	2302      	movs	r3, #2
 8001a36:	e004      	b.n	8001a42 <HAL_GPIO_Init+0x1d6>
 8001a38:	2307      	movs	r3, #7
 8001a3a:	e002      	b.n	8001a42 <HAL_GPIO_Init+0x1d6>
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	e000      	b.n	8001a42 <HAL_GPIO_Init+0x1d6>
 8001a40:	2300      	movs	r3, #0
 8001a42:	697a      	ldr	r2, [r7, #20]
 8001a44:	f002 0203 	and.w	r2, r2, #3
 8001a48:	0092      	lsls	r2, r2, #2
 8001a4a:	4093      	lsls	r3, r2
 8001a4c:	693a      	ldr	r2, [r7, #16]
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a52:	4937      	ldr	r1, [pc, #220]	; (8001b30 <HAL_GPIO_Init+0x2c4>)
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	089b      	lsrs	r3, r3, #2
 8001a58:	3302      	adds	r3, #2
 8001a5a:	693a      	ldr	r2, [r7, #16]
 8001a5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a60:	4b36      	ldr	r3, [pc, #216]	; (8001b3c <HAL_GPIO_Init+0x2d0>)
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	43db      	mvns	r3, r3
 8001a6a:	693a      	ldr	r2, [r7, #16]
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d003      	beq.n	8001a84 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001a7c:	693a      	ldr	r2, [r7, #16]
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	4313      	orrs	r3, r2
 8001a82:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a84:	4a2d      	ldr	r2, [pc, #180]	; (8001b3c <HAL_GPIO_Init+0x2d0>)
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001a8a:	4b2c      	ldr	r3, [pc, #176]	; (8001b3c <HAL_GPIO_Init+0x2d0>)
 8001a8c:	68db      	ldr	r3, [r3, #12]
 8001a8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	43db      	mvns	r3, r3
 8001a94:	693a      	ldr	r2, [r7, #16]
 8001a96:	4013      	ands	r3, r2
 8001a98:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d003      	beq.n	8001aae <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001aa6:	693a      	ldr	r2, [r7, #16]
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001aae:	4a23      	ldr	r2, [pc, #140]	; (8001b3c <HAL_GPIO_Init+0x2d0>)
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001ab4:	4b21      	ldr	r3, [pc, #132]	; (8001b3c <HAL_GPIO_Init+0x2d0>)
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	43db      	mvns	r3, r3
 8001abe:	693a      	ldr	r2, [r7, #16]
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d003      	beq.n	8001ad8 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001ad0:	693a      	ldr	r2, [r7, #16]
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001ad8:	4a18      	ldr	r2, [pc, #96]	; (8001b3c <HAL_GPIO_Init+0x2d0>)
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001ade:	4b17      	ldr	r3, [pc, #92]	; (8001b3c <HAL_GPIO_Init+0x2d0>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	43db      	mvns	r3, r3
 8001ae8:	693a      	ldr	r2, [r7, #16]
 8001aea:	4013      	ands	r3, r2
 8001aec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d003      	beq.n	8001b02 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001afa:	693a      	ldr	r2, [r7, #16]
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	4313      	orrs	r3, r2
 8001b00:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001b02:	4a0e      	ldr	r2, [pc, #56]	; (8001b3c <HAL_GPIO_Init+0x2d0>)
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	3301      	adds	r3, #1
 8001b0c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	fa22 f303 	lsr.w	r3, r2, r3
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	f47f aeaf 	bne.w	800187c <HAL_GPIO_Init+0x10>
  }
}
 8001b1e:	bf00      	nop
 8001b20:	bf00      	nop
 8001b22:	371c      	adds	r7, #28
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr
 8001b2c:	40021000 	.word	0x40021000
 8001b30:	40010000 	.word	0x40010000
 8001b34:	48000400 	.word	0x48000400
 8001b38:	48000800 	.word	0x48000800
 8001b3c:	40010400 	.word	0x40010400

08001b40 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b085      	sub	sp, #20
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	460b      	mov	r3, r1
 8001b4a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	695b      	ldr	r3, [r3, #20]
 8001b50:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b52:	887a      	ldrh	r2, [r7, #2]
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	4013      	ands	r3, r2
 8001b58:	041a      	lsls	r2, r3, #16
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	43d9      	mvns	r1, r3
 8001b5e:	887b      	ldrh	r3, [r7, #2]
 8001b60:	400b      	ands	r3, r1
 8001b62:	431a      	orrs	r2, r3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	619a      	str	r2, [r3, #24]
}
 8001b68:	bf00      	nop
 8001b6a:	3714      	adds	r7, #20
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr

08001b74 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001b78:	4b04      	ldr	r3, [pc, #16]	; (8001b8c <HAL_PWREx_GetVoltageRange+0x18>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
 8001b8a:	bf00      	nop
 8001b8c:	40007000 	.word	0x40007000

08001b90 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b085      	sub	sp, #20
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b9e:	d130      	bne.n	8001c02 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ba0:	4b23      	ldr	r3, [pc, #140]	; (8001c30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001ba8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001bac:	d038      	beq.n	8001c20 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001bae:	4b20      	ldr	r3, [pc, #128]	; (8001c30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001bb6:	4a1e      	ldr	r2, [pc, #120]	; (8001c30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bb8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bbc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001bbe:	4b1d      	ldr	r3, [pc, #116]	; (8001c34 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	2232      	movs	r2, #50	; 0x32
 8001bc4:	fb02 f303 	mul.w	r3, r2, r3
 8001bc8:	4a1b      	ldr	r2, [pc, #108]	; (8001c38 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001bca:	fba2 2303 	umull	r2, r3, r2, r3
 8001bce:	0c9b      	lsrs	r3, r3, #18
 8001bd0:	3301      	adds	r3, #1
 8001bd2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001bd4:	e002      	b.n	8001bdc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	3b01      	subs	r3, #1
 8001bda:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001bdc:	4b14      	ldr	r3, [pc, #80]	; (8001c30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bde:	695b      	ldr	r3, [r3, #20]
 8001be0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001be4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001be8:	d102      	bne.n	8001bf0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d1f2      	bne.n	8001bd6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001bf0:	4b0f      	ldr	r3, [pc, #60]	; (8001c30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bf2:	695b      	ldr	r3, [r3, #20]
 8001bf4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bf8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bfc:	d110      	bne.n	8001c20 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	e00f      	b.n	8001c22 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001c02:	4b0b      	ldr	r3, [pc, #44]	; (8001c30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001c0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c0e:	d007      	beq.n	8001c20 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001c10:	4b07      	ldr	r3, [pc, #28]	; (8001c30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001c18:	4a05      	ldr	r2, [pc, #20]	; (8001c30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c1e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001c20:	2300      	movs	r3, #0
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3714      	adds	r7, #20
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	40007000 	.word	0x40007000
 8001c34:	20000000 	.word	0x20000000
 8001c38:	431bde83 	.word	0x431bde83

08001c3c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b088      	sub	sp, #32
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d102      	bne.n	8001c50 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	f000 bc02 	b.w	8002454 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c50:	4b96      	ldr	r3, [pc, #600]	; (8001eac <HAL_RCC_OscConfig+0x270>)
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	f003 030c 	and.w	r3, r3, #12
 8001c58:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c5a:	4b94      	ldr	r3, [pc, #592]	; (8001eac <HAL_RCC_OscConfig+0x270>)
 8001c5c:	68db      	ldr	r3, [r3, #12]
 8001c5e:	f003 0303 	and.w	r3, r3, #3
 8001c62:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 0310 	and.w	r3, r3, #16
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	f000 80e4 	beq.w	8001e3a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c72:	69bb      	ldr	r3, [r7, #24]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d007      	beq.n	8001c88 <HAL_RCC_OscConfig+0x4c>
 8001c78:	69bb      	ldr	r3, [r7, #24]
 8001c7a:	2b0c      	cmp	r3, #12
 8001c7c:	f040 808b 	bne.w	8001d96 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	f040 8087 	bne.w	8001d96 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c88:	4b88      	ldr	r3, [pc, #544]	; (8001eac <HAL_RCC_OscConfig+0x270>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f003 0302 	and.w	r3, r3, #2
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d005      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x64>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	699b      	ldr	r3, [r3, #24]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d101      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e3d9      	b.n	8002454 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6a1a      	ldr	r2, [r3, #32]
 8001ca4:	4b81      	ldr	r3, [pc, #516]	; (8001eac <HAL_RCC_OscConfig+0x270>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 0308 	and.w	r3, r3, #8
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d004      	beq.n	8001cba <HAL_RCC_OscConfig+0x7e>
 8001cb0:	4b7e      	ldr	r3, [pc, #504]	; (8001eac <HAL_RCC_OscConfig+0x270>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001cb8:	e005      	b.n	8001cc6 <HAL_RCC_OscConfig+0x8a>
 8001cba:	4b7c      	ldr	r3, [pc, #496]	; (8001eac <HAL_RCC_OscConfig+0x270>)
 8001cbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cc0:	091b      	lsrs	r3, r3, #4
 8001cc2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d223      	bcs.n	8001d12 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6a1b      	ldr	r3, [r3, #32]
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f000 fd8c 	bl	80027ec <RCC_SetFlashLatencyFromMSIRange>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d001      	beq.n	8001cde <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e3ba      	b.n	8002454 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001cde:	4b73      	ldr	r3, [pc, #460]	; (8001eac <HAL_RCC_OscConfig+0x270>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a72      	ldr	r2, [pc, #456]	; (8001eac <HAL_RCC_OscConfig+0x270>)
 8001ce4:	f043 0308 	orr.w	r3, r3, #8
 8001ce8:	6013      	str	r3, [r2, #0]
 8001cea:	4b70      	ldr	r3, [pc, #448]	; (8001eac <HAL_RCC_OscConfig+0x270>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6a1b      	ldr	r3, [r3, #32]
 8001cf6:	496d      	ldr	r1, [pc, #436]	; (8001eac <HAL_RCC_OscConfig+0x270>)
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001cfc:	4b6b      	ldr	r3, [pc, #428]	; (8001eac <HAL_RCC_OscConfig+0x270>)
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	69db      	ldr	r3, [r3, #28]
 8001d08:	021b      	lsls	r3, r3, #8
 8001d0a:	4968      	ldr	r1, [pc, #416]	; (8001eac <HAL_RCC_OscConfig+0x270>)
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	604b      	str	r3, [r1, #4]
 8001d10:	e025      	b.n	8001d5e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d12:	4b66      	ldr	r3, [pc, #408]	; (8001eac <HAL_RCC_OscConfig+0x270>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a65      	ldr	r2, [pc, #404]	; (8001eac <HAL_RCC_OscConfig+0x270>)
 8001d18:	f043 0308 	orr.w	r3, r3, #8
 8001d1c:	6013      	str	r3, [r2, #0]
 8001d1e:	4b63      	ldr	r3, [pc, #396]	; (8001eac <HAL_RCC_OscConfig+0x270>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6a1b      	ldr	r3, [r3, #32]
 8001d2a:	4960      	ldr	r1, [pc, #384]	; (8001eac <HAL_RCC_OscConfig+0x270>)
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d30:	4b5e      	ldr	r3, [pc, #376]	; (8001eac <HAL_RCC_OscConfig+0x270>)
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	69db      	ldr	r3, [r3, #28]
 8001d3c:	021b      	lsls	r3, r3, #8
 8001d3e:	495b      	ldr	r1, [pc, #364]	; (8001eac <HAL_RCC_OscConfig+0x270>)
 8001d40:	4313      	orrs	r3, r2
 8001d42:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d44:	69bb      	ldr	r3, [r7, #24]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d109      	bne.n	8001d5e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6a1b      	ldr	r3, [r3, #32]
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f000 fd4c 	bl	80027ec <RCC_SetFlashLatencyFromMSIRange>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d001      	beq.n	8001d5e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e37a      	b.n	8002454 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d5e:	f000 fc81 	bl	8002664 <HAL_RCC_GetSysClockFreq>
 8001d62:	4602      	mov	r2, r0
 8001d64:	4b51      	ldr	r3, [pc, #324]	; (8001eac <HAL_RCC_OscConfig+0x270>)
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	091b      	lsrs	r3, r3, #4
 8001d6a:	f003 030f 	and.w	r3, r3, #15
 8001d6e:	4950      	ldr	r1, [pc, #320]	; (8001eb0 <HAL_RCC_OscConfig+0x274>)
 8001d70:	5ccb      	ldrb	r3, [r1, r3]
 8001d72:	f003 031f 	and.w	r3, r3, #31
 8001d76:	fa22 f303 	lsr.w	r3, r2, r3
 8001d7a:	4a4e      	ldr	r2, [pc, #312]	; (8001eb4 <HAL_RCC_OscConfig+0x278>)
 8001d7c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001d7e:	4b4e      	ldr	r3, [pc, #312]	; (8001eb8 <HAL_RCC_OscConfig+0x27c>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4618      	mov	r0, r3
 8001d84:	f7ff fc0c 	bl	80015a0 <HAL_InitTick>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001d8c:	7bfb      	ldrb	r3, [r7, #15]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d052      	beq.n	8001e38 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001d92:	7bfb      	ldrb	r3, [r7, #15]
 8001d94:	e35e      	b.n	8002454 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	699b      	ldr	r3, [r3, #24]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d032      	beq.n	8001e04 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001d9e:	4b43      	ldr	r3, [pc, #268]	; (8001eac <HAL_RCC_OscConfig+0x270>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a42      	ldr	r2, [pc, #264]	; (8001eac <HAL_RCC_OscConfig+0x270>)
 8001da4:	f043 0301 	orr.w	r3, r3, #1
 8001da8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001daa:	f7ff fc49 	bl	8001640 <HAL_GetTick>
 8001dae:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001db0:	e008      	b.n	8001dc4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001db2:	f7ff fc45 	bl	8001640 <HAL_GetTick>
 8001db6:	4602      	mov	r2, r0
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	1ad3      	subs	r3, r2, r3
 8001dbc:	2b02      	cmp	r3, #2
 8001dbe:	d901      	bls.n	8001dc4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001dc0:	2303      	movs	r3, #3
 8001dc2:	e347      	b.n	8002454 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001dc4:	4b39      	ldr	r3, [pc, #228]	; (8001eac <HAL_RCC_OscConfig+0x270>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 0302 	and.w	r3, r3, #2
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d0f0      	beq.n	8001db2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001dd0:	4b36      	ldr	r3, [pc, #216]	; (8001eac <HAL_RCC_OscConfig+0x270>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a35      	ldr	r2, [pc, #212]	; (8001eac <HAL_RCC_OscConfig+0x270>)
 8001dd6:	f043 0308 	orr.w	r3, r3, #8
 8001dda:	6013      	str	r3, [r2, #0]
 8001ddc:	4b33      	ldr	r3, [pc, #204]	; (8001eac <HAL_RCC_OscConfig+0x270>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6a1b      	ldr	r3, [r3, #32]
 8001de8:	4930      	ldr	r1, [pc, #192]	; (8001eac <HAL_RCC_OscConfig+0x270>)
 8001dea:	4313      	orrs	r3, r2
 8001dec:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001dee:	4b2f      	ldr	r3, [pc, #188]	; (8001eac <HAL_RCC_OscConfig+0x270>)
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	69db      	ldr	r3, [r3, #28]
 8001dfa:	021b      	lsls	r3, r3, #8
 8001dfc:	492b      	ldr	r1, [pc, #172]	; (8001eac <HAL_RCC_OscConfig+0x270>)
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	604b      	str	r3, [r1, #4]
 8001e02:	e01a      	b.n	8001e3a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001e04:	4b29      	ldr	r3, [pc, #164]	; (8001eac <HAL_RCC_OscConfig+0x270>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a28      	ldr	r2, [pc, #160]	; (8001eac <HAL_RCC_OscConfig+0x270>)
 8001e0a:	f023 0301 	bic.w	r3, r3, #1
 8001e0e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001e10:	f7ff fc16 	bl	8001640 <HAL_GetTick>
 8001e14:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001e16:	e008      	b.n	8001e2a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e18:	f7ff fc12 	bl	8001640 <HAL_GetTick>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	2b02      	cmp	r3, #2
 8001e24:	d901      	bls.n	8001e2a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001e26:	2303      	movs	r3, #3
 8001e28:	e314      	b.n	8002454 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001e2a:	4b20      	ldr	r3, [pc, #128]	; (8001eac <HAL_RCC_OscConfig+0x270>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 0302 	and.w	r3, r3, #2
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d1f0      	bne.n	8001e18 <HAL_RCC_OscConfig+0x1dc>
 8001e36:	e000      	b.n	8001e3a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e38:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 0301 	and.w	r3, r3, #1
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d073      	beq.n	8001f2e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001e46:	69bb      	ldr	r3, [r7, #24]
 8001e48:	2b08      	cmp	r3, #8
 8001e4a:	d005      	beq.n	8001e58 <HAL_RCC_OscConfig+0x21c>
 8001e4c:	69bb      	ldr	r3, [r7, #24]
 8001e4e:	2b0c      	cmp	r3, #12
 8001e50:	d10e      	bne.n	8001e70 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	2b03      	cmp	r3, #3
 8001e56:	d10b      	bne.n	8001e70 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e58:	4b14      	ldr	r3, [pc, #80]	; (8001eac <HAL_RCC_OscConfig+0x270>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d063      	beq.n	8001f2c <HAL_RCC_OscConfig+0x2f0>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d15f      	bne.n	8001f2c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e2f1      	b.n	8002454 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e78:	d106      	bne.n	8001e88 <HAL_RCC_OscConfig+0x24c>
 8001e7a:	4b0c      	ldr	r3, [pc, #48]	; (8001eac <HAL_RCC_OscConfig+0x270>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a0b      	ldr	r2, [pc, #44]	; (8001eac <HAL_RCC_OscConfig+0x270>)
 8001e80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e84:	6013      	str	r3, [r2, #0]
 8001e86:	e025      	b.n	8001ed4 <HAL_RCC_OscConfig+0x298>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e90:	d114      	bne.n	8001ebc <HAL_RCC_OscConfig+0x280>
 8001e92:	4b06      	ldr	r3, [pc, #24]	; (8001eac <HAL_RCC_OscConfig+0x270>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a05      	ldr	r2, [pc, #20]	; (8001eac <HAL_RCC_OscConfig+0x270>)
 8001e98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e9c:	6013      	str	r3, [r2, #0]
 8001e9e:	4b03      	ldr	r3, [pc, #12]	; (8001eac <HAL_RCC_OscConfig+0x270>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a02      	ldr	r2, [pc, #8]	; (8001eac <HAL_RCC_OscConfig+0x270>)
 8001ea4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ea8:	6013      	str	r3, [r2, #0]
 8001eaa:	e013      	b.n	8001ed4 <HAL_RCC_OscConfig+0x298>
 8001eac:	40021000 	.word	0x40021000
 8001eb0:	080062ac 	.word	0x080062ac
 8001eb4:	20000000 	.word	0x20000000
 8001eb8:	20000004 	.word	0x20000004
 8001ebc:	4ba0      	ldr	r3, [pc, #640]	; (8002140 <HAL_RCC_OscConfig+0x504>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a9f      	ldr	r2, [pc, #636]	; (8002140 <HAL_RCC_OscConfig+0x504>)
 8001ec2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ec6:	6013      	str	r3, [r2, #0]
 8001ec8:	4b9d      	ldr	r3, [pc, #628]	; (8002140 <HAL_RCC_OscConfig+0x504>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a9c      	ldr	r2, [pc, #624]	; (8002140 <HAL_RCC_OscConfig+0x504>)
 8001ece:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ed2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d013      	beq.n	8001f04 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001edc:	f7ff fbb0 	bl	8001640 <HAL_GetTick>
 8001ee0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ee2:	e008      	b.n	8001ef6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ee4:	f7ff fbac 	bl	8001640 <HAL_GetTick>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	2b64      	cmp	r3, #100	; 0x64
 8001ef0:	d901      	bls.n	8001ef6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e2ae      	b.n	8002454 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ef6:	4b92      	ldr	r3, [pc, #584]	; (8002140 <HAL_RCC_OscConfig+0x504>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d0f0      	beq.n	8001ee4 <HAL_RCC_OscConfig+0x2a8>
 8001f02:	e014      	b.n	8001f2e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f04:	f7ff fb9c 	bl	8001640 <HAL_GetTick>
 8001f08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f0a:	e008      	b.n	8001f1e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f0c:	f7ff fb98 	bl	8001640 <HAL_GetTick>
 8001f10:	4602      	mov	r2, r0
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	2b64      	cmp	r3, #100	; 0x64
 8001f18:	d901      	bls.n	8001f1e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	e29a      	b.n	8002454 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f1e:	4b88      	ldr	r3, [pc, #544]	; (8002140 <HAL_RCC_OscConfig+0x504>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d1f0      	bne.n	8001f0c <HAL_RCC_OscConfig+0x2d0>
 8001f2a:	e000      	b.n	8001f2e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 0302 	and.w	r3, r3, #2
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d060      	beq.n	8001ffc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001f3a:	69bb      	ldr	r3, [r7, #24]
 8001f3c:	2b04      	cmp	r3, #4
 8001f3e:	d005      	beq.n	8001f4c <HAL_RCC_OscConfig+0x310>
 8001f40:	69bb      	ldr	r3, [r7, #24]
 8001f42:	2b0c      	cmp	r3, #12
 8001f44:	d119      	bne.n	8001f7a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	2b02      	cmp	r3, #2
 8001f4a:	d116      	bne.n	8001f7a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f4c:	4b7c      	ldr	r3, [pc, #496]	; (8002140 <HAL_RCC_OscConfig+0x504>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d005      	beq.n	8001f64 <HAL_RCC_OscConfig+0x328>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d101      	bne.n	8001f64 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e277      	b.n	8002454 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f64:	4b76      	ldr	r3, [pc, #472]	; (8002140 <HAL_RCC_OscConfig+0x504>)
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	691b      	ldr	r3, [r3, #16]
 8001f70:	061b      	lsls	r3, r3, #24
 8001f72:	4973      	ldr	r1, [pc, #460]	; (8002140 <HAL_RCC_OscConfig+0x504>)
 8001f74:	4313      	orrs	r3, r2
 8001f76:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f78:	e040      	b.n	8001ffc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	68db      	ldr	r3, [r3, #12]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d023      	beq.n	8001fca <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f82:	4b6f      	ldr	r3, [pc, #444]	; (8002140 <HAL_RCC_OscConfig+0x504>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a6e      	ldr	r2, [pc, #440]	; (8002140 <HAL_RCC_OscConfig+0x504>)
 8001f88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f8e:	f7ff fb57 	bl	8001640 <HAL_GetTick>
 8001f92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f94:	e008      	b.n	8001fa8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f96:	f7ff fb53 	bl	8001640 <HAL_GetTick>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	1ad3      	subs	r3, r2, r3
 8001fa0:	2b02      	cmp	r3, #2
 8001fa2:	d901      	bls.n	8001fa8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001fa4:	2303      	movs	r3, #3
 8001fa6:	e255      	b.n	8002454 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fa8:	4b65      	ldr	r3, [pc, #404]	; (8002140 <HAL_RCC_OscConfig+0x504>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d0f0      	beq.n	8001f96 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fb4:	4b62      	ldr	r3, [pc, #392]	; (8002140 <HAL_RCC_OscConfig+0x504>)
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	691b      	ldr	r3, [r3, #16]
 8001fc0:	061b      	lsls	r3, r3, #24
 8001fc2:	495f      	ldr	r1, [pc, #380]	; (8002140 <HAL_RCC_OscConfig+0x504>)
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	604b      	str	r3, [r1, #4]
 8001fc8:	e018      	b.n	8001ffc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fca:	4b5d      	ldr	r3, [pc, #372]	; (8002140 <HAL_RCC_OscConfig+0x504>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a5c      	ldr	r2, [pc, #368]	; (8002140 <HAL_RCC_OscConfig+0x504>)
 8001fd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001fd4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fd6:	f7ff fb33 	bl	8001640 <HAL_GetTick>
 8001fda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001fdc:	e008      	b.n	8001ff0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fde:	f7ff fb2f 	bl	8001640 <HAL_GetTick>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	1ad3      	subs	r3, r2, r3
 8001fe8:	2b02      	cmp	r3, #2
 8001fea:	d901      	bls.n	8001ff0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001fec:	2303      	movs	r3, #3
 8001fee:	e231      	b.n	8002454 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ff0:	4b53      	ldr	r3, [pc, #332]	; (8002140 <HAL_RCC_OscConfig+0x504>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d1f0      	bne.n	8001fde <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 0308 	and.w	r3, r3, #8
 8002004:	2b00      	cmp	r3, #0
 8002006:	d03c      	beq.n	8002082 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	695b      	ldr	r3, [r3, #20]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d01c      	beq.n	800204a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002010:	4b4b      	ldr	r3, [pc, #300]	; (8002140 <HAL_RCC_OscConfig+0x504>)
 8002012:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002016:	4a4a      	ldr	r2, [pc, #296]	; (8002140 <HAL_RCC_OscConfig+0x504>)
 8002018:	f043 0301 	orr.w	r3, r3, #1
 800201c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002020:	f7ff fb0e 	bl	8001640 <HAL_GetTick>
 8002024:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002026:	e008      	b.n	800203a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002028:	f7ff fb0a 	bl	8001640 <HAL_GetTick>
 800202c:	4602      	mov	r2, r0
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	2b02      	cmp	r3, #2
 8002034:	d901      	bls.n	800203a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002036:	2303      	movs	r3, #3
 8002038:	e20c      	b.n	8002454 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800203a:	4b41      	ldr	r3, [pc, #260]	; (8002140 <HAL_RCC_OscConfig+0x504>)
 800203c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002040:	f003 0302 	and.w	r3, r3, #2
 8002044:	2b00      	cmp	r3, #0
 8002046:	d0ef      	beq.n	8002028 <HAL_RCC_OscConfig+0x3ec>
 8002048:	e01b      	b.n	8002082 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800204a:	4b3d      	ldr	r3, [pc, #244]	; (8002140 <HAL_RCC_OscConfig+0x504>)
 800204c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002050:	4a3b      	ldr	r2, [pc, #236]	; (8002140 <HAL_RCC_OscConfig+0x504>)
 8002052:	f023 0301 	bic.w	r3, r3, #1
 8002056:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800205a:	f7ff faf1 	bl	8001640 <HAL_GetTick>
 800205e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002060:	e008      	b.n	8002074 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002062:	f7ff faed 	bl	8001640 <HAL_GetTick>
 8002066:	4602      	mov	r2, r0
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	2b02      	cmp	r3, #2
 800206e:	d901      	bls.n	8002074 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002070:	2303      	movs	r3, #3
 8002072:	e1ef      	b.n	8002454 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002074:	4b32      	ldr	r3, [pc, #200]	; (8002140 <HAL_RCC_OscConfig+0x504>)
 8002076:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800207a:	f003 0302 	and.w	r3, r3, #2
 800207e:	2b00      	cmp	r3, #0
 8002080:	d1ef      	bne.n	8002062 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 0304 	and.w	r3, r3, #4
 800208a:	2b00      	cmp	r3, #0
 800208c:	f000 80a6 	beq.w	80021dc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002090:	2300      	movs	r3, #0
 8002092:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002094:	4b2a      	ldr	r3, [pc, #168]	; (8002140 <HAL_RCC_OscConfig+0x504>)
 8002096:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002098:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800209c:	2b00      	cmp	r3, #0
 800209e:	d10d      	bne.n	80020bc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020a0:	4b27      	ldr	r3, [pc, #156]	; (8002140 <HAL_RCC_OscConfig+0x504>)
 80020a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020a4:	4a26      	ldr	r2, [pc, #152]	; (8002140 <HAL_RCC_OscConfig+0x504>)
 80020a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020aa:	6593      	str	r3, [r2, #88]	; 0x58
 80020ac:	4b24      	ldr	r3, [pc, #144]	; (8002140 <HAL_RCC_OscConfig+0x504>)
 80020ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020b4:	60bb      	str	r3, [r7, #8]
 80020b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020b8:	2301      	movs	r3, #1
 80020ba:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020bc:	4b21      	ldr	r3, [pc, #132]	; (8002144 <HAL_RCC_OscConfig+0x508>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d118      	bne.n	80020fa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020c8:	4b1e      	ldr	r3, [pc, #120]	; (8002144 <HAL_RCC_OscConfig+0x508>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a1d      	ldr	r2, [pc, #116]	; (8002144 <HAL_RCC_OscConfig+0x508>)
 80020ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020d2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020d4:	f7ff fab4 	bl	8001640 <HAL_GetTick>
 80020d8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020da:	e008      	b.n	80020ee <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020dc:	f7ff fab0 	bl	8001640 <HAL_GetTick>
 80020e0:	4602      	mov	r2, r0
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	d901      	bls.n	80020ee <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80020ea:	2303      	movs	r3, #3
 80020ec:	e1b2      	b.n	8002454 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020ee:	4b15      	ldr	r3, [pc, #84]	; (8002144 <HAL_RCC_OscConfig+0x508>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d0f0      	beq.n	80020dc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d108      	bne.n	8002114 <HAL_RCC_OscConfig+0x4d8>
 8002102:	4b0f      	ldr	r3, [pc, #60]	; (8002140 <HAL_RCC_OscConfig+0x504>)
 8002104:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002108:	4a0d      	ldr	r2, [pc, #52]	; (8002140 <HAL_RCC_OscConfig+0x504>)
 800210a:	f043 0301 	orr.w	r3, r3, #1
 800210e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002112:	e029      	b.n	8002168 <HAL_RCC_OscConfig+0x52c>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	2b05      	cmp	r3, #5
 800211a:	d115      	bne.n	8002148 <HAL_RCC_OscConfig+0x50c>
 800211c:	4b08      	ldr	r3, [pc, #32]	; (8002140 <HAL_RCC_OscConfig+0x504>)
 800211e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002122:	4a07      	ldr	r2, [pc, #28]	; (8002140 <HAL_RCC_OscConfig+0x504>)
 8002124:	f043 0304 	orr.w	r3, r3, #4
 8002128:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800212c:	4b04      	ldr	r3, [pc, #16]	; (8002140 <HAL_RCC_OscConfig+0x504>)
 800212e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002132:	4a03      	ldr	r2, [pc, #12]	; (8002140 <HAL_RCC_OscConfig+0x504>)
 8002134:	f043 0301 	orr.w	r3, r3, #1
 8002138:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800213c:	e014      	b.n	8002168 <HAL_RCC_OscConfig+0x52c>
 800213e:	bf00      	nop
 8002140:	40021000 	.word	0x40021000
 8002144:	40007000 	.word	0x40007000
 8002148:	4b9a      	ldr	r3, [pc, #616]	; (80023b4 <HAL_RCC_OscConfig+0x778>)
 800214a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800214e:	4a99      	ldr	r2, [pc, #612]	; (80023b4 <HAL_RCC_OscConfig+0x778>)
 8002150:	f023 0301 	bic.w	r3, r3, #1
 8002154:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002158:	4b96      	ldr	r3, [pc, #600]	; (80023b4 <HAL_RCC_OscConfig+0x778>)
 800215a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800215e:	4a95      	ldr	r2, [pc, #596]	; (80023b4 <HAL_RCC_OscConfig+0x778>)
 8002160:	f023 0304 	bic.w	r3, r3, #4
 8002164:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d016      	beq.n	800219e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002170:	f7ff fa66 	bl	8001640 <HAL_GetTick>
 8002174:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002176:	e00a      	b.n	800218e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002178:	f7ff fa62 	bl	8001640 <HAL_GetTick>
 800217c:	4602      	mov	r2, r0
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	f241 3288 	movw	r2, #5000	; 0x1388
 8002186:	4293      	cmp	r3, r2
 8002188:	d901      	bls.n	800218e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800218a:	2303      	movs	r3, #3
 800218c:	e162      	b.n	8002454 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800218e:	4b89      	ldr	r3, [pc, #548]	; (80023b4 <HAL_RCC_OscConfig+0x778>)
 8002190:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002194:	f003 0302 	and.w	r3, r3, #2
 8002198:	2b00      	cmp	r3, #0
 800219a:	d0ed      	beq.n	8002178 <HAL_RCC_OscConfig+0x53c>
 800219c:	e015      	b.n	80021ca <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800219e:	f7ff fa4f 	bl	8001640 <HAL_GetTick>
 80021a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80021a4:	e00a      	b.n	80021bc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021a6:	f7ff fa4b 	bl	8001640 <HAL_GetTick>
 80021aa:	4602      	mov	r2, r0
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	1ad3      	subs	r3, r2, r3
 80021b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d901      	bls.n	80021bc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80021b8:	2303      	movs	r3, #3
 80021ba:	e14b      	b.n	8002454 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80021bc:	4b7d      	ldr	r3, [pc, #500]	; (80023b4 <HAL_RCC_OscConfig+0x778>)
 80021be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021c2:	f003 0302 	and.w	r3, r3, #2
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d1ed      	bne.n	80021a6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021ca:	7ffb      	ldrb	r3, [r7, #31]
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d105      	bne.n	80021dc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021d0:	4b78      	ldr	r3, [pc, #480]	; (80023b4 <HAL_RCC_OscConfig+0x778>)
 80021d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021d4:	4a77      	ldr	r2, [pc, #476]	; (80023b4 <HAL_RCC_OscConfig+0x778>)
 80021d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021da:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 0320 	and.w	r3, r3, #32
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d03c      	beq.n	8002262 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d01c      	beq.n	800222a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80021f0:	4b70      	ldr	r3, [pc, #448]	; (80023b4 <HAL_RCC_OscConfig+0x778>)
 80021f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80021f6:	4a6f      	ldr	r2, [pc, #444]	; (80023b4 <HAL_RCC_OscConfig+0x778>)
 80021f8:	f043 0301 	orr.w	r3, r3, #1
 80021fc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002200:	f7ff fa1e 	bl	8001640 <HAL_GetTick>
 8002204:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002206:	e008      	b.n	800221a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002208:	f7ff fa1a 	bl	8001640 <HAL_GetTick>
 800220c:	4602      	mov	r2, r0
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	2b02      	cmp	r3, #2
 8002214:	d901      	bls.n	800221a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002216:	2303      	movs	r3, #3
 8002218:	e11c      	b.n	8002454 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800221a:	4b66      	ldr	r3, [pc, #408]	; (80023b4 <HAL_RCC_OscConfig+0x778>)
 800221c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002220:	f003 0302 	and.w	r3, r3, #2
 8002224:	2b00      	cmp	r3, #0
 8002226:	d0ef      	beq.n	8002208 <HAL_RCC_OscConfig+0x5cc>
 8002228:	e01b      	b.n	8002262 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800222a:	4b62      	ldr	r3, [pc, #392]	; (80023b4 <HAL_RCC_OscConfig+0x778>)
 800222c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002230:	4a60      	ldr	r2, [pc, #384]	; (80023b4 <HAL_RCC_OscConfig+0x778>)
 8002232:	f023 0301 	bic.w	r3, r3, #1
 8002236:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800223a:	f7ff fa01 	bl	8001640 <HAL_GetTick>
 800223e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002240:	e008      	b.n	8002254 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002242:	f7ff f9fd 	bl	8001640 <HAL_GetTick>
 8002246:	4602      	mov	r2, r0
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	2b02      	cmp	r3, #2
 800224e:	d901      	bls.n	8002254 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002250:	2303      	movs	r3, #3
 8002252:	e0ff      	b.n	8002454 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002254:	4b57      	ldr	r3, [pc, #348]	; (80023b4 <HAL_RCC_OscConfig+0x778>)
 8002256:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800225a:	f003 0302 	and.w	r3, r3, #2
 800225e:	2b00      	cmp	r3, #0
 8002260:	d1ef      	bne.n	8002242 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002266:	2b00      	cmp	r3, #0
 8002268:	f000 80f3 	beq.w	8002452 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002270:	2b02      	cmp	r3, #2
 8002272:	f040 80c9 	bne.w	8002408 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002276:	4b4f      	ldr	r3, [pc, #316]	; (80023b4 <HAL_RCC_OscConfig+0x778>)
 8002278:	68db      	ldr	r3, [r3, #12]
 800227a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	f003 0203 	and.w	r2, r3, #3
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002286:	429a      	cmp	r2, r3
 8002288:	d12c      	bne.n	80022e4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002294:	3b01      	subs	r3, #1
 8002296:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002298:	429a      	cmp	r2, r3
 800229a:	d123      	bne.n	80022e4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022a6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d11b      	bne.n	80022e4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022b6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d113      	bne.n	80022e4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022c6:	085b      	lsrs	r3, r3, #1
 80022c8:	3b01      	subs	r3, #1
 80022ca:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d109      	bne.n	80022e4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022da:	085b      	lsrs	r3, r3, #1
 80022dc:	3b01      	subs	r3, #1
 80022de:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d06b      	beq.n	80023bc <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80022e4:	69bb      	ldr	r3, [r7, #24]
 80022e6:	2b0c      	cmp	r3, #12
 80022e8:	d062      	beq.n	80023b0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80022ea:	4b32      	ldr	r3, [pc, #200]	; (80023b4 <HAL_RCC_OscConfig+0x778>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d001      	beq.n	80022fa <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e0ac      	b.n	8002454 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80022fa:	4b2e      	ldr	r3, [pc, #184]	; (80023b4 <HAL_RCC_OscConfig+0x778>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a2d      	ldr	r2, [pc, #180]	; (80023b4 <HAL_RCC_OscConfig+0x778>)
 8002300:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002304:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002306:	f7ff f99b 	bl	8001640 <HAL_GetTick>
 800230a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800230c:	e008      	b.n	8002320 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800230e:	f7ff f997 	bl	8001640 <HAL_GetTick>
 8002312:	4602      	mov	r2, r0
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	1ad3      	subs	r3, r2, r3
 8002318:	2b02      	cmp	r3, #2
 800231a:	d901      	bls.n	8002320 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800231c:	2303      	movs	r3, #3
 800231e:	e099      	b.n	8002454 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002320:	4b24      	ldr	r3, [pc, #144]	; (80023b4 <HAL_RCC_OscConfig+0x778>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002328:	2b00      	cmp	r3, #0
 800232a:	d1f0      	bne.n	800230e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800232c:	4b21      	ldr	r3, [pc, #132]	; (80023b4 <HAL_RCC_OscConfig+0x778>)
 800232e:	68da      	ldr	r2, [r3, #12]
 8002330:	4b21      	ldr	r3, [pc, #132]	; (80023b8 <HAL_RCC_OscConfig+0x77c>)
 8002332:	4013      	ands	r3, r2
 8002334:	687a      	ldr	r2, [r7, #4]
 8002336:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002338:	687a      	ldr	r2, [r7, #4]
 800233a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800233c:	3a01      	subs	r2, #1
 800233e:	0112      	lsls	r2, r2, #4
 8002340:	4311      	orrs	r1, r2
 8002342:	687a      	ldr	r2, [r7, #4]
 8002344:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002346:	0212      	lsls	r2, r2, #8
 8002348:	4311      	orrs	r1, r2
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800234e:	0852      	lsrs	r2, r2, #1
 8002350:	3a01      	subs	r2, #1
 8002352:	0552      	lsls	r2, r2, #21
 8002354:	4311      	orrs	r1, r2
 8002356:	687a      	ldr	r2, [r7, #4]
 8002358:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800235a:	0852      	lsrs	r2, r2, #1
 800235c:	3a01      	subs	r2, #1
 800235e:	0652      	lsls	r2, r2, #25
 8002360:	4311      	orrs	r1, r2
 8002362:	687a      	ldr	r2, [r7, #4]
 8002364:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002366:	06d2      	lsls	r2, r2, #27
 8002368:	430a      	orrs	r2, r1
 800236a:	4912      	ldr	r1, [pc, #72]	; (80023b4 <HAL_RCC_OscConfig+0x778>)
 800236c:	4313      	orrs	r3, r2
 800236e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002370:	4b10      	ldr	r3, [pc, #64]	; (80023b4 <HAL_RCC_OscConfig+0x778>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a0f      	ldr	r2, [pc, #60]	; (80023b4 <HAL_RCC_OscConfig+0x778>)
 8002376:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800237a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800237c:	4b0d      	ldr	r3, [pc, #52]	; (80023b4 <HAL_RCC_OscConfig+0x778>)
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	4a0c      	ldr	r2, [pc, #48]	; (80023b4 <HAL_RCC_OscConfig+0x778>)
 8002382:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002386:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002388:	f7ff f95a 	bl	8001640 <HAL_GetTick>
 800238c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800238e:	e008      	b.n	80023a2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002390:	f7ff f956 	bl	8001640 <HAL_GetTick>
 8002394:	4602      	mov	r2, r0
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	2b02      	cmp	r3, #2
 800239c:	d901      	bls.n	80023a2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800239e:	2303      	movs	r3, #3
 80023a0:	e058      	b.n	8002454 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023a2:	4b04      	ldr	r3, [pc, #16]	; (80023b4 <HAL_RCC_OscConfig+0x778>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d0f0      	beq.n	8002390 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80023ae:	e050      	b.n	8002452 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	e04f      	b.n	8002454 <HAL_RCC_OscConfig+0x818>
 80023b4:	40021000 	.word	0x40021000
 80023b8:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023bc:	4b27      	ldr	r3, [pc, #156]	; (800245c <HAL_RCC_OscConfig+0x820>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d144      	bne.n	8002452 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80023c8:	4b24      	ldr	r3, [pc, #144]	; (800245c <HAL_RCC_OscConfig+0x820>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a23      	ldr	r2, [pc, #140]	; (800245c <HAL_RCC_OscConfig+0x820>)
 80023ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023d2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80023d4:	4b21      	ldr	r3, [pc, #132]	; (800245c <HAL_RCC_OscConfig+0x820>)
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	4a20      	ldr	r2, [pc, #128]	; (800245c <HAL_RCC_OscConfig+0x820>)
 80023da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023de:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80023e0:	f7ff f92e 	bl	8001640 <HAL_GetTick>
 80023e4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023e6:	e008      	b.n	80023fa <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023e8:	f7ff f92a 	bl	8001640 <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	d901      	bls.n	80023fa <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80023f6:	2303      	movs	r3, #3
 80023f8:	e02c      	b.n	8002454 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023fa:	4b18      	ldr	r3, [pc, #96]	; (800245c <HAL_RCC_OscConfig+0x820>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d0f0      	beq.n	80023e8 <HAL_RCC_OscConfig+0x7ac>
 8002406:	e024      	b.n	8002452 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002408:	69bb      	ldr	r3, [r7, #24]
 800240a:	2b0c      	cmp	r3, #12
 800240c:	d01f      	beq.n	800244e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800240e:	4b13      	ldr	r3, [pc, #76]	; (800245c <HAL_RCC_OscConfig+0x820>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a12      	ldr	r2, [pc, #72]	; (800245c <HAL_RCC_OscConfig+0x820>)
 8002414:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002418:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800241a:	f7ff f911 	bl	8001640 <HAL_GetTick>
 800241e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002420:	e008      	b.n	8002434 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002422:	f7ff f90d 	bl	8001640 <HAL_GetTick>
 8002426:	4602      	mov	r2, r0
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	2b02      	cmp	r3, #2
 800242e:	d901      	bls.n	8002434 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002430:	2303      	movs	r3, #3
 8002432:	e00f      	b.n	8002454 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002434:	4b09      	ldr	r3, [pc, #36]	; (800245c <HAL_RCC_OscConfig+0x820>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800243c:	2b00      	cmp	r3, #0
 800243e:	d1f0      	bne.n	8002422 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002440:	4b06      	ldr	r3, [pc, #24]	; (800245c <HAL_RCC_OscConfig+0x820>)
 8002442:	68da      	ldr	r2, [r3, #12]
 8002444:	4905      	ldr	r1, [pc, #20]	; (800245c <HAL_RCC_OscConfig+0x820>)
 8002446:	4b06      	ldr	r3, [pc, #24]	; (8002460 <HAL_RCC_OscConfig+0x824>)
 8002448:	4013      	ands	r3, r2
 800244a:	60cb      	str	r3, [r1, #12]
 800244c:	e001      	b.n	8002452 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e000      	b.n	8002454 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8002452:	2300      	movs	r3, #0
}
 8002454:	4618      	mov	r0, r3
 8002456:	3720      	adds	r7, #32
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}
 800245c:	40021000 	.word	0x40021000
 8002460:	feeefffc 	.word	0xfeeefffc

08002464 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b084      	sub	sp, #16
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
 800246c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d101      	bne.n	8002478 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e0e7      	b.n	8002648 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002478:	4b75      	ldr	r3, [pc, #468]	; (8002650 <HAL_RCC_ClockConfig+0x1ec>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 0307 	and.w	r3, r3, #7
 8002480:	683a      	ldr	r2, [r7, #0]
 8002482:	429a      	cmp	r2, r3
 8002484:	d910      	bls.n	80024a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002486:	4b72      	ldr	r3, [pc, #456]	; (8002650 <HAL_RCC_ClockConfig+0x1ec>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f023 0207 	bic.w	r2, r3, #7
 800248e:	4970      	ldr	r1, [pc, #448]	; (8002650 <HAL_RCC_ClockConfig+0x1ec>)
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	4313      	orrs	r3, r2
 8002494:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002496:	4b6e      	ldr	r3, [pc, #440]	; (8002650 <HAL_RCC_ClockConfig+0x1ec>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 0307 	and.w	r3, r3, #7
 800249e:	683a      	ldr	r2, [r7, #0]
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d001      	beq.n	80024a8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	e0cf      	b.n	8002648 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0302 	and.w	r3, r3, #2
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d010      	beq.n	80024d6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	689a      	ldr	r2, [r3, #8]
 80024b8:	4b66      	ldr	r3, [pc, #408]	; (8002654 <HAL_RCC_ClockConfig+0x1f0>)
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d908      	bls.n	80024d6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024c4:	4b63      	ldr	r3, [pc, #396]	; (8002654 <HAL_RCC_ClockConfig+0x1f0>)
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	4960      	ldr	r1, [pc, #384]	; (8002654 <HAL_RCC_ClockConfig+0x1f0>)
 80024d2:	4313      	orrs	r3, r2
 80024d4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 0301 	and.w	r3, r3, #1
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d04c      	beq.n	800257c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	2b03      	cmp	r3, #3
 80024e8:	d107      	bne.n	80024fa <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024ea:	4b5a      	ldr	r3, [pc, #360]	; (8002654 <HAL_RCC_ClockConfig+0x1f0>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d121      	bne.n	800253a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e0a6      	b.n	8002648 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	2b02      	cmp	r3, #2
 8002500:	d107      	bne.n	8002512 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002502:	4b54      	ldr	r3, [pc, #336]	; (8002654 <HAL_RCC_ClockConfig+0x1f0>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d115      	bne.n	800253a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e09a      	b.n	8002648 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d107      	bne.n	800252a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800251a:	4b4e      	ldr	r3, [pc, #312]	; (8002654 <HAL_RCC_ClockConfig+0x1f0>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0302 	and.w	r3, r3, #2
 8002522:	2b00      	cmp	r3, #0
 8002524:	d109      	bne.n	800253a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e08e      	b.n	8002648 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800252a:	4b4a      	ldr	r3, [pc, #296]	; (8002654 <HAL_RCC_ClockConfig+0x1f0>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002532:	2b00      	cmp	r3, #0
 8002534:	d101      	bne.n	800253a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e086      	b.n	8002648 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800253a:	4b46      	ldr	r3, [pc, #280]	; (8002654 <HAL_RCC_ClockConfig+0x1f0>)
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	f023 0203 	bic.w	r2, r3, #3
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	4943      	ldr	r1, [pc, #268]	; (8002654 <HAL_RCC_ClockConfig+0x1f0>)
 8002548:	4313      	orrs	r3, r2
 800254a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800254c:	f7ff f878 	bl	8001640 <HAL_GetTick>
 8002550:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002552:	e00a      	b.n	800256a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002554:	f7ff f874 	bl	8001640 <HAL_GetTick>
 8002558:	4602      	mov	r2, r0
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002562:	4293      	cmp	r3, r2
 8002564:	d901      	bls.n	800256a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002566:	2303      	movs	r3, #3
 8002568:	e06e      	b.n	8002648 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800256a:	4b3a      	ldr	r3, [pc, #232]	; (8002654 <HAL_RCC_ClockConfig+0x1f0>)
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	f003 020c 	and.w	r2, r3, #12
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	429a      	cmp	r2, r3
 800257a:	d1eb      	bne.n	8002554 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 0302 	and.w	r3, r3, #2
 8002584:	2b00      	cmp	r3, #0
 8002586:	d010      	beq.n	80025aa <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	689a      	ldr	r2, [r3, #8]
 800258c:	4b31      	ldr	r3, [pc, #196]	; (8002654 <HAL_RCC_ClockConfig+0x1f0>)
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002594:	429a      	cmp	r2, r3
 8002596:	d208      	bcs.n	80025aa <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002598:	4b2e      	ldr	r3, [pc, #184]	; (8002654 <HAL_RCC_ClockConfig+0x1f0>)
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	492b      	ldr	r1, [pc, #172]	; (8002654 <HAL_RCC_ClockConfig+0x1f0>)
 80025a6:	4313      	orrs	r3, r2
 80025a8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025aa:	4b29      	ldr	r3, [pc, #164]	; (8002650 <HAL_RCC_ClockConfig+0x1ec>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 0307 	and.w	r3, r3, #7
 80025b2:	683a      	ldr	r2, [r7, #0]
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d210      	bcs.n	80025da <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025b8:	4b25      	ldr	r3, [pc, #148]	; (8002650 <HAL_RCC_ClockConfig+0x1ec>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f023 0207 	bic.w	r2, r3, #7
 80025c0:	4923      	ldr	r1, [pc, #140]	; (8002650 <HAL_RCC_ClockConfig+0x1ec>)
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	4313      	orrs	r3, r2
 80025c6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025c8:	4b21      	ldr	r3, [pc, #132]	; (8002650 <HAL_RCC_ClockConfig+0x1ec>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 0307 	and.w	r3, r3, #7
 80025d0:	683a      	ldr	r2, [r7, #0]
 80025d2:	429a      	cmp	r2, r3
 80025d4:	d001      	beq.n	80025da <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e036      	b.n	8002648 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0304 	and.w	r3, r3, #4
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d008      	beq.n	80025f8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025e6:	4b1b      	ldr	r3, [pc, #108]	; (8002654 <HAL_RCC_ClockConfig+0x1f0>)
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	68db      	ldr	r3, [r3, #12]
 80025f2:	4918      	ldr	r1, [pc, #96]	; (8002654 <HAL_RCC_ClockConfig+0x1f0>)
 80025f4:	4313      	orrs	r3, r2
 80025f6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 0308 	and.w	r3, r3, #8
 8002600:	2b00      	cmp	r3, #0
 8002602:	d009      	beq.n	8002618 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002604:	4b13      	ldr	r3, [pc, #76]	; (8002654 <HAL_RCC_ClockConfig+0x1f0>)
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	691b      	ldr	r3, [r3, #16]
 8002610:	00db      	lsls	r3, r3, #3
 8002612:	4910      	ldr	r1, [pc, #64]	; (8002654 <HAL_RCC_ClockConfig+0x1f0>)
 8002614:	4313      	orrs	r3, r2
 8002616:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002618:	f000 f824 	bl	8002664 <HAL_RCC_GetSysClockFreq>
 800261c:	4602      	mov	r2, r0
 800261e:	4b0d      	ldr	r3, [pc, #52]	; (8002654 <HAL_RCC_ClockConfig+0x1f0>)
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	091b      	lsrs	r3, r3, #4
 8002624:	f003 030f 	and.w	r3, r3, #15
 8002628:	490b      	ldr	r1, [pc, #44]	; (8002658 <HAL_RCC_ClockConfig+0x1f4>)
 800262a:	5ccb      	ldrb	r3, [r1, r3]
 800262c:	f003 031f 	and.w	r3, r3, #31
 8002630:	fa22 f303 	lsr.w	r3, r2, r3
 8002634:	4a09      	ldr	r2, [pc, #36]	; (800265c <HAL_RCC_ClockConfig+0x1f8>)
 8002636:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002638:	4b09      	ldr	r3, [pc, #36]	; (8002660 <HAL_RCC_ClockConfig+0x1fc>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4618      	mov	r0, r3
 800263e:	f7fe ffaf 	bl	80015a0 <HAL_InitTick>
 8002642:	4603      	mov	r3, r0
 8002644:	72fb      	strb	r3, [r7, #11]

  return status;
 8002646:	7afb      	ldrb	r3, [r7, #11]
}
 8002648:	4618      	mov	r0, r3
 800264a:	3710      	adds	r7, #16
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}
 8002650:	40022000 	.word	0x40022000
 8002654:	40021000 	.word	0x40021000
 8002658:	080062ac 	.word	0x080062ac
 800265c:	20000000 	.word	0x20000000
 8002660:	20000004 	.word	0x20000004

08002664 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002664:	b480      	push	{r7}
 8002666:	b089      	sub	sp, #36	; 0x24
 8002668:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800266a:	2300      	movs	r3, #0
 800266c:	61fb      	str	r3, [r7, #28]
 800266e:	2300      	movs	r3, #0
 8002670:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002672:	4b3e      	ldr	r3, [pc, #248]	; (800276c <HAL_RCC_GetSysClockFreq+0x108>)
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	f003 030c 	and.w	r3, r3, #12
 800267a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800267c:	4b3b      	ldr	r3, [pc, #236]	; (800276c <HAL_RCC_GetSysClockFreq+0x108>)
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	f003 0303 	and.w	r3, r3, #3
 8002684:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d005      	beq.n	8002698 <HAL_RCC_GetSysClockFreq+0x34>
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	2b0c      	cmp	r3, #12
 8002690:	d121      	bne.n	80026d6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2b01      	cmp	r3, #1
 8002696:	d11e      	bne.n	80026d6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002698:	4b34      	ldr	r3, [pc, #208]	; (800276c <HAL_RCC_GetSysClockFreq+0x108>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 0308 	and.w	r3, r3, #8
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d107      	bne.n	80026b4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80026a4:	4b31      	ldr	r3, [pc, #196]	; (800276c <HAL_RCC_GetSysClockFreq+0x108>)
 80026a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026aa:	0a1b      	lsrs	r3, r3, #8
 80026ac:	f003 030f 	and.w	r3, r3, #15
 80026b0:	61fb      	str	r3, [r7, #28]
 80026b2:	e005      	b.n	80026c0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80026b4:	4b2d      	ldr	r3, [pc, #180]	; (800276c <HAL_RCC_GetSysClockFreq+0x108>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	091b      	lsrs	r3, r3, #4
 80026ba:	f003 030f 	and.w	r3, r3, #15
 80026be:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80026c0:	4a2b      	ldr	r2, [pc, #172]	; (8002770 <HAL_RCC_GetSysClockFreq+0x10c>)
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026c8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d10d      	bne.n	80026ec <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80026d0:	69fb      	ldr	r3, [r7, #28]
 80026d2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80026d4:	e00a      	b.n	80026ec <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	2b04      	cmp	r3, #4
 80026da:	d102      	bne.n	80026e2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80026dc:	4b25      	ldr	r3, [pc, #148]	; (8002774 <HAL_RCC_GetSysClockFreq+0x110>)
 80026de:	61bb      	str	r3, [r7, #24]
 80026e0:	e004      	b.n	80026ec <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	2b08      	cmp	r3, #8
 80026e6:	d101      	bne.n	80026ec <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80026e8:	4b23      	ldr	r3, [pc, #140]	; (8002778 <HAL_RCC_GetSysClockFreq+0x114>)
 80026ea:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	2b0c      	cmp	r3, #12
 80026f0:	d134      	bne.n	800275c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80026f2:	4b1e      	ldr	r3, [pc, #120]	; (800276c <HAL_RCC_GetSysClockFreq+0x108>)
 80026f4:	68db      	ldr	r3, [r3, #12]
 80026f6:	f003 0303 	and.w	r3, r3, #3
 80026fa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	2b02      	cmp	r3, #2
 8002700:	d003      	beq.n	800270a <HAL_RCC_GetSysClockFreq+0xa6>
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	2b03      	cmp	r3, #3
 8002706:	d003      	beq.n	8002710 <HAL_RCC_GetSysClockFreq+0xac>
 8002708:	e005      	b.n	8002716 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800270a:	4b1a      	ldr	r3, [pc, #104]	; (8002774 <HAL_RCC_GetSysClockFreq+0x110>)
 800270c:	617b      	str	r3, [r7, #20]
      break;
 800270e:	e005      	b.n	800271c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002710:	4b19      	ldr	r3, [pc, #100]	; (8002778 <HAL_RCC_GetSysClockFreq+0x114>)
 8002712:	617b      	str	r3, [r7, #20]
      break;
 8002714:	e002      	b.n	800271c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	617b      	str	r3, [r7, #20]
      break;
 800271a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800271c:	4b13      	ldr	r3, [pc, #76]	; (800276c <HAL_RCC_GetSysClockFreq+0x108>)
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	091b      	lsrs	r3, r3, #4
 8002722:	f003 0307 	and.w	r3, r3, #7
 8002726:	3301      	adds	r3, #1
 8002728:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800272a:	4b10      	ldr	r3, [pc, #64]	; (800276c <HAL_RCC_GetSysClockFreq+0x108>)
 800272c:	68db      	ldr	r3, [r3, #12]
 800272e:	0a1b      	lsrs	r3, r3, #8
 8002730:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002734:	697a      	ldr	r2, [r7, #20]
 8002736:	fb03 f202 	mul.w	r2, r3, r2
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002740:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002742:	4b0a      	ldr	r3, [pc, #40]	; (800276c <HAL_RCC_GetSysClockFreq+0x108>)
 8002744:	68db      	ldr	r3, [r3, #12]
 8002746:	0e5b      	lsrs	r3, r3, #25
 8002748:	f003 0303 	and.w	r3, r3, #3
 800274c:	3301      	adds	r3, #1
 800274e:	005b      	lsls	r3, r3, #1
 8002750:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002752:	697a      	ldr	r2, [r7, #20]
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	fbb2 f3f3 	udiv	r3, r2, r3
 800275a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800275c:	69bb      	ldr	r3, [r7, #24]
}
 800275e:	4618      	mov	r0, r3
 8002760:	3724      	adds	r7, #36	; 0x24
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr
 800276a:	bf00      	nop
 800276c:	40021000 	.word	0x40021000
 8002770:	080062c4 	.word	0x080062c4
 8002774:	00f42400 	.word	0x00f42400
 8002778:	007a1200 	.word	0x007a1200

0800277c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800277c:	b480      	push	{r7}
 800277e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002780:	4b03      	ldr	r3, [pc, #12]	; (8002790 <HAL_RCC_GetHCLKFreq+0x14>)
 8002782:	681b      	ldr	r3, [r3, #0]
}
 8002784:	4618      	mov	r0, r3
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr
 800278e:	bf00      	nop
 8002790:	20000000 	.word	0x20000000

08002794 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002798:	f7ff fff0 	bl	800277c <HAL_RCC_GetHCLKFreq>
 800279c:	4602      	mov	r2, r0
 800279e:	4b06      	ldr	r3, [pc, #24]	; (80027b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	0a1b      	lsrs	r3, r3, #8
 80027a4:	f003 0307 	and.w	r3, r3, #7
 80027a8:	4904      	ldr	r1, [pc, #16]	; (80027bc <HAL_RCC_GetPCLK1Freq+0x28>)
 80027aa:	5ccb      	ldrb	r3, [r1, r3]
 80027ac:	f003 031f 	and.w	r3, r3, #31
 80027b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	40021000 	.word	0x40021000
 80027bc:	080062bc 	.word	0x080062bc

080027c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80027c4:	f7ff ffda 	bl	800277c <HAL_RCC_GetHCLKFreq>
 80027c8:	4602      	mov	r2, r0
 80027ca:	4b06      	ldr	r3, [pc, #24]	; (80027e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	0adb      	lsrs	r3, r3, #11
 80027d0:	f003 0307 	and.w	r3, r3, #7
 80027d4:	4904      	ldr	r1, [pc, #16]	; (80027e8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80027d6:	5ccb      	ldrb	r3, [r1, r3]
 80027d8:	f003 031f 	and.w	r3, r3, #31
 80027dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	40021000 	.word	0x40021000
 80027e8:	080062bc 	.word	0x080062bc

080027ec <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b086      	sub	sp, #24
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80027f4:	2300      	movs	r3, #0
 80027f6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80027f8:	4b2a      	ldr	r3, [pc, #168]	; (80028a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002800:	2b00      	cmp	r3, #0
 8002802:	d003      	beq.n	800280c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002804:	f7ff f9b6 	bl	8001b74 <HAL_PWREx_GetVoltageRange>
 8002808:	6178      	str	r0, [r7, #20]
 800280a:	e014      	b.n	8002836 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800280c:	4b25      	ldr	r3, [pc, #148]	; (80028a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800280e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002810:	4a24      	ldr	r2, [pc, #144]	; (80028a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002812:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002816:	6593      	str	r3, [r2, #88]	; 0x58
 8002818:	4b22      	ldr	r3, [pc, #136]	; (80028a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800281a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800281c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002820:	60fb      	str	r3, [r7, #12]
 8002822:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002824:	f7ff f9a6 	bl	8001b74 <HAL_PWREx_GetVoltageRange>
 8002828:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800282a:	4b1e      	ldr	r3, [pc, #120]	; (80028a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800282c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800282e:	4a1d      	ldr	r2, [pc, #116]	; (80028a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002830:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002834:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800283c:	d10b      	bne.n	8002856 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2b80      	cmp	r3, #128	; 0x80
 8002842:	d919      	bls.n	8002878 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2ba0      	cmp	r3, #160	; 0xa0
 8002848:	d902      	bls.n	8002850 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800284a:	2302      	movs	r3, #2
 800284c:	613b      	str	r3, [r7, #16]
 800284e:	e013      	b.n	8002878 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002850:	2301      	movs	r3, #1
 8002852:	613b      	str	r3, [r7, #16]
 8002854:	e010      	b.n	8002878 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2b80      	cmp	r3, #128	; 0x80
 800285a:	d902      	bls.n	8002862 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800285c:	2303      	movs	r3, #3
 800285e:	613b      	str	r3, [r7, #16]
 8002860:	e00a      	b.n	8002878 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2b80      	cmp	r3, #128	; 0x80
 8002866:	d102      	bne.n	800286e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002868:	2302      	movs	r3, #2
 800286a:	613b      	str	r3, [r7, #16]
 800286c:	e004      	b.n	8002878 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2b70      	cmp	r3, #112	; 0x70
 8002872:	d101      	bne.n	8002878 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002874:	2301      	movs	r3, #1
 8002876:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002878:	4b0b      	ldr	r3, [pc, #44]	; (80028a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f023 0207 	bic.w	r2, r3, #7
 8002880:	4909      	ldr	r1, [pc, #36]	; (80028a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	4313      	orrs	r3, r2
 8002886:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002888:	4b07      	ldr	r3, [pc, #28]	; (80028a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 0307 	and.w	r3, r3, #7
 8002890:	693a      	ldr	r2, [r7, #16]
 8002892:	429a      	cmp	r2, r3
 8002894:	d001      	beq.n	800289a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e000      	b.n	800289c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800289a:	2300      	movs	r3, #0
}
 800289c:	4618      	mov	r0, r3
 800289e:	3718      	adds	r7, #24
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}
 80028a4:	40021000 	.word	0x40021000
 80028a8:	40022000 	.word	0x40022000

080028ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b086      	sub	sp, #24
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80028b4:	2300      	movs	r3, #0
 80028b6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80028b8:	2300      	movs	r3, #0
 80028ba:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d031      	beq.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028cc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80028d0:	d01a      	beq.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80028d2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80028d6:	d814      	bhi.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d009      	beq.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80028dc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80028e0:	d10f      	bne.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80028e2:	4b5d      	ldr	r3, [pc, #372]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80028e4:	68db      	ldr	r3, [r3, #12]
 80028e6:	4a5c      	ldr	r2, [pc, #368]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80028e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028ec:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80028ee:	e00c      	b.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	3304      	adds	r3, #4
 80028f4:	2100      	movs	r1, #0
 80028f6:	4618      	mov	r0, r3
 80028f8:	f000 f9ce 	bl	8002c98 <RCCEx_PLLSAI1_Config>
 80028fc:	4603      	mov	r3, r0
 80028fe:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002900:	e003      	b.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	74fb      	strb	r3, [r7, #19]
      break;
 8002906:	e000      	b.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002908:	bf00      	nop
    }

    if(ret == HAL_OK)
 800290a:	7cfb      	ldrb	r3, [r7, #19]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d10b      	bne.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002910:	4b51      	ldr	r3, [pc, #324]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002912:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002916:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800291e:	494e      	ldr	r1, [pc, #312]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002920:	4313      	orrs	r3, r2
 8002922:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002926:	e001      	b.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002928:	7cfb      	ldrb	r3, [r7, #19]
 800292a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002934:	2b00      	cmp	r3, #0
 8002936:	f000 809e 	beq.w	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800293a:	2300      	movs	r3, #0
 800293c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800293e:	4b46      	ldr	r3, [pc, #280]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002942:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002946:	2b00      	cmp	r3, #0
 8002948:	d101      	bne.n	800294e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800294a:	2301      	movs	r3, #1
 800294c:	e000      	b.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800294e:	2300      	movs	r3, #0
 8002950:	2b00      	cmp	r3, #0
 8002952:	d00d      	beq.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002954:	4b40      	ldr	r3, [pc, #256]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002956:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002958:	4a3f      	ldr	r2, [pc, #252]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800295a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800295e:	6593      	str	r3, [r2, #88]	; 0x58
 8002960:	4b3d      	ldr	r3, [pc, #244]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002962:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002964:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002968:	60bb      	str	r3, [r7, #8]
 800296a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800296c:	2301      	movs	r3, #1
 800296e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002970:	4b3a      	ldr	r3, [pc, #232]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a39      	ldr	r2, [pc, #228]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002976:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800297a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800297c:	f7fe fe60 	bl	8001640 <HAL_GetTick>
 8002980:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002982:	e009      	b.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002984:	f7fe fe5c 	bl	8001640 <HAL_GetTick>
 8002988:	4602      	mov	r2, r0
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	2b02      	cmp	r3, #2
 8002990:	d902      	bls.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002992:	2303      	movs	r3, #3
 8002994:	74fb      	strb	r3, [r7, #19]
        break;
 8002996:	e005      	b.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002998:	4b30      	ldr	r3, [pc, #192]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d0ef      	beq.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80029a4:	7cfb      	ldrb	r3, [r7, #19]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d15a      	bne.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80029aa:	4b2b      	ldr	r3, [pc, #172]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80029ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029b4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d01e      	beq.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029c0:	697a      	ldr	r2, [r7, #20]
 80029c2:	429a      	cmp	r2, r3
 80029c4:	d019      	beq.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80029c6:	4b24      	ldr	r3, [pc, #144]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80029c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029d0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80029d2:	4b21      	ldr	r3, [pc, #132]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80029d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029d8:	4a1f      	ldr	r2, [pc, #124]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80029da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80029e2:	4b1d      	ldr	r3, [pc, #116]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80029e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029e8:	4a1b      	ldr	r2, [pc, #108]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80029ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80029f2:	4a19      	ldr	r2, [pc, #100]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	f003 0301 	and.w	r3, r3, #1
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d016      	beq.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a04:	f7fe fe1c 	bl	8001640 <HAL_GetTick>
 8002a08:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a0a:	e00b      	b.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a0c:	f7fe fe18 	bl	8001640 <HAL_GetTick>
 8002a10:	4602      	mov	r2, r0
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d902      	bls.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	74fb      	strb	r3, [r7, #19]
            break;
 8002a22:	e006      	b.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a24:	4b0c      	ldr	r3, [pc, #48]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a2a:	f003 0302 	and.w	r3, r3, #2
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d0ec      	beq.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002a32:	7cfb      	ldrb	r3, [r7, #19]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d10b      	bne.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a38:	4b07      	ldr	r3, [pc, #28]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a3e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a46:	4904      	ldr	r1, [pc, #16]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002a4e:	e009      	b.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002a50:	7cfb      	ldrb	r3, [r7, #19]
 8002a52:	74bb      	strb	r3, [r7, #18]
 8002a54:	e006      	b.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002a56:	bf00      	nop
 8002a58:	40021000 	.word	0x40021000
 8002a5c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a60:	7cfb      	ldrb	r3, [r7, #19]
 8002a62:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a64:	7c7b      	ldrb	r3, [r7, #17]
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d105      	bne.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a6a:	4b8a      	ldr	r3, [pc, #552]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a6e:	4a89      	ldr	r2, [pc, #548]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a74:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 0301 	and.w	r3, r3, #1
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d00a      	beq.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a82:	4b84      	ldr	r3, [pc, #528]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a88:	f023 0203 	bic.w	r2, r3, #3
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6a1b      	ldr	r3, [r3, #32]
 8002a90:	4980      	ldr	r1, [pc, #512]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a92:	4313      	orrs	r3, r2
 8002a94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 0302 	and.w	r3, r3, #2
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d00a      	beq.n	8002aba <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002aa4:	4b7b      	ldr	r3, [pc, #492]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aaa:	f023 020c 	bic.w	r2, r3, #12
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab2:	4978      	ldr	r1, [pc, #480]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 0320 	and.w	r3, r3, #32
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d00a      	beq.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002ac6:	4b73      	ldr	r3, [pc, #460]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ac8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002acc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ad4:	496f      	ldr	r1, [pc, #444]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d00a      	beq.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002ae8:	4b6a      	ldr	r3, [pc, #424]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aee:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002af6:	4967      	ldr	r1, [pc, #412]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002af8:	4313      	orrs	r3, r2
 8002afa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d00a      	beq.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002b0a:	4b62      	ldr	r3, [pc, #392]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b10:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b18:	495e      	ldr	r1, [pc, #376]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d00a      	beq.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b2c:	4b59      	ldr	r3, [pc, #356]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b32:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b3a:	4956      	ldr	r1, [pc, #344]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d00a      	beq.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002b4e:	4b51      	ldr	r3, [pc, #324]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b54:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b5c:	494d      	ldr	r1, [pc, #308]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d028      	beq.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b70:	4b48      	ldr	r3, [pc, #288]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b76:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7e:	4945      	ldr	r1, [pc, #276]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b80:	4313      	orrs	r3, r2
 8002b82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b8e:	d106      	bne.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b90:	4b40      	ldr	r3, [pc, #256]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	4a3f      	ldr	r2, [pc, #252]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b9a:	60d3      	str	r3, [r2, #12]
 8002b9c:	e011      	b.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ba6:	d10c      	bne.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	3304      	adds	r3, #4
 8002bac:	2101      	movs	r1, #1
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f000 f872 	bl	8002c98 <RCCEx_PLLSAI1_Config>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002bb8:	7cfb      	ldrb	r3, [r7, #19]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d001      	beq.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8002bbe:	7cfb      	ldrb	r3, [r7, #19]
 8002bc0:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d028      	beq.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002bce:	4b31      	ldr	r3, [pc, #196]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002bd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bd4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bdc:	492d      	ldr	r1, [pc, #180]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002bde:	4313      	orrs	r3, r2
 8002be0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002be8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002bec:	d106      	bne.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002bee:	4b29      	ldr	r3, [pc, #164]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002bf0:	68db      	ldr	r3, [r3, #12]
 8002bf2:	4a28      	ldr	r2, [pc, #160]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002bf4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002bf8:	60d3      	str	r3, [r2, #12]
 8002bfa:	e011      	b.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c00:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c04:	d10c      	bne.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	3304      	adds	r3, #4
 8002c0a:	2101      	movs	r1, #1
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f000 f843 	bl	8002c98 <RCCEx_PLLSAI1_Config>
 8002c12:	4603      	mov	r3, r0
 8002c14:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c16:	7cfb      	ldrb	r3, [r7, #19]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d001      	beq.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8002c1c:	7cfb      	ldrb	r3, [r7, #19]
 8002c1e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d01c      	beq.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002c2c:	4b19      	ldr	r3, [pc, #100]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c32:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c3a:	4916      	ldr	r1, [pc, #88]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c46:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002c4a:	d10c      	bne.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	3304      	adds	r3, #4
 8002c50:	2102      	movs	r1, #2
 8002c52:	4618      	mov	r0, r3
 8002c54:	f000 f820 	bl	8002c98 <RCCEx_PLLSAI1_Config>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c5c:	7cfb      	ldrb	r3, [r7, #19]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d001      	beq.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8002c62:	7cfb      	ldrb	r3, [r7, #19]
 8002c64:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d00a      	beq.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002c72:	4b08      	ldr	r3, [pc, #32]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c78:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c80:	4904      	ldr	r1, [pc, #16]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c82:	4313      	orrs	r3, r2
 8002c84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002c88:	7cbb      	ldrb	r3, [r7, #18]
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3718      	adds	r7, #24
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop
 8002c94:	40021000 	.word	0x40021000

08002c98 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b084      	sub	sp, #16
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
 8002ca0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002ca6:	4b74      	ldr	r3, [pc, #464]	; (8002e78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ca8:	68db      	ldr	r3, [r3, #12]
 8002caa:	f003 0303 	and.w	r3, r3, #3
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d018      	beq.n	8002ce4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002cb2:	4b71      	ldr	r3, [pc, #452]	; (8002e78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002cb4:	68db      	ldr	r3, [r3, #12]
 8002cb6:	f003 0203 	and.w	r2, r3, #3
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	429a      	cmp	r2, r3
 8002cc0:	d10d      	bne.n	8002cde <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
       ||
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d009      	beq.n	8002cde <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002cca:	4b6b      	ldr	r3, [pc, #428]	; (8002e78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ccc:	68db      	ldr	r3, [r3, #12]
 8002cce:	091b      	lsrs	r3, r3, #4
 8002cd0:	f003 0307 	and.w	r3, r3, #7
 8002cd4:	1c5a      	adds	r2, r3, #1
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	685b      	ldr	r3, [r3, #4]
       ||
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	d047      	beq.n	8002d6e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	73fb      	strb	r3, [r7, #15]
 8002ce2:	e044      	b.n	8002d6e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	2b03      	cmp	r3, #3
 8002cea:	d018      	beq.n	8002d1e <RCCEx_PLLSAI1_Config+0x86>
 8002cec:	2b03      	cmp	r3, #3
 8002cee:	d825      	bhi.n	8002d3c <RCCEx_PLLSAI1_Config+0xa4>
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d002      	beq.n	8002cfa <RCCEx_PLLSAI1_Config+0x62>
 8002cf4:	2b02      	cmp	r3, #2
 8002cf6:	d009      	beq.n	8002d0c <RCCEx_PLLSAI1_Config+0x74>
 8002cf8:	e020      	b.n	8002d3c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002cfa:	4b5f      	ldr	r3, [pc, #380]	; (8002e78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 0302 	and.w	r3, r3, #2
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d11d      	bne.n	8002d42 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d0a:	e01a      	b.n	8002d42 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002d0c:	4b5a      	ldr	r3, [pc, #360]	; (8002e78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d116      	bne.n	8002d46 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d1c:	e013      	b.n	8002d46 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002d1e:	4b56      	ldr	r3, [pc, #344]	; (8002e78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d10f      	bne.n	8002d4a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002d2a:	4b53      	ldr	r3, [pc, #332]	; (8002e78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d109      	bne.n	8002d4a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002d3a:	e006      	b.n	8002d4a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	73fb      	strb	r3, [r7, #15]
      break;
 8002d40:	e004      	b.n	8002d4c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002d42:	bf00      	nop
 8002d44:	e002      	b.n	8002d4c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002d46:	bf00      	nop
 8002d48:	e000      	b.n	8002d4c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002d4a:	bf00      	nop
    }

    if(status == HAL_OK)
 8002d4c:	7bfb      	ldrb	r3, [r7, #15]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d10d      	bne.n	8002d6e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002d52:	4b49      	ldr	r3, [pc, #292]	; (8002e78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d54:	68db      	ldr	r3, [r3, #12]
 8002d56:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6819      	ldr	r1, [r3, #0]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	3b01      	subs	r3, #1
 8002d64:	011b      	lsls	r3, r3, #4
 8002d66:	430b      	orrs	r3, r1
 8002d68:	4943      	ldr	r1, [pc, #268]	; (8002e78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002d6e:	7bfb      	ldrb	r3, [r7, #15]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d17c      	bne.n	8002e6e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002d74:	4b40      	ldr	r3, [pc, #256]	; (8002e78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a3f      	ldr	r2, [pc, #252]	; (8002e78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d7a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002d7e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d80:	f7fe fc5e 	bl	8001640 <HAL_GetTick>
 8002d84:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002d86:	e009      	b.n	8002d9c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002d88:	f7fe fc5a 	bl	8001640 <HAL_GetTick>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	2b02      	cmp	r3, #2
 8002d94:	d902      	bls.n	8002d9c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	73fb      	strb	r3, [r7, #15]
        break;
 8002d9a:	e005      	b.n	8002da8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002d9c:	4b36      	ldr	r3, [pc, #216]	; (8002e78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d1ef      	bne.n	8002d88 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002da8:	7bfb      	ldrb	r3, [r7, #15]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d15f      	bne.n	8002e6e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d110      	bne.n	8002dd6 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002db4:	4b30      	ldr	r3, [pc, #192]	; (8002e78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002db6:	691b      	ldr	r3, [r3, #16]
 8002db8:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002dbc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002dc0:	687a      	ldr	r2, [r7, #4]
 8002dc2:	6892      	ldr	r2, [r2, #8]
 8002dc4:	0211      	lsls	r1, r2, #8
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	68d2      	ldr	r2, [r2, #12]
 8002dca:	06d2      	lsls	r2, r2, #27
 8002dcc:	430a      	orrs	r2, r1
 8002dce:	492a      	ldr	r1, [pc, #168]	; (8002e78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	610b      	str	r3, [r1, #16]
 8002dd4:	e027      	b.n	8002e26 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d112      	bne.n	8002e02 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ddc:	4b26      	ldr	r3, [pc, #152]	; (8002e78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002dde:	691b      	ldr	r3, [r3, #16]
 8002de0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002de4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002de8:	687a      	ldr	r2, [r7, #4]
 8002dea:	6892      	ldr	r2, [r2, #8]
 8002dec:	0211      	lsls	r1, r2, #8
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	6912      	ldr	r2, [r2, #16]
 8002df2:	0852      	lsrs	r2, r2, #1
 8002df4:	3a01      	subs	r2, #1
 8002df6:	0552      	lsls	r2, r2, #21
 8002df8:	430a      	orrs	r2, r1
 8002dfa:	491f      	ldr	r1, [pc, #124]	; (8002e78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	610b      	str	r3, [r1, #16]
 8002e00:	e011      	b.n	8002e26 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e02:	4b1d      	ldr	r3, [pc, #116]	; (8002e78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e04:	691b      	ldr	r3, [r3, #16]
 8002e06:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002e0a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	6892      	ldr	r2, [r2, #8]
 8002e12:	0211      	lsls	r1, r2, #8
 8002e14:	687a      	ldr	r2, [r7, #4]
 8002e16:	6952      	ldr	r2, [r2, #20]
 8002e18:	0852      	lsrs	r2, r2, #1
 8002e1a:	3a01      	subs	r2, #1
 8002e1c:	0652      	lsls	r2, r2, #25
 8002e1e:	430a      	orrs	r2, r1
 8002e20:	4915      	ldr	r1, [pc, #84]	; (8002e78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e22:	4313      	orrs	r3, r2
 8002e24:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002e26:	4b14      	ldr	r3, [pc, #80]	; (8002e78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a13      	ldr	r2, [pc, #76]	; (8002e78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e2c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002e30:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e32:	f7fe fc05 	bl	8001640 <HAL_GetTick>
 8002e36:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002e38:	e009      	b.n	8002e4e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002e3a:	f7fe fc01 	bl	8001640 <HAL_GetTick>
 8002e3e:	4602      	mov	r2, r0
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	1ad3      	subs	r3, r2, r3
 8002e44:	2b02      	cmp	r3, #2
 8002e46:	d902      	bls.n	8002e4e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002e48:	2303      	movs	r3, #3
 8002e4a:	73fb      	strb	r3, [r7, #15]
          break;
 8002e4c:	e005      	b.n	8002e5a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002e4e:	4b0a      	ldr	r3, [pc, #40]	; (8002e78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d0ef      	beq.n	8002e3a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002e5a:	7bfb      	ldrb	r3, [r7, #15]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d106      	bne.n	8002e6e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002e60:	4b05      	ldr	r3, [pc, #20]	; (8002e78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e62:	691a      	ldr	r2, [r3, #16]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	699b      	ldr	r3, [r3, #24]
 8002e68:	4903      	ldr	r1, [pc, #12]	; (8002e78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002e6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3710      	adds	r7, #16
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	40021000 	.word	0x40021000

08002e7c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b082      	sub	sp, #8
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d101      	bne.n	8002e8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e040      	b.n	8002f10 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d106      	bne.n	8002ea4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f7fe f9f2 	bl	8001288 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2224      	movs	r2, #36	; 0x24
 8002ea8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f022 0201 	bic.w	r2, r2, #1
 8002eb8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d002      	beq.n	8002ec8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f000 fba8 	bl	8003618 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002ec8:	6878      	ldr	r0, [r7, #4]
 8002eca:	f000 f979 	bl	80031c0 <UART_SetConfig>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d101      	bne.n	8002ed8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e01b      	b.n	8002f10 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	685a      	ldr	r2, [r3, #4]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ee6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	689a      	ldr	r2, [r3, #8]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ef6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f042 0201 	orr.w	r2, r2, #1
 8002f06:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	f000 fc27 	bl	800375c <UART_CheckIdleState>
 8002f0e:	4603      	mov	r3, r0
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3708      	adds	r7, #8
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}

08002f18 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b08a      	sub	sp, #40	; 0x28
 8002f1c:	af02      	add	r7, sp, #8
 8002f1e:	60f8      	str	r0, [r7, #12]
 8002f20:	60b9      	str	r1, [r7, #8]
 8002f22:	603b      	str	r3, [r7, #0]
 8002f24:	4613      	mov	r3, r2
 8002f26:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f2c:	2b20      	cmp	r3, #32
 8002f2e:	d178      	bne.n	8003022 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d002      	beq.n	8002f3c <HAL_UART_Transmit+0x24>
 8002f36:	88fb      	ldrh	r3, [r7, #6]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d101      	bne.n	8002f40 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e071      	b.n	8003024 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2200      	movs	r2, #0
 8002f44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2221      	movs	r2, #33	; 0x21
 8002f4c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f4e:	f7fe fb77 	bl	8001640 <HAL_GetTick>
 8002f52:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	88fa      	ldrh	r2, [r7, #6]
 8002f58:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	88fa      	ldrh	r2, [r7, #6]
 8002f60:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f6c:	d108      	bne.n	8002f80 <HAL_UART_Transmit+0x68>
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	691b      	ldr	r3, [r3, #16]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d104      	bne.n	8002f80 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002f76:	2300      	movs	r3, #0
 8002f78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	61bb      	str	r3, [r7, #24]
 8002f7e:	e003      	b.n	8002f88 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f84:	2300      	movs	r3, #0
 8002f86:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002f88:	e030      	b.n	8002fec <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	9300      	str	r3, [sp, #0]
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	2200      	movs	r2, #0
 8002f92:	2180      	movs	r1, #128	; 0x80
 8002f94:	68f8      	ldr	r0, [r7, #12]
 8002f96:	f000 fc89 	bl	80038ac <UART_WaitOnFlagUntilTimeout>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d004      	beq.n	8002faa <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2220      	movs	r2, #32
 8002fa4:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	e03c      	b.n	8003024 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8002faa:	69fb      	ldr	r3, [r7, #28]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d10b      	bne.n	8002fc8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002fb0:	69bb      	ldr	r3, [r7, #24]
 8002fb2:	881a      	ldrh	r2, [r3, #0]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002fbc:	b292      	uxth	r2, r2
 8002fbe:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002fc0:	69bb      	ldr	r3, [r7, #24]
 8002fc2:	3302      	adds	r3, #2
 8002fc4:	61bb      	str	r3, [r7, #24]
 8002fc6:	e008      	b.n	8002fda <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002fc8:	69fb      	ldr	r3, [r7, #28]
 8002fca:	781a      	ldrb	r2, [r3, #0]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	b292      	uxth	r2, r2
 8002fd2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002fd4:	69fb      	ldr	r3, [r7, #28]
 8002fd6:	3301      	adds	r3, #1
 8002fd8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002fe0:	b29b      	uxth	r3, r3
 8002fe2:	3b01      	subs	r3, #1
 8002fe4:	b29a      	uxth	r2, r3
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002ff2:	b29b      	uxth	r3, r3
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d1c8      	bne.n	8002f8a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	9300      	str	r3, [sp, #0]
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	2200      	movs	r2, #0
 8003000:	2140      	movs	r1, #64	; 0x40
 8003002:	68f8      	ldr	r0, [r7, #12]
 8003004:	f000 fc52 	bl	80038ac <UART_WaitOnFlagUntilTimeout>
 8003008:	4603      	mov	r3, r0
 800300a:	2b00      	cmp	r3, #0
 800300c:	d004      	beq.n	8003018 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2220      	movs	r2, #32
 8003012:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8003014:	2303      	movs	r3, #3
 8003016:	e005      	b.n	8003024 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2220      	movs	r2, #32
 800301c:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800301e:	2300      	movs	r3, #0
 8003020:	e000      	b.n	8003024 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8003022:	2302      	movs	r3, #2
  }
}
 8003024:	4618      	mov	r0, r3
 8003026:	3720      	adds	r7, #32
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}

0800302c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b08a      	sub	sp, #40	; 0x28
 8003030:	af02      	add	r7, sp, #8
 8003032:	60f8      	str	r0, [r7, #12]
 8003034:	60b9      	str	r1, [r7, #8]
 8003036:	603b      	str	r3, [r7, #0]
 8003038:	4613      	mov	r3, r2
 800303a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003042:	2b20      	cmp	r3, #32
 8003044:	f040 80b6 	bne.w	80031b4 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d002      	beq.n	8003054 <HAL_UART_Receive+0x28>
 800304e:	88fb      	ldrh	r3, [r7, #6]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d101      	bne.n	8003058 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	e0ae      	b.n	80031b6 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2200      	movs	r2, #0
 800305c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2222      	movs	r2, #34	; 0x22
 8003064:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2200      	movs	r2, #0
 800306c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800306e:	f7fe fae7 	bl	8001640 <HAL_GetTick>
 8003072:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	88fa      	ldrh	r2, [r7, #6]
 8003078:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	88fa      	ldrh	r2, [r7, #6]
 8003080:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800308c:	d10e      	bne.n	80030ac <HAL_UART_Receive+0x80>
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	691b      	ldr	r3, [r3, #16]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d105      	bne.n	80030a2 <HAL_UART_Receive+0x76>
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	f240 12ff 	movw	r2, #511	; 0x1ff
 800309c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80030a0:	e02d      	b.n	80030fe <HAL_UART_Receive+0xd2>
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	22ff      	movs	r2, #255	; 0xff
 80030a6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80030aa:	e028      	b.n	80030fe <HAL_UART_Receive+0xd2>
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d10d      	bne.n	80030d0 <HAL_UART_Receive+0xa4>
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	691b      	ldr	r3, [r3, #16]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d104      	bne.n	80030c6 <HAL_UART_Receive+0x9a>
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	22ff      	movs	r2, #255	; 0xff
 80030c0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80030c4:	e01b      	b.n	80030fe <HAL_UART_Receive+0xd2>
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	227f      	movs	r2, #127	; 0x7f
 80030ca:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80030ce:	e016      	b.n	80030fe <HAL_UART_Receive+0xd2>
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80030d8:	d10d      	bne.n	80030f6 <HAL_UART_Receive+0xca>
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	691b      	ldr	r3, [r3, #16]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d104      	bne.n	80030ec <HAL_UART_Receive+0xc0>
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	227f      	movs	r2, #127	; 0x7f
 80030e6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80030ea:	e008      	b.n	80030fe <HAL_UART_Receive+0xd2>
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	223f      	movs	r2, #63	; 0x3f
 80030f0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80030f4:	e003      	b.n	80030fe <HAL_UART_Receive+0xd2>
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2200      	movs	r2, #0
 80030fa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003104:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800310e:	d108      	bne.n	8003122 <HAL_UART_Receive+0xf6>
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	691b      	ldr	r3, [r3, #16]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d104      	bne.n	8003122 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8003118:	2300      	movs	r3, #0
 800311a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	61bb      	str	r3, [r7, #24]
 8003120:	e003      	b.n	800312a <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003126:	2300      	movs	r3, #0
 8003128:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800312a:	e037      	b.n	800319c <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	9300      	str	r3, [sp, #0]
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	2200      	movs	r2, #0
 8003134:	2120      	movs	r1, #32
 8003136:	68f8      	ldr	r0, [r7, #12]
 8003138:	f000 fbb8 	bl	80038ac <UART_WaitOnFlagUntilTimeout>
 800313c:	4603      	mov	r3, r0
 800313e:	2b00      	cmp	r3, #0
 8003140:	d005      	beq.n	800314e <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2220      	movs	r2, #32
 8003146:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800314a:	2303      	movs	r3, #3
 800314c:	e033      	b.n	80031b6 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d10c      	bne.n	800316e <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800315a:	b29a      	uxth	r2, r3
 800315c:	8a7b      	ldrh	r3, [r7, #18]
 800315e:	4013      	ands	r3, r2
 8003160:	b29a      	uxth	r2, r3
 8003162:	69bb      	ldr	r3, [r7, #24]
 8003164:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003166:	69bb      	ldr	r3, [r7, #24]
 8003168:	3302      	adds	r3, #2
 800316a:	61bb      	str	r3, [r7, #24]
 800316c:	e00d      	b.n	800318a <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003174:	b29b      	uxth	r3, r3
 8003176:	b2da      	uxtb	r2, r3
 8003178:	8a7b      	ldrh	r3, [r7, #18]
 800317a:	b2db      	uxtb	r3, r3
 800317c:	4013      	ands	r3, r2
 800317e:	b2da      	uxtb	r2, r3
 8003180:	69fb      	ldr	r3, [r7, #28]
 8003182:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003184:	69fb      	ldr	r3, [r7, #28]
 8003186:	3301      	adds	r3, #1
 8003188:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003190:	b29b      	uxth	r3, r3
 8003192:	3b01      	subs	r3, #1
 8003194:	b29a      	uxth	r2, r3
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80031a2:	b29b      	uxth	r3, r3
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d1c1      	bne.n	800312c <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2220      	movs	r2, #32
 80031ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 80031b0:	2300      	movs	r3, #0
 80031b2:	e000      	b.n	80031b6 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 80031b4:	2302      	movs	r3, #2
  }
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3720      	adds	r7, #32
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}
	...

080031c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031c4:	b08a      	sub	sp, #40	; 0x28
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80031ca:	2300      	movs	r3, #0
 80031cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	689a      	ldr	r2, [r3, #8]
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	691b      	ldr	r3, [r3, #16]
 80031d8:	431a      	orrs	r2, r3
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	695b      	ldr	r3, [r3, #20]
 80031de:	431a      	orrs	r2, r3
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	69db      	ldr	r3, [r3, #28]
 80031e4:	4313      	orrs	r3, r2
 80031e6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	4bb4      	ldr	r3, [pc, #720]	; (80034c0 <UART_SetConfig+0x300>)
 80031f0:	4013      	ands	r3, r2
 80031f2:	68fa      	ldr	r2, [r7, #12]
 80031f4:	6812      	ldr	r2, [r2, #0]
 80031f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80031f8:	430b      	orrs	r3, r1
 80031fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	68da      	ldr	r2, [r3, #12]
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	430a      	orrs	r2, r1
 8003210:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	699b      	ldr	r3, [r3, #24]
 8003216:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4aa9      	ldr	r2, [pc, #676]	; (80034c4 <UART_SetConfig+0x304>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d004      	beq.n	800322c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	6a1b      	ldr	r3, [r3, #32]
 8003226:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003228:	4313      	orrs	r3, r2
 800322a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800323c:	430a      	orrs	r2, r1
 800323e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4aa0      	ldr	r2, [pc, #640]	; (80034c8 <UART_SetConfig+0x308>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d126      	bne.n	8003298 <UART_SetConfig+0xd8>
 800324a:	4ba0      	ldr	r3, [pc, #640]	; (80034cc <UART_SetConfig+0x30c>)
 800324c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003250:	f003 0303 	and.w	r3, r3, #3
 8003254:	2b03      	cmp	r3, #3
 8003256:	d81b      	bhi.n	8003290 <UART_SetConfig+0xd0>
 8003258:	a201      	add	r2, pc, #4	; (adr r2, 8003260 <UART_SetConfig+0xa0>)
 800325a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800325e:	bf00      	nop
 8003260:	08003271 	.word	0x08003271
 8003264:	08003281 	.word	0x08003281
 8003268:	08003279 	.word	0x08003279
 800326c:	08003289 	.word	0x08003289
 8003270:	2301      	movs	r3, #1
 8003272:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003276:	e080      	b.n	800337a <UART_SetConfig+0x1ba>
 8003278:	2302      	movs	r3, #2
 800327a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800327e:	e07c      	b.n	800337a <UART_SetConfig+0x1ba>
 8003280:	2304      	movs	r3, #4
 8003282:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003286:	e078      	b.n	800337a <UART_SetConfig+0x1ba>
 8003288:	2308      	movs	r3, #8
 800328a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800328e:	e074      	b.n	800337a <UART_SetConfig+0x1ba>
 8003290:	2310      	movs	r3, #16
 8003292:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003296:	e070      	b.n	800337a <UART_SetConfig+0x1ba>
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a8c      	ldr	r2, [pc, #560]	; (80034d0 <UART_SetConfig+0x310>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d138      	bne.n	8003314 <UART_SetConfig+0x154>
 80032a2:	4b8a      	ldr	r3, [pc, #552]	; (80034cc <UART_SetConfig+0x30c>)
 80032a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032a8:	f003 030c 	and.w	r3, r3, #12
 80032ac:	2b0c      	cmp	r3, #12
 80032ae:	d82d      	bhi.n	800330c <UART_SetConfig+0x14c>
 80032b0:	a201      	add	r2, pc, #4	; (adr r2, 80032b8 <UART_SetConfig+0xf8>)
 80032b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032b6:	bf00      	nop
 80032b8:	080032ed 	.word	0x080032ed
 80032bc:	0800330d 	.word	0x0800330d
 80032c0:	0800330d 	.word	0x0800330d
 80032c4:	0800330d 	.word	0x0800330d
 80032c8:	080032fd 	.word	0x080032fd
 80032cc:	0800330d 	.word	0x0800330d
 80032d0:	0800330d 	.word	0x0800330d
 80032d4:	0800330d 	.word	0x0800330d
 80032d8:	080032f5 	.word	0x080032f5
 80032dc:	0800330d 	.word	0x0800330d
 80032e0:	0800330d 	.word	0x0800330d
 80032e4:	0800330d 	.word	0x0800330d
 80032e8:	08003305 	.word	0x08003305
 80032ec:	2300      	movs	r3, #0
 80032ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032f2:	e042      	b.n	800337a <UART_SetConfig+0x1ba>
 80032f4:	2302      	movs	r3, #2
 80032f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032fa:	e03e      	b.n	800337a <UART_SetConfig+0x1ba>
 80032fc:	2304      	movs	r3, #4
 80032fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003302:	e03a      	b.n	800337a <UART_SetConfig+0x1ba>
 8003304:	2308      	movs	r3, #8
 8003306:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800330a:	e036      	b.n	800337a <UART_SetConfig+0x1ba>
 800330c:	2310      	movs	r3, #16
 800330e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003312:	e032      	b.n	800337a <UART_SetConfig+0x1ba>
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a6a      	ldr	r2, [pc, #424]	; (80034c4 <UART_SetConfig+0x304>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d12a      	bne.n	8003374 <UART_SetConfig+0x1b4>
 800331e:	4b6b      	ldr	r3, [pc, #428]	; (80034cc <UART_SetConfig+0x30c>)
 8003320:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003324:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003328:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800332c:	d01a      	beq.n	8003364 <UART_SetConfig+0x1a4>
 800332e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003332:	d81b      	bhi.n	800336c <UART_SetConfig+0x1ac>
 8003334:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003338:	d00c      	beq.n	8003354 <UART_SetConfig+0x194>
 800333a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800333e:	d815      	bhi.n	800336c <UART_SetConfig+0x1ac>
 8003340:	2b00      	cmp	r3, #0
 8003342:	d003      	beq.n	800334c <UART_SetConfig+0x18c>
 8003344:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003348:	d008      	beq.n	800335c <UART_SetConfig+0x19c>
 800334a:	e00f      	b.n	800336c <UART_SetConfig+0x1ac>
 800334c:	2300      	movs	r3, #0
 800334e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003352:	e012      	b.n	800337a <UART_SetConfig+0x1ba>
 8003354:	2302      	movs	r3, #2
 8003356:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800335a:	e00e      	b.n	800337a <UART_SetConfig+0x1ba>
 800335c:	2304      	movs	r3, #4
 800335e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003362:	e00a      	b.n	800337a <UART_SetConfig+0x1ba>
 8003364:	2308      	movs	r3, #8
 8003366:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800336a:	e006      	b.n	800337a <UART_SetConfig+0x1ba>
 800336c:	2310      	movs	r3, #16
 800336e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003372:	e002      	b.n	800337a <UART_SetConfig+0x1ba>
 8003374:	2310      	movs	r3, #16
 8003376:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a51      	ldr	r2, [pc, #324]	; (80034c4 <UART_SetConfig+0x304>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d17a      	bne.n	800347a <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003384:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003388:	2b08      	cmp	r3, #8
 800338a:	d824      	bhi.n	80033d6 <UART_SetConfig+0x216>
 800338c:	a201      	add	r2, pc, #4	; (adr r2, 8003394 <UART_SetConfig+0x1d4>)
 800338e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003392:	bf00      	nop
 8003394:	080033b9 	.word	0x080033b9
 8003398:	080033d7 	.word	0x080033d7
 800339c:	080033c1 	.word	0x080033c1
 80033a0:	080033d7 	.word	0x080033d7
 80033a4:	080033c7 	.word	0x080033c7
 80033a8:	080033d7 	.word	0x080033d7
 80033ac:	080033d7 	.word	0x080033d7
 80033b0:	080033d7 	.word	0x080033d7
 80033b4:	080033cf 	.word	0x080033cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033b8:	f7ff f9ec 	bl	8002794 <HAL_RCC_GetPCLK1Freq>
 80033bc:	61f8      	str	r0, [r7, #28]
        break;
 80033be:	e010      	b.n	80033e2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033c0:	4b44      	ldr	r3, [pc, #272]	; (80034d4 <UART_SetConfig+0x314>)
 80033c2:	61fb      	str	r3, [r7, #28]
        break;
 80033c4:	e00d      	b.n	80033e2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033c6:	f7ff f94d 	bl	8002664 <HAL_RCC_GetSysClockFreq>
 80033ca:	61f8      	str	r0, [r7, #28]
        break;
 80033cc:	e009      	b.n	80033e2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033d2:	61fb      	str	r3, [r7, #28]
        break;
 80033d4:	e005      	b.n	80033e2 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 80033d6:	2300      	movs	r3, #0
 80033d8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80033e0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80033e2:	69fb      	ldr	r3, [r7, #28]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	f000 8107 	beq.w	80035f8 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	685a      	ldr	r2, [r3, #4]
 80033ee:	4613      	mov	r3, r2
 80033f0:	005b      	lsls	r3, r3, #1
 80033f2:	4413      	add	r3, r2
 80033f4:	69fa      	ldr	r2, [r7, #28]
 80033f6:	429a      	cmp	r2, r3
 80033f8:	d305      	bcc.n	8003406 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003400:	69fa      	ldr	r2, [r7, #28]
 8003402:	429a      	cmp	r2, r3
 8003404:	d903      	bls.n	800340e <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800340c:	e0f4      	b.n	80035f8 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	2200      	movs	r2, #0
 8003412:	461c      	mov	r4, r3
 8003414:	4615      	mov	r5, r2
 8003416:	f04f 0200 	mov.w	r2, #0
 800341a:	f04f 0300 	mov.w	r3, #0
 800341e:	022b      	lsls	r3, r5, #8
 8003420:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003424:	0222      	lsls	r2, r4, #8
 8003426:	68f9      	ldr	r1, [r7, #12]
 8003428:	6849      	ldr	r1, [r1, #4]
 800342a:	0849      	lsrs	r1, r1, #1
 800342c:	2000      	movs	r0, #0
 800342e:	4688      	mov	r8, r1
 8003430:	4681      	mov	r9, r0
 8003432:	eb12 0a08 	adds.w	sl, r2, r8
 8003436:	eb43 0b09 	adc.w	fp, r3, r9
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	2200      	movs	r2, #0
 8003440:	603b      	str	r3, [r7, #0]
 8003442:	607a      	str	r2, [r7, #4]
 8003444:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003448:	4650      	mov	r0, sl
 800344a:	4659      	mov	r1, fp
 800344c:	f7fc ff10 	bl	8000270 <__aeabi_uldivmod>
 8003450:	4602      	mov	r2, r0
 8003452:	460b      	mov	r3, r1
 8003454:	4613      	mov	r3, r2
 8003456:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003458:	69bb      	ldr	r3, [r7, #24]
 800345a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800345e:	d308      	bcc.n	8003472 <UART_SetConfig+0x2b2>
 8003460:	69bb      	ldr	r3, [r7, #24]
 8003462:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003466:	d204      	bcs.n	8003472 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	69ba      	ldr	r2, [r7, #24]
 800346e:	60da      	str	r2, [r3, #12]
 8003470:	e0c2      	b.n	80035f8 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003478:	e0be      	b.n	80035f8 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	69db      	ldr	r3, [r3, #28]
 800347e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003482:	d16a      	bne.n	800355a <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8003484:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003488:	2b08      	cmp	r3, #8
 800348a:	d834      	bhi.n	80034f6 <UART_SetConfig+0x336>
 800348c:	a201      	add	r2, pc, #4	; (adr r2, 8003494 <UART_SetConfig+0x2d4>)
 800348e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003492:	bf00      	nop
 8003494:	080034b9 	.word	0x080034b9
 8003498:	080034d9 	.word	0x080034d9
 800349c:	080034e1 	.word	0x080034e1
 80034a0:	080034f7 	.word	0x080034f7
 80034a4:	080034e7 	.word	0x080034e7
 80034a8:	080034f7 	.word	0x080034f7
 80034ac:	080034f7 	.word	0x080034f7
 80034b0:	080034f7 	.word	0x080034f7
 80034b4:	080034ef 	.word	0x080034ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034b8:	f7ff f96c 	bl	8002794 <HAL_RCC_GetPCLK1Freq>
 80034bc:	61f8      	str	r0, [r7, #28]
        break;
 80034be:	e020      	b.n	8003502 <UART_SetConfig+0x342>
 80034c0:	efff69f3 	.word	0xefff69f3
 80034c4:	40008000 	.word	0x40008000
 80034c8:	40013800 	.word	0x40013800
 80034cc:	40021000 	.word	0x40021000
 80034d0:	40004400 	.word	0x40004400
 80034d4:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80034d8:	f7ff f972 	bl	80027c0 <HAL_RCC_GetPCLK2Freq>
 80034dc:	61f8      	str	r0, [r7, #28]
        break;
 80034de:	e010      	b.n	8003502 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80034e0:	4b4c      	ldr	r3, [pc, #304]	; (8003614 <UART_SetConfig+0x454>)
 80034e2:	61fb      	str	r3, [r7, #28]
        break;
 80034e4:	e00d      	b.n	8003502 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034e6:	f7ff f8bd 	bl	8002664 <HAL_RCC_GetSysClockFreq>
 80034ea:	61f8      	str	r0, [r7, #28]
        break;
 80034ec:	e009      	b.n	8003502 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034f2:	61fb      	str	r3, [r7, #28]
        break;
 80034f4:	e005      	b.n	8003502 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 80034f6:	2300      	movs	r3, #0
 80034f8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003500:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003502:	69fb      	ldr	r3, [r7, #28]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d077      	beq.n	80035f8 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003508:	69fb      	ldr	r3, [r7, #28]
 800350a:	005a      	lsls	r2, r3, #1
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	085b      	lsrs	r3, r3, #1
 8003512:	441a      	add	r2, r3
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	fbb2 f3f3 	udiv	r3, r2, r3
 800351c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800351e:	69bb      	ldr	r3, [r7, #24]
 8003520:	2b0f      	cmp	r3, #15
 8003522:	d916      	bls.n	8003552 <UART_SetConfig+0x392>
 8003524:	69bb      	ldr	r3, [r7, #24]
 8003526:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800352a:	d212      	bcs.n	8003552 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800352c:	69bb      	ldr	r3, [r7, #24]
 800352e:	b29b      	uxth	r3, r3
 8003530:	f023 030f 	bic.w	r3, r3, #15
 8003534:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003536:	69bb      	ldr	r3, [r7, #24]
 8003538:	085b      	lsrs	r3, r3, #1
 800353a:	b29b      	uxth	r3, r3
 800353c:	f003 0307 	and.w	r3, r3, #7
 8003540:	b29a      	uxth	r2, r3
 8003542:	8afb      	ldrh	r3, [r7, #22]
 8003544:	4313      	orrs	r3, r2
 8003546:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	8afa      	ldrh	r2, [r7, #22]
 800354e:	60da      	str	r2, [r3, #12]
 8003550:	e052      	b.n	80035f8 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003558:	e04e      	b.n	80035f8 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800355a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800355e:	2b08      	cmp	r3, #8
 8003560:	d827      	bhi.n	80035b2 <UART_SetConfig+0x3f2>
 8003562:	a201      	add	r2, pc, #4	; (adr r2, 8003568 <UART_SetConfig+0x3a8>)
 8003564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003568:	0800358d 	.word	0x0800358d
 800356c:	08003595 	.word	0x08003595
 8003570:	0800359d 	.word	0x0800359d
 8003574:	080035b3 	.word	0x080035b3
 8003578:	080035a3 	.word	0x080035a3
 800357c:	080035b3 	.word	0x080035b3
 8003580:	080035b3 	.word	0x080035b3
 8003584:	080035b3 	.word	0x080035b3
 8003588:	080035ab 	.word	0x080035ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800358c:	f7ff f902 	bl	8002794 <HAL_RCC_GetPCLK1Freq>
 8003590:	61f8      	str	r0, [r7, #28]
        break;
 8003592:	e014      	b.n	80035be <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003594:	f7ff f914 	bl	80027c0 <HAL_RCC_GetPCLK2Freq>
 8003598:	61f8      	str	r0, [r7, #28]
        break;
 800359a:	e010      	b.n	80035be <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800359c:	4b1d      	ldr	r3, [pc, #116]	; (8003614 <UART_SetConfig+0x454>)
 800359e:	61fb      	str	r3, [r7, #28]
        break;
 80035a0:	e00d      	b.n	80035be <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035a2:	f7ff f85f 	bl	8002664 <HAL_RCC_GetSysClockFreq>
 80035a6:	61f8      	str	r0, [r7, #28]
        break;
 80035a8:	e009      	b.n	80035be <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035ae:	61fb      	str	r3, [r7, #28]
        break;
 80035b0:	e005      	b.n	80035be <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 80035b2:	2300      	movs	r3, #0
 80035b4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80035bc:	bf00      	nop
    }

    if (pclk != 0U)
 80035be:	69fb      	ldr	r3, [r7, #28]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d019      	beq.n	80035f8 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	085a      	lsrs	r2, r3, #1
 80035ca:	69fb      	ldr	r3, [r7, #28]
 80035cc:	441a      	add	r2, r3
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80035d6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80035d8:	69bb      	ldr	r3, [r7, #24]
 80035da:	2b0f      	cmp	r3, #15
 80035dc:	d909      	bls.n	80035f2 <UART_SetConfig+0x432>
 80035de:	69bb      	ldr	r3, [r7, #24]
 80035e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035e4:	d205      	bcs.n	80035f2 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80035e6:	69bb      	ldr	r3, [r7, #24]
 80035e8:	b29a      	uxth	r2, r3
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	60da      	str	r2, [r3, #12]
 80035f0:	e002      	b.n	80035f8 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2200      	movs	r2, #0
 80035fc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2200      	movs	r2, #0
 8003602:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003604:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003608:	4618      	mov	r0, r3
 800360a:	3728      	adds	r7, #40	; 0x28
 800360c:	46bd      	mov	sp, r7
 800360e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003612:	bf00      	nop
 8003614:	00f42400 	.word	0x00f42400

08003618 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003618:	b480      	push	{r7}
 800361a:	b083      	sub	sp, #12
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003624:	f003 0308 	and.w	r3, r3, #8
 8003628:	2b00      	cmp	r3, #0
 800362a:	d00a      	beq.n	8003642 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	430a      	orrs	r2, r1
 8003640:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003646:	f003 0301 	and.w	r3, r3, #1
 800364a:	2b00      	cmp	r3, #0
 800364c:	d00a      	beq.n	8003664 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	430a      	orrs	r2, r1
 8003662:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003668:	f003 0302 	and.w	r3, r3, #2
 800366c:	2b00      	cmp	r3, #0
 800366e:	d00a      	beq.n	8003686 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	430a      	orrs	r2, r1
 8003684:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368a:	f003 0304 	and.w	r3, r3, #4
 800368e:	2b00      	cmp	r3, #0
 8003690:	d00a      	beq.n	80036a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	430a      	orrs	r2, r1
 80036a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ac:	f003 0310 	and.w	r3, r3, #16
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d00a      	beq.n	80036ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	430a      	orrs	r2, r1
 80036c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ce:	f003 0320 	and.w	r3, r3, #32
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d00a      	beq.n	80036ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	430a      	orrs	r2, r1
 80036ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d01a      	beq.n	800372e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	430a      	orrs	r2, r1
 800370c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003712:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003716:	d10a      	bne.n	800372e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	430a      	orrs	r2, r1
 800372c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003732:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003736:	2b00      	cmp	r3, #0
 8003738:	d00a      	beq.n	8003750 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	430a      	orrs	r2, r1
 800374e:	605a      	str	r2, [r3, #4]
  }
}
 8003750:	bf00      	nop
 8003752:	370c      	adds	r7, #12
 8003754:	46bd      	mov	sp, r7
 8003756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375a:	4770      	bx	lr

0800375c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b098      	sub	sp, #96	; 0x60
 8003760:	af02      	add	r7, sp, #8
 8003762:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2200      	movs	r2, #0
 8003768:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800376c:	f7fd ff68 	bl	8001640 <HAL_GetTick>
 8003770:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 0308 	and.w	r3, r3, #8
 800377c:	2b08      	cmp	r3, #8
 800377e:	d12e      	bne.n	80037de <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003780:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003784:	9300      	str	r3, [sp, #0]
 8003786:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003788:	2200      	movs	r2, #0
 800378a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f000 f88c 	bl	80038ac <UART_WaitOnFlagUntilTimeout>
 8003794:	4603      	mov	r3, r0
 8003796:	2b00      	cmp	r3, #0
 8003798:	d021      	beq.n	80037de <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037a2:	e853 3f00 	ldrex	r3, [r3]
 80037a6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80037a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037ae:	653b      	str	r3, [r7, #80]	; 0x50
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	461a      	mov	r2, r3
 80037b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037b8:	647b      	str	r3, [r7, #68]	; 0x44
 80037ba:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037bc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80037be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80037c0:	e841 2300 	strex	r3, r2, [r1]
 80037c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80037c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d1e6      	bne.n	800379a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2220      	movs	r2, #32
 80037d0:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80037da:	2303      	movs	r3, #3
 80037dc:	e062      	b.n	80038a4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 0304 	and.w	r3, r3, #4
 80037e8:	2b04      	cmp	r3, #4
 80037ea:	d149      	bne.n	8003880 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80037f0:	9300      	str	r3, [sp, #0]
 80037f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037f4:	2200      	movs	r2, #0
 80037f6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f000 f856 	bl	80038ac <UART_WaitOnFlagUntilTimeout>
 8003800:	4603      	mov	r3, r0
 8003802:	2b00      	cmp	r3, #0
 8003804:	d03c      	beq.n	8003880 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800380c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380e:	e853 3f00 	ldrex	r3, [r3]
 8003812:	623b      	str	r3, [r7, #32]
   return(result);
 8003814:	6a3b      	ldr	r3, [r7, #32]
 8003816:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800381a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	461a      	mov	r2, r3
 8003822:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003824:	633b      	str	r3, [r7, #48]	; 0x30
 8003826:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003828:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800382a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800382c:	e841 2300 	strex	r3, r2, [r1]
 8003830:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003834:	2b00      	cmp	r3, #0
 8003836:	d1e6      	bne.n	8003806 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	3308      	adds	r3, #8
 800383e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	e853 3f00 	ldrex	r3, [r3]
 8003846:	60fb      	str	r3, [r7, #12]
   return(result);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	f023 0301 	bic.w	r3, r3, #1
 800384e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	3308      	adds	r3, #8
 8003856:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003858:	61fa      	str	r2, [r7, #28]
 800385a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800385c:	69b9      	ldr	r1, [r7, #24]
 800385e:	69fa      	ldr	r2, [r7, #28]
 8003860:	e841 2300 	strex	r3, r2, [r1]
 8003864:	617b      	str	r3, [r7, #20]
   return(result);
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d1e5      	bne.n	8003838 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2220      	movs	r2, #32
 8003870:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2200      	movs	r2, #0
 8003878:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800387c:	2303      	movs	r3, #3
 800387e:	e011      	b.n	80038a4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2220      	movs	r2, #32
 8003884:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2220      	movs	r2, #32
 800388a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2200      	movs	r2, #0
 8003892:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2200      	movs	r2, #0
 8003898:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2200      	movs	r2, #0
 800389e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80038a2:	2300      	movs	r3, #0
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	3758      	adds	r7, #88	; 0x58
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}

080038ac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b084      	sub	sp, #16
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	60f8      	str	r0, [r7, #12]
 80038b4:	60b9      	str	r1, [r7, #8]
 80038b6:	603b      	str	r3, [r7, #0]
 80038b8:	4613      	mov	r3, r2
 80038ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038bc:	e049      	b.n	8003952 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038be:	69bb      	ldr	r3, [r7, #24]
 80038c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80038c4:	d045      	beq.n	8003952 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038c6:	f7fd febb 	bl	8001640 <HAL_GetTick>
 80038ca:	4602      	mov	r2, r0
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	1ad3      	subs	r3, r2, r3
 80038d0:	69ba      	ldr	r2, [r7, #24]
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d302      	bcc.n	80038dc <UART_WaitOnFlagUntilTimeout+0x30>
 80038d6:	69bb      	ldr	r3, [r7, #24]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d101      	bne.n	80038e0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80038dc:	2303      	movs	r3, #3
 80038de:	e048      	b.n	8003972 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0304 	and.w	r3, r3, #4
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d031      	beq.n	8003952 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	69db      	ldr	r3, [r3, #28]
 80038f4:	f003 0308 	and.w	r3, r3, #8
 80038f8:	2b08      	cmp	r3, #8
 80038fa:	d110      	bne.n	800391e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	2208      	movs	r2, #8
 8003902:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003904:	68f8      	ldr	r0, [r7, #12]
 8003906:	f000 f838 	bl	800397a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2208      	movs	r2, #8
 800390e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2200      	movs	r2, #0
 8003916:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e029      	b.n	8003972 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	69db      	ldr	r3, [r3, #28]
 8003924:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003928:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800392c:	d111      	bne.n	8003952 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003936:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003938:	68f8      	ldr	r0, [r7, #12]
 800393a:	f000 f81e 	bl	800397a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2220      	movs	r2, #32
 8003942:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2200      	movs	r2, #0
 800394a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800394e:	2303      	movs	r3, #3
 8003950:	e00f      	b.n	8003972 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	69da      	ldr	r2, [r3, #28]
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	4013      	ands	r3, r2
 800395c:	68ba      	ldr	r2, [r7, #8]
 800395e:	429a      	cmp	r2, r3
 8003960:	bf0c      	ite	eq
 8003962:	2301      	moveq	r3, #1
 8003964:	2300      	movne	r3, #0
 8003966:	b2db      	uxtb	r3, r3
 8003968:	461a      	mov	r2, r3
 800396a:	79fb      	ldrb	r3, [r7, #7]
 800396c:	429a      	cmp	r2, r3
 800396e:	d0a6      	beq.n	80038be <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003970:	2300      	movs	r3, #0
}
 8003972:	4618      	mov	r0, r3
 8003974:	3710      	adds	r7, #16
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}

0800397a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800397a:	b480      	push	{r7}
 800397c:	b095      	sub	sp, #84	; 0x54
 800397e:	af00      	add	r7, sp, #0
 8003980:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003988:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800398a:	e853 3f00 	ldrex	r3, [r3]
 800398e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003992:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003996:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	461a      	mov	r2, r3
 800399e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039a0:	643b      	str	r3, [r7, #64]	; 0x40
 80039a2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039a4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80039a6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80039a8:	e841 2300 	strex	r3, r2, [r1]
 80039ac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80039ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d1e6      	bne.n	8003982 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	3308      	adds	r3, #8
 80039ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039bc:	6a3b      	ldr	r3, [r7, #32]
 80039be:	e853 3f00 	ldrex	r3, [r3]
 80039c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80039c4:	69fb      	ldr	r3, [r7, #28]
 80039c6:	f023 0301 	bic.w	r3, r3, #1
 80039ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	3308      	adds	r3, #8
 80039d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80039d4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80039d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80039da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039dc:	e841 2300 	strex	r3, r2, [r1]
 80039e0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80039e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d1e5      	bne.n	80039b4 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d118      	bne.n	8003a22 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	e853 3f00 	ldrex	r3, [r3]
 80039fc:	60bb      	str	r3, [r7, #8]
   return(result);
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	f023 0310 	bic.w	r3, r3, #16
 8003a04:	647b      	str	r3, [r7, #68]	; 0x44
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	461a      	mov	r2, r3
 8003a0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a0e:	61bb      	str	r3, [r7, #24]
 8003a10:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a12:	6979      	ldr	r1, [r7, #20]
 8003a14:	69ba      	ldr	r2, [r7, #24]
 8003a16:	e841 2300 	strex	r3, r2, [r1]
 8003a1a:	613b      	str	r3, [r7, #16]
   return(result);
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d1e6      	bne.n	80039f0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2220      	movs	r2, #32
 8003a26:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2200      	movs	r2, #0
 8003a34:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003a36:	bf00      	nop
 8003a38:	3754      	adds	r7, #84	; 0x54
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a40:	4770      	bx	lr

08003a42 <LL_GPIO_SetPinMode>:
{
 8003a42:	b480      	push	{r7}
 8003a44:	b08b      	sub	sp, #44	; 0x2c
 8003a46:	af00      	add	r7, sp, #0
 8003a48:	60f8      	str	r0, [r7, #12]
 8003a4a:	60b9      	str	r1, [r7, #8]
 8003a4c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	fa93 f3a3 	rbit	r3, r3
 8003a5c:	613b      	str	r3, [r7, #16]
  return result;
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003a62:	69bb      	ldr	r3, [r7, #24]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d101      	bne.n	8003a6c <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8003a68:	2320      	movs	r3, #32
 8003a6a:	e003      	b.n	8003a74 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8003a6c:	69bb      	ldr	r3, [r7, #24]
 8003a6e:	fab3 f383 	clz	r3, r3
 8003a72:	b2db      	uxtb	r3, r3
 8003a74:	005b      	lsls	r3, r3, #1
 8003a76:	2103      	movs	r1, #3
 8003a78:	fa01 f303 	lsl.w	r3, r1, r3
 8003a7c:	43db      	mvns	r3, r3
 8003a7e:	401a      	ands	r2, r3
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a84:	6a3b      	ldr	r3, [r7, #32]
 8003a86:	fa93 f3a3 	rbit	r3, r3
 8003a8a:	61fb      	str	r3, [r7, #28]
  return result;
 8003a8c:	69fb      	ldr	r3, [r7, #28]
 8003a8e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d101      	bne.n	8003a9a <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8003a96:	2320      	movs	r3, #32
 8003a98:	e003      	b.n	8003aa2 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8003a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a9c:	fab3 f383 	clz	r3, r3
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	005b      	lsls	r3, r3, #1
 8003aa4:	6879      	ldr	r1, [r7, #4]
 8003aa6:	fa01 f303 	lsl.w	r3, r1, r3
 8003aaa:	431a      	orrs	r2, r3
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	601a      	str	r2, [r3, #0]
}
 8003ab0:	bf00      	nop
 8003ab2:	372c      	adds	r7, #44	; 0x2c
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aba:	4770      	bx	lr

08003abc <LL_GPIO_SetPinOutputType>:
{
 8003abc:	b480      	push	{r7}
 8003abe:	b085      	sub	sp, #20
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	60f8      	str	r0, [r7, #12]
 8003ac4:	60b9      	str	r1, [r7, #8]
 8003ac6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	685a      	ldr	r2, [r3, #4]
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	43db      	mvns	r3, r3
 8003ad0:	401a      	ands	r2, r3
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	6879      	ldr	r1, [r7, #4]
 8003ad6:	fb01 f303 	mul.w	r3, r1, r3
 8003ada:	431a      	orrs	r2, r3
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	605a      	str	r2, [r3, #4]
}
 8003ae0:	bf00      	nop
 8003ae2:	3714      	adds	r7, #20
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aea:	4770      	bx	lr

08003aec <LL_GPIO_SetPinSpeed>:
{
 8003aec:	b480      	push	{r7}
 8003aee:	b08b      	sub	sp, #44	; 0x2c
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	60f8      	str	r0, [r7, #12]
 8003af4:	60b9      	str	r1, [r7, #8]
 8003af6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	689a      	ldr	r2, [r3, #8]
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	fa93 f3a3 	rbit	r3, r3
 8003b06:	613b      	str	r3, [r7, #16]
  return result;
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003b0c:	69bb      	ldr	r3, [r7, #24]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d101      	bne.n	8003b16 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8003b12:	2320      	movs	r3, #32
 8003b14:	e003      	b.n	8003b1e <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8003b16:	69bb      	ldr	r3, [r7, #24]
 8003b18:	fab3 f383 	clz	r3, r3
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	005b      	lsls	r3, r3, #1
 8003b20:	2103      	movs	r1, #3
 8003b22:	fa01 f303 	lsl.w	r3, r1, r3
 8003b26:	43db      	mvns	r3, r3
 8003b28:	401a      	ands	r2, r3
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b2e:	6a3b      	ldr	r3, [r7, #32]
 8003b30:	fa93 f3a3 	rbit	r3, r3
 8003b34:	61fb      	str	r3, [r7, #28]
  return result;
 8003b36:	69fb      	ldr	r3, [r7, #28]
 8003b38:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d101      	bne.n	8003b44 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8003b40:	2320      	movs	r3, #32
 8003b42:	e003      	b.n	8003b4c <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8003b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b46:	fab3 f383 	clz	r3, r3
 8003b4a:	b2db      	uxtb	r3, r3
 8003b4c:	005b      	lsls	r3, r3, #1
 8003b4e:	6879      	ldr	r1, [r7, #4]
 8003b50:	fa01 f303 	lsl.w	r3, r1, r3
 8003b54:	431a      	orrs	r2, r3
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	609a      	str	r2, [r3, #8]
}
 8003b5a:	bf00      	nop
 8003b5c:	372c      	adds	r7, #44	; 0x2c
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b64:	4770      	bx	lr

08003b66 <LL_GPIO_SetPinPull>:
{
 8003b66:	b480      	push	{r7}
 8003b68:	b08b      	sub	sp, #44	; 0x2c
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	60f8      	str	r0, [r7, #12]
 8003b6e:	60b9      	str	r1, [r7, #8]
 8003b70:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	68da      	ldr	r2, [r3, #12]
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	fa93 f3a3 	rbit	r3, r3
 8003b80:	613b      	str	r3, [r7, #16]
  return result;
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003b86:	69bb      	ldr	r3, [r7, #24]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d101      	bne.n	8003b90 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8003b8c:	2320      	movs	r3, #32
 8003b8e:	e003      	b.n	8003b98 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8003b90:	69bb      	ldr	r3, [r7, #24]
 8003b92:	fab3 f383 	clz	r3, r3
 8003b96:	b2db      	uxtb	r3, r3
 8003b98:	005b      	lsls	r3, r3, #1
 8003b9a:	2103      	movs	r1, #3
 8003b9c:	fa01 f303 	lsl.w	r3, r1, r3
 8003ba0:	43db      	mvns	r3, r3
 8003ba2:	401a      	ands	r2, r3
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ba8:	6a3b      	ldr	r3, [r7, #32]
 8003baa:	fa93 f3a3 	rbit	r3, r3
 8003bae:	61fb      	str	r3, [r7, #28]
  return result;
 8003bb0:	69fb      	ldr	r3, [r7, #28]
 8003bb2:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d101      	bne.n	8003bbe <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8003bba:	2320      	movs	r3, #32
 8003bbc:	e003      	b.n	8003bc6 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8003bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc0:	fab3 f383 	clz	r3, r3
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	005b      	lsls	r3, r3, #1
 8003bc8:	6879      	ldr	r1, [r7, #4]
 8003bca:	fa01 f303 	lsl.w	r3, r1, r3
 8003bce:	431a      	orrs	r2, r3
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	60da      	str	r2, [r3, #12]
}
 8003bd4:	bf00      	nop
 8003bd6:	372c      	adds	r7, #44	; 0x2c
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bde:	4770      	bx	lr

08003be0 <LL_GPIO_SetAFPin_0_7>:
{
 8003be0:	b480      	push	{r7}
 8003be2:	b08b      	sub	sp, #44	; 0x2c
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	60f8      	str	r0, [r7, #12]
 8003be8:	60b9      	str	r1, [r7, #8]
 8003bea:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	6a1a      	ldr	r2, [r3, #32]
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	fa93 f3a3 	rbit	r3, r3
 8003bfa:	613b      	str	r3, [r7, #16]
  return result;
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003c00:	69bb      	ldr	r3, [r7, #24]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d101      	bne.n	8003c0a <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8003c06:	2320      	movs	r3, #32
 8003c08:	e003      	b.n	8003c12 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8003c0a:	69bb      	ldr	r3, [r7, #24]
 8003c0c:	fab3 f383 	clz	r3, r3
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	210f      	movs	r1, #15
 8003c16:	fa01 f303 	lsl.w	r3, r1, r3
 8003c1a:	43db      	mvns	r3, r3
 8003c1c:	401a      	ands	r2, r3
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c22:	6a3b      	ldr	r3, [r7, #32]
 8003c24:	fa93 f3a3 	rbit	r3, r3
 8003c28:	61fb      	str	r3, [r7, #28]
  return result;
 8003c2a:	69fb      	ldr	r3, [r7, #28]
 8003c2c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d101      	bne.n	8003c38 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8003c34:	2320      	movs	r3, #32
 8003c36:	e003      	b.n	8003c40 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8003c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c3a:	fab3 f383 	clz	r3, r3
 8003c3e:	b2db      	uxtb	r3, r3
 8003c40:	009b      	lsls	r3, r3, #2
 8003c42:	6879      	ldr	r1, [r7, #4]
 8003c44:	fa01 f303 	lsl.w	r3, r1, r3
 8003c48:	431a      	orrs	r2, r3
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	621a      	str	r2, [r3, #32]
}
 8003c4e:	bf00      	nop
 8003c50:	372c      	adds	r7, #44	; 0x2c
 8003c52:	46bd      	mov	sp, r7
 8003c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c58:	4770      	bx	lr

08003c5a <LL_GPIO_SetAFPin_8_15>:
{
 8003c5a:	b480      	push	{r7}
 8003c5c:	b08b      	sub	sp, #44	; 0x2c
 8003c5e:	af00      	add	r7, sp, #0
 8003c60:	60f8      	str	r0, [r7, #12]
 8003c62:	60b9      	str	r1, [r7, #8]
 8003c64:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	0a1b      	lsrs	r3, r3, #8
 8003c6e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	fa93 f3a3 	rbit	r3, r3
 8003c76:	613b      	str	r3, [r7, #16]
  return result;
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003c7c:	69bb      	ldr	r3, [r7, #24]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d101      	bne.n	8003c86 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8003c82:	2320      	movs	r3, #32
 8003c84:	e003      	b.n	8003c8e <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8003c86:	69bb      	ldr	r3, [r7, #24]
 8003c88:	fab3 f383 	clz	r3, r3
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	009b      	lsls	r3, r3, #2
 8003c90:	210f      	movs	r1, #15
 8003c92:	fa01 f303 	lsl.w	r3, r1, r3
 8003c96:	43db      	mvns	r3, r3
 8003c98:	401a      	ands	r2, r3
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	0a1b      	lsrs	r3, r3, #8
 8003c9e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ca0:	6a3b      	ldr	r3, [r7, #32]
 8003ca2:	fa93 f3a3 	rbit	r3, r3
 8003ca6:	61fb      	str	r3, [r7, #28]
  return result;
 8003ca8:	69fb      	ldr	r3, [r7, #28]
 8003caa:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d101      	bne.n	8003cb6 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8003cb2:	2320      	movs	r3, #32
 8003cb4:	e003      	b.n	8003cbe <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8003cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb8:	fab3 f383 	clz	r3, r3
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	009b      	lsls	r3, r3, #2
 8003cc0:	6879      	ldr	r1, [r7, #4]
 8003cc2:	fa01 f303 	lsl.w	r3, r1, r3
 8003cc6:	431a      	orrs	r2, r3
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003ccc:	bf00      	nop
 8003cce:	372c      	adds	r7, #44	; 0x2c
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr

08003cd8 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b088      	sub	sp, #32
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
 8003ce0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	fa93 f3a3 	rbit	r3, r3
 8003cee:	60fb      	str	r3, [r7, #12]
  return result;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d101      	bne.n	8003cfe <LL_GPIO_Init+0x26>
    return 32U;
 8003cfa:	2320      	movs	r3, #32
 8003cfc:	e003      	b.n	8003d06 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	fab3 f383 	clz	r3, r3
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8003d08:	e048      	b.n	8003d9c <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	2101      	movs	r1, #1
 8003d10:	69fb      	ldr	r3, [r7, #28]
 8003d12:	fa01 f303 	lsl.w	r3, r1, r3
 8003d16:	4013      	ands	r3, r2
 8003d18:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8003d1a:	69bb      	ldr	r3, [r7, #24]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d03a      	beq.n	8003d96 <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d003      	beq.n	8003d30 <LL_GPIO_Init+0x58>
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	2b02      	cmp	r3, #2
 8003d2e:	d10e      	bne.n	8003d4e <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	461a      	mov	r2, r3
 8003d36:	69b9      	ldr	r1, [r7, #24]
 8003d38:	6878      	ldr	r0, [r7, #4]
 8003d3a:	f7ff fed7 	bl	8003aec <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	6819      	ldr	r1, [r3, #0]
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	68db      	ldr	r3, [r3, #12]
 8003d46:	461a      	mov	r2, r3
 8003d48:	6878      	ldr	r0, [r7, #4]
 8003d4a:	f7ff feb7 	bl	8003abc <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	691b      	ldr	r3, [r3, #16]
 8003d52:	461a      	mov	r2, r3
 8003d54:	69b9      	ldr	r1, [r7, #24]
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f7ff ff05 	bl	8003b66 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	2b02      	cmp	r3, #2
 8003d62:	d111      	bne.n	8003d88 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8003d64:	69bb      	ldr	r3, [r7, #24]
 8003d66:	2bff      	cmp	r3, #255	; 0xff
 8003d68:	d807      	bhi.n	8003d7a <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	695b      	ldr	r3, [r3, #20]
 8003d6e:	461a      	mov	r2, r3
 8003d70:	69b9      	ldr	r1, [r7, #24]
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	f7ff ff34 	bl	8003be0 <LL_GPIO_SetAFPin_0_7>
 8003d78:	e006      	b.n	8003d88 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	695b      	ldr	r3, [r3, #20]
 8003d7e:	461a      	mov	r2, r3
 8003d80:	69b9      	ldr	r1, [r7, #24]
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f7ff ff69 	bl	8003c5a <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	461a      	mov	r2, r3
 8003d8e:	69b9      	ldr	r1, [r7, #24]
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	f7ff fe56 	bl	8003a42 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8003d96:	69fb      	ldr	r3, [r7, #28]
 8003d98:	3301      	adds	r3, #1
 8003d9a:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	69fb      	ldr	r3, [r7, #28]
 8003da2:	fa22 f303 	lsr.w	r3, r2, r3
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d1af      	bne.n	8003d0a <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 8003daa:	2300      	movs	r3, #0
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	3720      	adds	r7, #32
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}

08003db4 <SetDevice>:
//! \brief This function accepts a Device ID and 
//! extracts the corresponding device information from the sDeviceFeatures 
//! struct
//! \param[in] wDeviceId Device ID (determined at runtime)
void SetDevice (word wDeviceId)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b083      	sub	sp, #12
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
    for(DeviceIdx = 0; DeviceIdx < (sizeof(sDeviceFeatures)/sizeof(*sDeviceFeatures)); DeviceIdx++)
 8003dbc:	4b10      	ldr	r3, [pc, #64]	; (8003e00 <SetDevice+0x4c>)
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	601a      	str	r2, [r3, #0]
 8003dc2:	e010      	b.n	8003de6 <SetDevice+0x32>
    {
        if(sDeviceFeatures[DeviceIdx].Id == wDeviceId)
 8003dc4:	4b0e      	ldr	r3, [pc, #56]	; (8003e00 <SetDevice+0x4c>)
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	490e      	ldr	r1, [pc, #56]	; (8003e04 <SetDevice+0x50>)
 8003dca:	4613      	mov	r3, r2
 8003dcc:	005b      	lsls	r3, r3, #1
 8003dce:	4413      	add	r3, r2
 8003dd0:	00db      	lsls	r3, r3, #3
 8003dd2:	440b      	add	r3, r1
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	687a      	ldr	r2, [r7, #4]
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d009      	beq.n	8003df0 <SetDevice+0x3c>
    for(DeviceIdx = 0; DeviceIdx < (sizeof(sDeviceFeatures)/sizeof(*sDeviceFeatures)); DeviceIdx++)
 8003ddc:	4b08      	ldr	r3, [pc, #32]	; (8003e00 <SetDevice+0x4c>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	3301      	adds	r3, #1
 8003de2:	4a07      	ldr	r2, [pc, #28]	; (8003e00 <SetDevice+0x4c>)
 8003de4:	6013      	str	r3, [r2, #0]
 8003de6:	4b06      	ldr	r3, [pc, #24]	; (8003e00 <SetDevice+0x4c>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	2b1b      	cmp	r3, #27
 8003dec:	d9ea      	bls.n	8003dc4 <SetDevice+0x10>
        {
              break;
        }
    }
}
 8003dee:	e000      	b.n	8003df2 <SetDevice+0x3e>
              break;
 8003df0:	bf00      	nop
}
 8003df2:	bf00      	nop
 8003df4:	370c      	adds	r7, #12
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr
 8003dfe:	bf00      	nop
 8003e00:	20000114 	.word	0x20000114
 8003e04:	080062f4 	.word	0x080062f4

08003e08 <DeviceHas_FastFlash>:
}

//! \brief Function to check if current device supports FastFlash
//! \return bool True = feature available, False = feature not available
bool DeviceHas_FastFlash(void)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	af00      	add	r7, sp, #0
    return (sDeviceFeatures[DeviceIdx].FastFlash);
 8003e0c:	4b07      	ldr	r3, [pc, #28]	; (8003e2c <DeviceHas_FastFlash+0x24>)
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	4907      	ldr	r1, [pc, #28]	; (8003e30 <DeviceHas_FastFlash+0x28>)
 8003e12:	4613      	mov	r3, r2
 8003e14:	005b      	lsls	r3, r3, #1
 8003e16:	4413      	add	r3, r2
 8003e18:	00db      	lsls	r3, r3, #3
 8003e1a:	440b      	add	r3, r1
 8003e1c:	3307      	adds	r3, #7
 8003e1e:	781b      	ldrb	r3, [r3, #0]
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr
 8003e2a:	bf00      	nop
 8003e2c:	20000114 	.word	0x20000114
 8003e30:	080062f4 	.word	0x080062f4

08003e34 <DeviceHas_EnhVerify>:

//! \brief Function to check if current device supports EnhVerify
//! \return bool True = feature available, False = feature not available
bool DeviceHas_EnhVerify(void)
{
 8003e34:	b480      	push	{r7}
 8003e36:	af00      	add	r7, sp, #0
    return (sDeviceFeatures[DeviceIdx].EnhVerify);
 8003e38:	4b07      	ldr	r3, [pc, #28]	; (8003e58 <DeviceHas_EnhVerify+0x24>)
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	4907      	ldr	r1, [pc, #28]	; (8003e5c <DeviceHas_EnhVerify+0x28>)
 8003e3e:	4613      	mov	r3, r2
 8003e40:	005b      	lsls	r3, r3, #1
 8003e42:	4413      	add	r3, r2
 8003e44:	00db      	lsls	r3, r3, #3
 8003e46:	440b      	add	r3, r1
 8003e48:	3308      	adds	r3, #8
 8003e4a:	781b      	ldrb	r3, [r3, #0]
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e54:	4770      	bx	lr
 8003e56:	bf00      	nop
 8003e58:	20000114 	.word	0x20000114
 8003e5c:	080062f4 	.word	0x080062f4

08003e60 <DR_Shift16>:
//! \brief Function for shifting a given 16-bit word into the JTAG data
//! register through TDI.
//! \param[in] word data (16-bit data, MSB first)
//! \return word (value is shifted out via TDO simultaneously)
word DR_Shift16(word data)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b082      	sub	sp, #8
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	4603      	mov	r3, r0
 8003e68:	80fb      	strh	r3, [r7, #6]
    // JTAG FSM state = Run-Test/Idle
    SetTMS();
 8003e6a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003e6e:	2208      	movs	r2, #8
 8003e70:	619a      	str	r2, [r3, #24]
    ClrTCK();
 8003e72:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003e76:	2210      	movs	r2, #16
 8003e78:	629a      	str	r2, [r3, #40]	; 0x28
    SetTCK();
 8003e7a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003e7e:	2210      	movs	r2, #16
 8003e80:	619a      	str	r2, [r3, #24]

    // JTAG FSM state = Select DR-Scan
    ClrTMS();
 8003e82:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003e86:	2208      	movs	r2, #8
 8003e88:	629a      	str	r2, [r3, #40]	; 0x28
    ClrTCK();
 8003e8a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003e8e:	2210      	movs	r2, #16
 8003e90:	629a      	str	r2, [r3, #40]	; 0x28
    SetTCK();
 8003e92:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003e96:	2210      	movs	r2, #16
 8003e98:	619a      	str	r2, [r3, #24]
    // JTAG FSM state = Capture-DR
    ClrTCK();
 8003e9a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003e9e:	2210      	movs	r2, #16
 8003ea0:	629a      	str	r2, [r3, #40]	; 0x28
    SetTCK();
 8003ea2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003ea6:	2210      	movs	r2, #16
 8003ea8:	619a      	str	r2, [r3, #24]
    // JTAG FSM state = Shift-DR, Shift in TDI (16-bit)
    return(Shift(F_WORD, data));
 8003eaa:	88fb      	ldrh	r3, [r7, #6]
 8003eac:	4619      	mov	r1, r3
 8003eae:	2010      	movs	r0, #16
 8003eb0:	f000 fdda 	bl	8004a68 <Shift>
 8003eb4:	4603      	mov	r3, r0
    // JTAG FSM state = Run-Test/Idle

}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3708      	adds	r7, #8
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}

08003ebe <IR_Shift>:
//! register through TDI (MSB first, but with interchanged MSB - LSB, to
//! simply use the same shifting function, Shift(), as used in DR_Shift16).
//! \param[in] byte Instruction (8bit JTAG instruction, MSB first)
//! \return word TDOword (value shifted out from TDO = JTAG ID)
word IR_Shift(byte instruction)
{
 8003ebe:	b580      	push	{r7, lr}
 8003ec0:	b082      	sub	sp, #8
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	71fb      	strb	r3, [r7, #7]
    // JTAG FSM state = Run-Test/Idle
    SetTMS();
 8003ec8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003ecc:	2208      	movs	r2, #8
 8003ece:	619a      	str	r2, [r3, #24]
    ClrTCK();
 8003ed0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003ed4:	2210      	movs	r2, #16
 8003ed6:	629a      	str	r2, [r3, #40]	; 0x28
    SetTCK();
 8003ed8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003edc:	2210      	movs	r2, #16
 8003ede:	619a      	str	r2, [r3, #24]
    // JTAG FSM state = Select DR-Scan
    ClrTCK();
 8003ee0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003ee4:	2210      	movs	r2, #16
 8003ee6:	629a      	str	r2, [r3, #40]	; 0x28
    SetTCK();
 8003ee8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003eec:	2210      	movs	r2, #16
 8003eee:	619a      	str	r2, [r3, #24]

    // JTAG FSM state = Select IR-Scan
    ClrTMS();
 8003ef0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003ef4:	2208      	movs	r2, #8
 8003ef6:	629a      	str	r2, [r3, #40]	; 0x28
    ClrTCK();
 8003ef8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003efc:	2210      	movs	r2, #16
 8003efe:	629a      	str	r2, [r3, #40]	; 0x28
    SetTCK();
 8003f00:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003f04:	2210      	movs	r2, #16
 8003f06:	619a      	str	r2, [r3, #24]
    // JTAG FSM state = Capture-IR
    ClrTCK();
 8003f08:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003f0c:	2210      	movs	r2, #16
 8003f0e:	629a      	str	r2, [r3, #40]	; 0x28
    SetTCK();
 8003f10:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003f14:	2210      	movs	r2, #16
 8003f16:	619a      	str	r2, [r3, #24]
    // JTAG FSM state = Shift-IR, Shift in TDI (8-bit)
    return(Shift(F_BYTE, instruction));
 8003f18:	79fb      	ldrb	r3, [r7, #7]
 8003f1a:	b29b      	uxth	r3, r3
 8003f1c:	4619      	mov	r1, r3
 8003f1e:	2008      	movs	r0, #8
 8003f20:	f000 fda2 	bl	8004a68 <Shift>
 8003f24:	4603      	mov	r3, r0
    // JTAG FSM state = Run-Test/Idle
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3708      	adds	r7, #8
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}

08003f2e <ResetTAP>:

//----------------------------------------------------------------------------
//! \brief Reset target JTAG interface and perform fuse-HW check.
void ResetTAP(void)
{
 8003f2e:	b580      	push	{r7, lr}
 8003f30:	b082      	sub	sp, #8
 8003f32:	af00      	add	r7, sp, #0
    word i;
    
    // process TDI first to settle fuse current
    SetTDI();
 8003f34:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003f38:	2220      	movs	r2, #32
 8003f3a:	619a      	str	r2, [r3, #24]
    SetTMS();
 8003f3c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003f40:	2208      	movs	r2, #8
 8003f42:	619a      	str	r2, [r3, #24]
    SetTCK();
 8003f44:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003f48:	2210      	movs	r2, #16
 8003f4a:	619a      	str	r2, [r3, #24]

    // Reset JTAG FSM
    for (i = 6; i > 0; i--)
 8003f4c:	2306      	movs	r3, #6
 8003f4e:	80fb      	strh	r3, [r7, #6]
 8003f50:	e00a      	b.n	8003f68 <ResetTAP+0x3a>
    {
        ClrTCK();
 8003f52:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003f56:	2210      	movs	r2, #16
 8003f58:	629a      	str	r2, [r3, #40]	; 0x28
        SetTCK();
 8003f5a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003f5e:	2210      	movs	r2, #16
 8003f60:	619a      	str	r2, [r3, #24]
    for (i = 6; i > 0; i--)
 8003f62:	88fb      	ldrh	r3, [r7, #6]
 8003f64:	3b01      	subs	r3, #1
 8003f66:	80fb      	strh	r3, [r7, #6]
 8003f68:	88fb      	ldrh	r3, [r7, #6]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d1f1      	bne.n	8003f52 <ResetTAP+0x24>
    }
    // JTAG FSM is now in Test-Logic-Reset
    ClrTCK();
 8003f6e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003f72:	2210      	movs	r2, #16
 8003f74:	629a      	str	r2, [r3, #40]	; 0x28
    ClrTMS();
 8003f76:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003f7a:	2208      	movs	r2, #8
 8003f7c:	629a      	str	r2, [r3, #40]	; 0x28
    SetTCK();
 8003f7e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003f82:	2210      	movs	r2, #16
 8003f84:	619a      	str	r2, [r3, #24]
    SetTMS();
 8003f86:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003f8a:	2208      	movs	r2, #8
 8003f8c:	619a      	str	r2, [r3, #24]
    // JTAG FSM is now in Run-Test/IDLE

    // Perform fuse check
    ClrTMS();
 8003f8e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003f92:	2208      	movs	r2, #8
 8003f94:	629a      	str	r2, [r3, #40]	; 0x28
    usDelay(5); // at least 5us low required
 8003f96:	2005      	movs	r0, #5
 8003f98:	f000 fde4 	bl	8004b64 <usDelay>
    SetTMS();
 8003f9c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003fa0:	2208      	movs	r2, #8
 8003fa2:	619a      	str	r2, [r3, #24]
    ClrTMS();
 8003fa4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003fa8:	2208      	movs	r2, #8
 8003faa:	629a      	str	r2, [r3, #40]	; 0x28
    usDelay(5); // at least 5us low required
 8003fac:	2005      	movs	r0, #5
 8003fae:	f000 fdd9 	bl	8004b64 <usDelay>
    SetTMS();
 8003fb2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003fb6:	2208      	movs	r2, #8
 8003fb8:	619a      	str	r2, [r3, #24]
}
 8003fba:	bf00      	nop
 8003fbc:	3708      	adds	r7, #8
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}

08003fc2 <ExecutePOR>:
//! \brief Function to execute a Power-On Reset (POR) using JTAG CNTRL SIG 
//! register
//! \return word (STATUS_OK if target is in Full-Emulation-State afterwards,
//! STATUS_ERROR otherwise)
word ExecutePOR(void)
{
 8003fc2:	b580      	push	{r7, lr}
 8003fc4:	b082      	sub	sp, #8
 8003fc6:	af00      	add	r7, sp, #0
    word JtagVersion;

    // Perform Reset
    IR_Shift(IR_CNTRL_SIG_16BIT);
 8003fc8:	20c8      	movs	r0, #200	; 0xc8
 8003fca:	f7ff ff78 	bl	8003ebe <IR_Shift>
    DR_Shift16(0x2C01);                 // Apply Reset
 8003fce:	f642 4001 	movw	r0, #11265	; 0x2c01
 8003fd2:	f7ff ff45 	bl	8003e60 <DR_Shift16>
    DR_Shift16(0x2401);                 // Remove Reset
 8003fd6:	f242 4001 	movw	r0, #9217	; 0x2401
 8003fda:	f7ff ff41 	bl	8003e60 <DR_Shift16>
    ClrTCLK();
 8003fde:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003fe2:	2220      	movs	r2, #32
 8003fe4:	629a      	str	r2, [r3, #40]	; 0x28
    SetTCLK();
 8003fe6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003fea:	2220      	movs	r2, #32
 8003fec:	619a      	str	r2, [r3, #24]
    ClrTCLK();
 8003fee:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003ff2:	2220      	movs	r2, #32
 8003ff4:	629a      	str	r2, [r3, #40]	; 0x28
    SetTCLK();
 8003ff6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003ffa:	2220      	movs	r2, #32
 8003ffc:	619a      	str	r2, [r3, #24]
    ClrTCLK();
 8003ffe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004002:	2220      	movs	r2, #32
 8004004:	629a      	str	r2, [r3, #40]	; 0x28
    JtagVersion = IR_Shift(IR_ADDR_CAPTURE); // read JTAG ID, checked at function end
 8004006:	2021      	movs	r0, #33	; 0x21
 8004008:	f7ff ff59 	bl	8003ebe <IR_Shift>
 800400c:	4603      	mov	r3, r0
 800400e:	80fb      	strh	r3, [r7, #6]
    SetTCLK();
 8004010:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004014:	2220      	movs	r2, #32
 8004016:	619a      	str	r2, [r3, #24]

    WriteMem(F_WORD, 0x0120, 0x5A80);   // Disable Watchdog on target device
 8004018:	f44f 42b5 	mov.w	r2, #23168	; 0x5a80
 800401c:	f44f 7190 	mov.w	r1, #288	; 0x120
 8004020:	2010      	movs	r0, #16
 8004022:	f000 fa78 	bl	8004516 <WriteMem>

    if (JtagVersion != JTAG_ID)
 8004026:	88fb      	ldrh	r3, [r7, #6]
 8004028:	2b89      	cmp	r3, #137	; 0x89
 800402a:	d001      	beq.n	8004030 <ExecutePOR+0x6e>
    {
        return(STATUS_ERROR);
 800402c:	2300      	movs	r3, #0
 800402e:	e000      	b.n	8004032 <ExecutePOR+0x70>
    }
    return(STATUS_OK);
 8004030:	2301      	movs	r3, #1
}
 8004032:	4618      	mov	r0, r3
 8004034:	3708      	adds	r7, #8
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}

0800403a <SetInstrFetch>:

//----------------------------------------------------------------------------
//! \brief Function to set target CPU JTAG FSM into the instruction fetch state
//! \return word (STATUS_OK if instr. fetch was set, STATUS_ERROR otherwise)
word SetInstrFetch(void)
{
 800403a:	b580      	push	{r7, lr}
 800403c:	b082      	sub	sp, #8
 800403e:	af00      	add	r7, sp, #0
    word i;

    IR_Shift(IR_CNTRL_SIG_CAPTURE);
 8004040:	2028      	movs	r0, #40	; 0x28
 8004042:	f7ff ff3c 	bl	8003ebe <IR_Shift>

    // Wait until CPU is in instr. fetch state, timeout after limited attempts
    for (i = 50; i > 0; i--)
 8004046:	2332      	movs	r3, #50	; 0x32
 8004048:	80fb      	strh	r3, [r7, #6]
 800404a:	e014      	b.n	8004076 <SetInstrFetch+0x3c>
    {
        if (DR_Shift16(0x0000) & 0x0080)
 800404c:	2000      	movs	r0, #0
 800404e:	f7ff ff07 	bl	8003e60 <DR_Shift16>
 8004052:	4603      	mov	r3, r0
 8004054:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004058:	2b00      	cmp	r3, #0
 800405a:	d001      	beq.n	8004060 <SetInstrFetch+0x26>
        {
            return(STATUS_OK);
 800405c:	2301      	movs	r3, #1
 800405e:	e00e      	b.n	800407e <SetInstrFetch+0x44>
        }
        ClrTCLK();
 8004060:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004064:	2220      	movs	r2, #32
 8004066:	629a      	str	r2, [r3, #40]	; 0x28
        SetTCLK();
 8004068:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800406c:	2220      	movs	r2, #32
 800406e:	619a      	str	r2, [r3, #24]
    for (i = 50; i > 0; i--)
 8004070:	88fb      	ldrh	r3, [r7, #6]
 8004072:	3b01      	subs	r3, #1
 8004074:	80fb      	strh	r3, [r7, #6]
 8004076:	88fb      	ldrh	r3, [r7, #6]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d1e7      	bne.n	800404c <SetInstrFetch+0x12>
    }
    return(STATUS_ERROR);
 800407c:	2300      	movs	r3, #0
}
 800407e:	4618      	mov	r0, r3
 8004080:	3708      	adds	r7, #8
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}

08004086 <SetPC>:

//----------------------------------------------------------------------------
//! \brief Load a given address into the target CPU's program counter (PC).
//! \param[in] word Addr (destination address)
void SetPC(word Addr)
{
 8004086:	b580      	push	{r7, lr}
 8004088:	b082      	sub	sp, #8
 800408a:	af00      	add	r7, sp, #0
 800408c:	4603      	mov	r3, r0
 800408e:	80fb      	strh	r3, [r7, #6]
    SetInstrFetch();              // Set CPU into instruction fetch mode, TCLK=1
 8004090:	f7ff ffd3 	bl	800403a <SetInstrFetch>

    // Load PC with address
    IR_Shift(IR_CNTRL_SIG_16BIT);
 8004094:	20c8      	movs	r0, #200	; 0xc8
 8004096:	f7ff ff12 	bl	8003ebe <IR_Shift>
    DR_Shift16(0x3401);           // CPU has control of RW & BYTE.
 800409a:	f243 4001 	movw	r0, #13313	; 0x3401
 800409e:	f7ff fedf 	bl	8003e60 <DR_Shift16>
    IR_Shift(IR_DATA_16BIT);
 80040a2:	2082      	movs	r0, #130	; 0x82
 80040a4:	f7ff ff0b 	bl	8003ebe <IR_Shift>
    DR_Shift16(0x4030);           // "mov #addr,PC" instruction
 80040a8:	f244 0030 	movw	r0, #16432	; 0x4030
 80040ac:	f7ff fed8 	bl	8003e60 <DR_Shift16>
    ClrTCLK();
 80040b0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80040b4:	2220      	movs	r2, #32
 80040b6:	629a      	str	r2, [r3, #40]	; 0x28
    SetTCLK();                    // F2xxx
 80040b8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80040bc:	2220      	movs	r2, #32
 80040be:	619a      	str	r2, [r3, #24]
    DR_Shift16(Addr);             // "mov #addr,PC" instruction
 80040c0:	88fb      	ldrh	r3, [r7, #6]
 80040c2:	4618      	mov	r0, r3
 80040c4:	f7ff fecc 	bl	8003e60 <DR_Shift16>
    ClrTCLK();
 80040c8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80040cc:	2220      	movs	r2, #32
 80040ce:	629a      	str	r2, [r3, #40]	; 0x28
    SetTCLK();
 80040d0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80040d4:	2220      	movs	r2, #32
 80040d6:	619a      	str	r2, [r3, #24]
    IR_Shift(IR_ADDR_CAPTURE);
 80040d8:	2021      	movs	r0, #33	; 0x21
 80040da:	f7ff fef0 	bl	8003ebe <IR_Shift>
    ClrTCLK();                    // Now the PC should be on Addr
 80040de:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80040e2:	2220      	movs	r2, #32
 80040e4:	629a      	str	r2, [r3, #40]	; 0x28
    IR_Shift(IR_CNTRL_SIG_16BIT);
 80040e6:	20c8      	movs	r0, #200	; 0xc8
 80040e8:	f7ff fee9 	bl	8003ebe <IR_Shift>
    DR_Shift16(0x2401);           // JTAG has control of RW & BYTE.
 80040ec:	f242 4001 	movw	r0, #9217	; 0x2401
 80040f0:	f7ff feb6 	bl	8003e60 <DR_Shift16>
}
 80040f4:	bf00      	nop
 80040f6:	3708      	adds	r7, #8
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}

080040fc <HaltCPU>:

//----------------------------------------------------------------------------
//! \brief Function to set the CPU into a controlled stop state
void HaltCPU(void)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	af00      	add	r7, sp, #0

    SetInstrFetch();  // Set CPU into instruction fetch mode
 8004100:	f7ff ff9b 	bl	800403a <SetInstrFetch>

    IR_Shift(IR_DATA_16BIT);
 8004104:	2082      	movs	r0, #130	; 0x82
 8004106:	f7ff feda 	bl	8003ebe <IR_Shift>
    DR_Shift16(0x3FFF);           // Send JMP $ instruction
 800410a:	f643 70ff 	movw	r0, #16383	; 0x3fff
 800410e:	f7ff fea7 	bl	8003e60 <DR_Shift16>
    ClrTCLK();
 8004112:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004116:	2220      	movs	r2, #32
 8004118:	629a      	str	r2, [r3, #40]	; 0x28
    IR_Shift(IR_CNTRL_SIG_16BIT);
 800411a:	20c8      	movs	r0, #200	; 0xc8
 800411c:	f7ff fecf 	bl	8003ebe <IR_Shift>
    DR_Shift16(0x2409);           // Set JTAG_HALT bit
 8004120:	f242 4009 	movw	r0, #9225	; 0x2409
 8004124:	f7ff fe9c 	bl	8003e60 <DR_Shift16>
    SetTCLK();
 8004128:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800412c:	2220      	movs	r2, #32
 800412e:	619a      	str	r2, [r3, #24]
}
 8004130:	bf00      	nop
 8004132:	bd80      	pop	{r7, pc}

08004134 <ReleaseCPU>:

//----------------------------------------------------------------------------
//! \brief Function to release the target CPU from the controlled stop state
void ReleaseCPU(void)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	af00      	add	r7, sp, #0
    ClrTCLK();
 8004138:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800413c:	2220      	movs	r2, #32
 800413e:	629a      	str	r2, [r3, #40]	; 0x28
    IR_Shift(IR_CNTRL_SIG_16BIT);
 8004140:	20c8      	movs	r0, #200	; 0xc8
 8004142:	f7ff febc 	bl	8003ebe <IR_Shift>
    DR_Shift16(0x2401);           // Clear the HALT_JTAG bit
 8004146:	f242 4001 	movw	r0, #9217	; 0x2401
 800414a:	f7ff fe89 	bl	8003e60 <DR_Shift16>
    IR_Shift(IR_ADDR_CAPTURE);
 800414e:	2021      	movs	r0, #33	; 0x21
 8004150:	f7ff feb5 	bl	8003ebe <IR_Shift>
    SetTCLK();
 8004154:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004158:	2220      	movs	r2, #32
 800415a:	619a      	str	r2, [r3, #24]
}
 800415c:	bf00      	nop
 800415e:	bd80      	pop	{r7, pc}

08004160 <VerifyPSA>:
//! \param[in] unsigned long StartAddr (Start address of data block to be checked)
//! \param[in] unsigned long Length (Number of words within data block)
//! \param[in] word *DataArray (Pointer to array with the data, 0 for Erase Check)
//! \return word (STATUS_OK if comparison was successful, STATUS_ERROR otherwise)
word VerifyPSA(word StartAddr, word Length, word *DataArray)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b084      	sub	sp, #16
 8004164:	af00      	add	r7, sp, #0
 8004166:	4603      	mov	r3, r0
 8004168:	603a      	str	r2, [r7, #0]
 800416a:	80fb      	strh	r3, [r7, #6]
 800416c:	460b      	mov	r3, r1
 800416e:	80bb      	strh	r3, [r7, #4]
    word TDOword, i;
    word POLY = 0x0805;           // Polynom value for PSA calculation
 8004170:	f640 0305 	movw	r3, #2053	; 0x805
 8004174:	817b      	strh	r3, [r7, #10]
    word PSA_CRC = StartAddr-2;   // Start value for PSA calculation
 8004176:	88fb      	ldrh	r3, [r7, #6]
 8004178:	3b02      	subs	r3, #2
 800417a:	81bb      	strh	r3, [r7, #12]

    ExecutePOR();
 800417c:	f7ff ff21 	bl	8003fc2 <ExecutePOR>

    if(DeviceHas_EnhVerify())
 8004180:	f7ff fe58 	bl	8003e34 <DeviceHas_EnhVerify>
 8004184:	4603      	mov	r3, r0
 8004186:	2b00      	cmp	r3, #0
 8004188:	d015      	beq.n	80041b6 <VerifyPSA+0x56>
    {
        SetPC(StartAddr-4);
 800418a:	88fb      	ldrh	r3, [r7, #6]
 800418c:	3b04      	subs	r3, #4
 800418e:	b29b      	uxth	r3, r3
 8004190:	4618      	mov	r0, r3
 8004192:	f7ff ff78 	bl	8004086 <SetPC>
        HaltCPU();
 8004196:	f7ff ffb1 	bl	80040fc <HaltCPU>
        ClrTCLK();
 800419a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800419e:	2220      	movs	r2, #32
 80041a0:	629a      	str	r2, [r3, #40]	; 0x28
        IR_Shift(IR_DATA_16BIT);
 80041a2:	2082      	movs	r0, #130	; 0x82
 80041a4:	f7ff fe8b 	bl	8003ebe <IR_Shift>
        DR_Shift16(StartAddr-2);
 80041a8:	88fb      	ldrh	r3, [r7, #6]
 80041aa:	3b02      	subs	r3, #2
 80041ac:	b29b      	uxth	r3, r3
 80041ae:	4618      	mov	r0, r3
 80041b0:	f7ff fe56 	bl	8003e60 <DR_Shift16>
 80041b4:	e00d      	b.n	80041d2 <VerifyPSA+0x72>
    }
    else
    {
        SetPC(StartAddr-2);
 80041b6:	88fb      	ldrh	r3, [r7, #6]
 80041b8:	3b02      	subs	r3, #2
 80041ba:	b29b      	uxth	r3, r3
 80041bc:	4618      	mov	r0, r3
 80041be:	f7ff ff62 	bl	8004086 <SetPC>
        SetTCLK();
 80041c2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80041c6:	2220      	movs	r2, #32
 80041c8:	619a      	str	r2, [r3, #24]
        ClrTCLK();
 80041ca:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80041ce:	2220      	movs	r2, #32
 80041d0:	629a      	str	r2, [r3, #40]	; 0x28
    }
    IR_Shift(IR_DATA_PSA);
 80041d2:	2022      	movs	r0, #34	; 0x22
 80041d4:	f7ff fe73 	bl	8003ebe <IR_Shift>
    for (i = 0; i < Length; i++)
 80041d8:	2300      	movs	r3, #0
 80041da:	81fb      	strh	r3, [r7, #14]
 80041dc:	e06c      	b.n	80042b8 <VerifyPSA+0x158>
    {
        // Calculate the PSA (Pseudo Signature Analysis) value
        if ((PSA_CRC & 0x8000) == 0x8000)
 80041de:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	da0b      	bge.n	80041fe <VerifyPSA+0x9e>
        {
            PSA_CRC ^= POLY;
 80041e6:	89ba      	ldrh	r2, [r7, #12]
 80041e8:	897b      	ldrh	r3, [r7, #10]
 80041ea:	4053      	eors	r3, r2
 80041ec:	81bb      	strh	r3, [r7, #12]
            PSA_CRC <<= 1;
 80041ee:	89bb      	ldrh	r3, [r7, #12]
 80041f0:	005b      	lsls	r3, r3, #1
 80041f2:	81bb      	strh	r3, [r7, #12]
            PSA_CRC |= 0x0001;
 80041f4:	89bb      	ldrh	r3, [r7, #12]
 80041f6:	f043 0301 	orr.w	r3, r3, #1
 80041fa:	81bb      	strh	r3, [r7, #12]
 80041fc:	e002      	b.n	8004204 <VerifyPSA+0xa4>
        }
        else
        {
            PSA_CRC <<= 1;
 80041fe:	89bb      	ldrh	r3, [r7, #12]
 8004200:	005b      	lsls	r3, r3, #1
 8004202:	81bb      	strh	r3, [r7, #12]
        }
        // if pointer is 0 then use erase check mask, otherwise data
        &DataArray[0] == 0 ? (PSA_CRC ^= 0xFFFF) : (PSA_CRC ^= DataArray[i]);
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d103      	bne.n	8004212 <VerifyPSA+0xb2>
 800420a:	89bb      	ldrh	r3, [r7, #12]
 800420c:	43db      	mvns	r3, r3
 800420e:	81bb      	strh	r3, [r7, #12]
 8004210:	e007      	b.n	8004222 <VerifyPSA+0xc2>
 8004212:	89fb      	ldrh	r3, [r7, #14]
 8004214:	005b      	lsls	r3, r3, #1
 8004216:	683a      	ldr	r2, [r7, #0]
 8004218:	4413      	add	r3, r2
 800421a:	881a      	ldrh	r2, [r3, #0]
 800421c:	89bb      	ldrh	r3, [r7, #12]
 800421e:	4053      	eors	r3, r2
 8004220:	81bb      	strh	r3, [r7, #12]

        // Clock through the PSA
        SetTCLK();
 8004222:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004226:	2220      	movs	r2, #32
 8004228:	619a      	str	r2, [r3, #24]
//        ClrTCLK();           // set here -> Fixes problem with F123 PSA in RAM

        ClrTCK();
 800422a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800422e:	2210      	movs	r2, #16
 8004230:	629a      	str	r2, [r3, #40]	; 0x28

        SetTMS();
 8004232:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004236:	2208      	movs	r2, #8
 8004238:	619a      	str	r2, [r3, #24]
        SetTCK();            // Select DR scan
 800423a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800423e:	2210      	movs	r2, #16
 8004240:	619a      	str	r2, [r3, #24]
        ClrTCK();
 8004242:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004246:	2210      	movs	r2, #16
 8004248:	629a      	str	r2, [r3, #40]	; 0x28
        ClrTMS();
 800424a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800424e:	2208      	movs	r2, #8
 8004250:	629a      	str	r2, [r3, #40]	; 0x28

        SetTCK();            // Capture DR
 8004252:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004256:	2210      	movs	r2, #16
 8004258:	619a      	str	r2, [r3, #24]
        ClrTCK();
 800425a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800425e:	2210      	movs	r2, #16
 8004260:	629a      	str	r2, [r3, #40]	; 0x28

        SetTCK();            // Shift DR
 8004262:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004266:	2210      	movs	r2, #16
 8004268:	619a      	str	r2, [r3, #24]
        ClrTCK();
 800426a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800426e:	2210      	movs	r2, #16
 8004270:	629a      	str	r2, [r3, #40]	; 0x28

        SetTMS();
 8004272:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004276:	2208      	movs	r2, #8
 8004278:	619a      	str	r2, [r3, #24]
        SetTCK();            // Exit DR
 800427a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800427e:	2210      	movs	r2, #16
 8004280:	619a      	str	r2, [r3, #24]
        ClrTCK();
 8004282:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004286:	2210      	movs	r2, #16
 8004288:	629a      	str	r2, [r3, #40]	; 0x28
        SetTCK();
 800428a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800428e:	2210      	movs	r2, #16
 8004290:	619a      	str	r2, [r3, #24]
        ClrTMS();
 8004292:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004296:	2208      	movs	r2, #8
 8004298:	629a      	str	r2, [r3, #40]	; 0x28
        ClrTCK();
 800429a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800429e:	2210      	movs	r2, #16
 80042a0:	629a      	str	r2, [r3, #40]	; 0x28
        SetTCK();
 80042a2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80042a6:	2210      	movs	r2, #16
 80042a8:	619a      	str	r2, [r3, #24]
        
        ClrTCLK();           // set here -> future purpose
 80042aa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80042ae:	2220      	movs	r2, #32
 80042b0:	629a      	str	r2, [r3, #40]	; 0x28
    for (i = 0; i < Length; i++)
 80042b2:	89fb      	ldrh	r3, [r7, #14]
 80042b4:	3301      	adds	r3, #1
 80042b6:	81fb      	strh	r3, [r7, #14]
 80042b8:	89fa      	ldrh	r2, [r7, #14]
 80042ba:	88bb      	ldrh	r3, [r7, #4]
 80042bc:	429a      	cmp	r2, r3
 80042be:	d38e      	bcc.n	80041de <VerifyPSA+0x7e>
    }
    IR_Shift(IR_SHIFT_OUT_PSA);
 80042c0:	2062      	movs	r0, #98	; 0x62
 80042c2:	f7ff fdfc 	bl	8003ebe <IR_Shift>
    TDOword = DR_Shift16(0x0000);     // Read out the PSA value
 80042c6:	2000      	movs	r0, #0
 80042c8:	f7ff fdca 	bl	8003e60 <DR_Shift16>
 80042cc:	4603      	mov	r3, r0
 80042ce:	813b      	strh	r3, [r7, #8]
    SetTCLK();
 80042d0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80042d4:	2220      	movs	r2, #32
 80042d6:	619a      	str	r2, [r3, #24]

    if(DeviceHas_EnhVerify())
 80042d8:	f7ff fdac 	bl	8003e34 <DeviceHas_EnhVerify>
 80042dc:	4603      	mov	r3, r0
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d001      	beq.n	80042e6 <VerifyPSA+0x186>
    {
        ReleaseCPU();
 80042e2:	f7ff ff27 	bl	8004134 <ReleaseCPU>
    }
    ExecutePOR();
 80042e6:	f7ff fe6c 	bl	8003fc2 <ExecutePOR>

    return((TDOword == PSA_CRC) ? STATUS_OK : STATUS_ERROR);    
 80042ea:	893a      	ldrh	r2, [r7, #8]
 80042ec:	89bb      	ldrh	r3, [r7, #12]
 80042ee:	429a      	cmp	r2, r3
 80042f0:	bf0c      	ite	eq
 80042f2:	2301      	moveq	r3, #1
 80042f4:	2300      	movne	r3, #0
 80042f6:	b2db      	uxtb	r3, r3
 80042f8:	b29b      	uxth	r3, r3
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3710      	adds	r7, #16
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}

08004302 <CheckJtagFuse_JTAG>:
/* To provide better understanding and clearness, some functionality is     */
/* coded generously. (Code and speed optimization enhancements may          */
/* be desired)                                                              */
/****************************************************************************/
static void CheckJtagFuse_JTAG(void)
{
 8004302:	b580      	push	{r7, lr}
 8004304:	af00      	add	r7, sp, #0
    // perform a JTAG fuse check
    SetTMS();__NOP();__NOP();__NOP();__NOP();
 8004306:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800430a:	2208      	movs	r2, #8
 800430c:	619a      	str	r2, [r3, #24]
 800430e:	bf00      	nop
 8004310:	bf00      	nop
 8004312:	bf00      	nop
 8004314:	bf00      	nop
    ClrTMS();__NOP();__NOP();__NOP();__NOP();
 8004316:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800431a:	2208      	movs	r2, #8
 800431c:	629a      	str	r2, [r3, #40]	; 0x28
 800431e:	bf00      	nop
 8004320:	bf00      	nop
 8004322:	bf00      	nop
 8004324:	bf00      	nop
    usDelay(15);
 8004326:	200f      	movs	r0, #15
 8004328:	f000 fc1c 	bl	8004b64 <usDelay>
    SetTMS();__NOP();__NOP();__NOP();__NOP();
 800432c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004330:	2208      	movs	r2, #8
 8004332:	619a      	str	r2, [r3, #24]
 8004334:	bf00      	nop
 8004336:	bf00      	nop
 8004338:	bf00      	nop
 800433a:	bf00      	nop
    ClrTMS();__NOP();__NOP();__NOP();__NOP();
 800433c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004340:	2208      	movs	r2, #8
 8004342:	629a      	str	r2, [r3, #40]	; 0x28
 8004344:	bf00      	nop
 8004346:	bf00      	nop
 8004348:	bf00      	nop
 800434a:	bf00      	nop
    usDelay(15);
 800434c:	200f      	movs	r0, #15
 800434e:	f000 fc09 	bl	8004b64 <usDelay>
    SetTMS();__NOP();__NOP();__NOP();__NOP();
 8004352:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004356:	2208      	movs	r2, #8
 8004358:	619a      	str	r2, [r3, #24]
 800435a:	bf00      	nop
 800435c:	bf00      	nop
 800435e:	bf00      	nop
 8004360:	bf00      	nop
}
 8004362:	bf00      	nop
 8004364:	bd80      	pop	{r7, pc}
	...

08004368 <EntrySequences_RstHigh_JTAG>:

//! \brief Function to start the JTAG communication - RST line high - device starts
//! code execution   
static void EntrySequences_RstHigh_JTAG()
{
 8004368:	b580      	push	{r7, lr}
 800436a:	af00      	add	r7, sp, #0
    ClrTST();    //1
 800436c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004370:	2280      	movs	r2, #128	; 0x80
 8004372:	629a      	str	r2, [r3, #40]	; 0x28
    MsDelay(4); // reset TEST logic
 8004374:	2004      	movs	r0, #4
 8004376:	f7fd f96f 	bl	8001658 <HAL_Delay>

    SetRST();    //2
 800437a:	4b13      	ldr	r3, [pc, #76]	; (80043c8 <EntrySequences_RstHigh_JTAG+0x60>)
 800437c:	2202      	movs	r2, #2
 800437e:	619a      	str	r2, [r3, #24]

    SetTST();    //3
 8004380:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004384:	2280      	movs	r2, #128	; 0x80
 8004386:	619a      	str	r2, [r3, #24]
    MsDelay(20); // activate TEST logic
 8004388:	2014      	movs	r0, #20
 800438a:	f7fd f965 	bl	8001658 <HAL_Delay>

    // phase 1
    ClrRST();    //4
 800438e:	4b0e      	ldr	r3, [pc, #56]	; (80043c8 <EntrySequences_RstHigh_JTAG+0x60>)
 8004390:	2202      	movs	r2, #2
 8004392:	629a      	str	r2, [r3, #40]	; 0x28
    usDelay(60);
 8004394:	203c      	movs	r0, #60	; 0x3c
 8004396:	f000 fbe5 	bl	8004b64 <usDelay>

    // phase 2 -> TEST pin to 0, no change on RST pin
    // for 4-wire JTAG clear Test pin
    ClrTST();  //5
 800439a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800439e:	2280      	movs	r2, #128	; 0x80
 80043a0:	629a      	str	r2, [r3, #40]	; 0x28

    // phase 3
    usDelay(1);
 80043a2:	2001      	movs	r0, #1
 80043a4:	f000 fbde 	bl	8004b64 <usDelay>

    // phase 4 -> TEST pin to 1, no change on RST pin
    // for 4-wire JTAG
    SetTST();//7
 80043a8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80043ac:	2280      	movs	r2, #128	; 0x80
 80043ae:	619a      	str	r2, [r3, #24]
    usDelay(60);
 80043b0:	203c      	movs	r0, #60	; 0x3c
 80043b2:	f000 fbd7 	bl	8004b64 <usDelay>

    // phase 5
    SetRST();
 80043b6:	4b04      	ldr	r3, [pc, #16]	; (80043c8 <EntrySequences_RstHigh_JTAG+0x60>)
 80043b8:	2202      	movs	r2, #2
 80043ba:	619a      	str	r2, [r3, #24]
    MsDelay(5);
 80043bc:	2005      	movs	r0, #5
 80043be:	f7fd f94b 	bl	8001658 <HAL_Delay>
}
 80043c2:	bf00      	nop
 80043c4:	bd80      	pop	{r7, pc}
 80043c6:	bf00      	nop
 80043c8:	48000400 	.word	0x48000400

080043cc <StartJtag>:

//----------------------------------------------------------------------------
//! \brief Function to start the JTAG communication
static word StartJtag(void)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	af00      	add	r7, sp, #0
    // drive JTAG/TEST signals
    MsDelay(10);             // delay 10ms
 80043d0:	200a      	movs	r0, #10
 80043d2:	f7fd f941 	bl	8001658 <HAL_Delay>
    

        EntrySequences_RstHigh_JTAG();
 80043d6:	f7ff ffc7 	bl	8004368 <EntrySequences_RstHigh_JTAG>
//    {
//        SetRST();
//        SetTST();
//    }
    
    ResetTAP();  // reset TAP state machine -> Run-Test/Idle
 80043da:	f7ff fda8 	bl	8003f2e <ResetTAP>

    CheckJtagFuse_JTAG();
 80043de:	f7ff ff90 	bl	8004302 <CheckJtagFuse_JTAG>
    
    return IR_Shift(IR_BYPASS);
 80043e2:	20ff      	movs	r0, #255	; 0xff
 80043e4:	f7ff fd6b 	bl	8003ebe <IR_Shift>
 80043e8:	4603      	mov	r3, r0
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	bd80      	pop	{r7, pc}

080043ee <StopJtag>:

//----------------------------------------------------------------------------
//! \brief Function to stop the JTAG communication
static void StopJtag (void)
{
 80043ee:	b580      	push	{r7, lr}
 80043f0:	af00      	add	r7, sp, #0
    // release JTAG/TEST signals
    {
      MsDelay(10);             // delay 10ms
 80043f2:	200a      	movs	r0, #10
 80043f4:	f7fd f930 	bl	8001658 <HAL_Delay>
    }
}
 80043f8:	bf00      	nop
 80043fa:	bd80      	pop	{r7, pc}

080043fc <GetDevice>:
//! device.
//! \param deviceID outputs the deviceID.
//! \return word (STATUS_ERROR if fuse is blown, incorrect JTAG ID or
//! synchronizing time-out; STATUS_OK otherwise)
word GetDevice(word* deviceID)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b084      	sub	sp, #16
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
    word JtagId = 0;            // initialize JtagId with an invalid value
 8004404:	2300      	movs	r3, #0
 8004406:	81bb      	strh	r3, [r7, #12]
    word i;
    for (i = 0; i < MAX_ENTRY_TRY; i++)
 8004408:	2300      	movs	r3, #0
 800440a:	81fb      	strh	r3, [r7, #14]
 800440c:	e00b      	b.n	8004426 <GetDevice+0x2a>
    {
      
        StopJtag();               // release JTAG/TEST signals to savely reset the test logic
 800440e:	f7ff ffee 	bl	80043ee <StopJtag>
        JtagId = StartJtag();     // establish the physical connection to the JTAG interface
 8004412:	f7ff ffdb 	bl	80043cc <StartJtag>
 8004416:	4603      	mov	r3, r0
 8004418:	81bb      	strh	r3, [r7, #12]
        if(JtagId == JTAG_ID)     // break if a valid JTAG ID is being returned
 800441a:	89bb      	ldrh	r3, [r7, #12]
 800441c:	2b89      	cmp	r3, #137	; 0x89
 800441e:	d006      	beq.n	800442e <GetDevice+0x32>
    for (i = 0; i < MAX_ENTRY_TRY; i++)
 8004420:	89fb      	ldrh	r3, [r7, #14]
 8004422:	3301      	adds	r3, #1
 8004424:	81fb      	strh	r3, [r7, #14]
 8004426:	89fb      	ldrh	r3, [r7, #14]
 8004428:	2b06      	cmp	r3, #6
 800442a:	d9f0      	bls.n	800440e <GetDevice+0x12>
 800442c:	e000      	b.n	8004430 <GetDevice+0x34>
        {
            break;
 800442e:	bf00      	nop
        }
    }
    if(i >= MAX_ENTRY_TRY)
 8004430:	89fb      	ldrh	r3, [r7, #14]
 8004432:	2b06      	cmp	r3, #6
 8004434:	d901      	bls.n	800443a <GetDevice+0x3e>
    {
        return(STATUS_ERROR);
 8004436:	2300      	movs	r3, #0
 8004438:	e048      	b.n	80044cc <GetDevice+0xd0>
    }
                      
    if (IsFuseBlown())                   // Stop here if fuse is already blown
 800443a:	f000 faf5 	bl	8004a28 <IsFuseBlown>
 800443e:	4603      	mov	r3, r0
 8004440:	2b00      	cmp	r3, #0
 8004442:	d001      	beq.n	8004448 <GetDevice+0x4c>
    {
        return(STATUS_FUSEBLOWN);
 8004444:	2302      	movs	r3, #2
 8004446:	e041      	b.n	80044cc <GetDevice+0xd0>
    }
    IR_Shift(IR_CNTRL_SIG_16BIT);
 8004448:	20c8      	movs	r0, #200	; 0xc8
 800444a:	f7ff fd38 	bl	8003ebe <IR_Shift>
    DR_Shift16(0x2401);                  // Set device into JTAG mode + read
 800444e:	f242 4001 	movw	r0, #9217	; 0x2401
 8004452:	f7ff fd05 	bl	8003e60 <DR_Shift16>
    if (IR_Shift(IR_CNTRL_SIG_CAPTURE) != JTAG_ID)
 8004456:	2028      	movs	r0, #40	; 0x28
 8004458:	f7ff fd31 	bl	8003ebe <IR_Shift>
 800445c:	4603      	mov	r3, r0
 800445e:	2b89      	cmp	r3, #137	; 0x89
 8004460:	d001      	beq.n	8004466 <GetDevice+0x6a>
    {
        return(STATUS_ERROR);
 8004462:	2300      	movs	r3, #0
 8004464:	e032      	b.n	80044cc <GetDevice+0xd0>
    }

    // Wait until CPU is synchronized, timeout after a limited # of attempts
    for (i = 50; i > 0; i--)
 8004466:	2332      	movs	r3, #50	; 0x32
 8004468:	81fb      	strh	r3, [r7, #14]
 800446a:	e024      	b.n	80044b6 <GetDevice+0xba>
    {
        if (DR_Shift16(0x0000) & 0x0200)
 800446c:	2000      	movs	r0, #0
 800446e:	f7ff fcf7 	bl	8003e60 <DR_Shift16>
 8004472:	4603      	mov	r3, r0
 8004474:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004478:	2b00      	cmp	r3, #0
 800447a:	d014      	beq.n	80044a6 <GetDevice+0xaa>
        {
        	*deviceID = ReadMem(F_WORD, 0x0FF0);// Get target device type
 800447c:	f44f 617f 	mov.w	r1, #4080	; 0xff0
 8004480:	2010      	movs	r0, #16
 8004482:	f000 f94d 	bl	8004720 <ReadMem>
 8004486:	4603      	mov	r3, r0
 8004488:	461a      	mov	r2, r3
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	801a      	strh	r2, [r3, #0]

                                               //(bytes are interchanged)
        	*deviceID = (*deviceID << 8) + (*deviceID >> 8); // swop bytes
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	881b      	ldrh	r3, [r3, #0]
 8004492:	ba5b      	rev16	r3, r3
 8004494:	b29a      	uxth	r2, r3
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	801a      	strh	r2, [r3, #0]
            //Set Device index, which is used by functions in Device.c
            SetDevice(*deviceID);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	881b      	ldrh	r3, [r3, #0]
 800449e:	4618      	mov	r0, r3
 80044a0:	f7ff fc88 	bl	8003db4 <SetDevice>
            break;
 80044a4:	e00a      	b.n	80044bc <GetDevice+0xc0>
        }
        else
        {
            if (i == 1)
 80044a6:	89fb      	ldrh	r3, [r7, #14]
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d101      	bne.n	80044b0 <GetDevice+0xb4>
            {
                return(STATUS_ERROR);      // Timeout reached, return false
 80044ac:	2300      	movs	r3, #0
 80044ae:	e00d      	b.n	80044cc <GetDevice+0xd0>
    for (i = 50; i > 0; i--)
 80044b0:	89fb      	ldrh	r3, [r7, #14]
 80044b2:	3b01      	subs	r3, #1
 80044b4:	81fb      	strh	r3, [r7, #14]
 80044b6:	89fb      	ldrh	r3, [r7, #14]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d1d7      	bne.n	800446c <GetDevice+0x70>
            }
        }
    }
    if (!ExecutePOR())                     // Perform PUC, Includes
 80044bc:	f7ff fd81 	bl	8003fc2 <ExecutePOR>
 80044c0:	4603      	mov	r3, r0
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d101      	bne.n	80044ca <GetDevice+0xce>
    {
        return(STATUS_ERROR);              // target Watchdog disable.
 80044c6:	2300      	movs	r3, #0
 80044c8:	e000      	b.n	80044cc <GetDevice+0xd0>
    }
    return(STATUS_OK);
 80044ca:	2301      	movs	r3, #1
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	3710      	adds	r7, #16
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd80      	pop	{r7, pc}

080044d4 <ReleaseDevice>:
//----------------------------------------------------------------------------
//! \brief Function to release the target device from JTAG control
//! \param[in] word Addr (0xFFFE: Perform Reset, means Load Reset Vector into 
//! PC, otherwise: Load Addr into PC)
void ReleaseDevice(word Addr)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b082      	sub	sp, #8
 80044d8:	af00      	add	r7, sp, #0
 80044da:	4603      	mov	r3, r0
 80044dc:	80fb      	strh	r3, [r7, #6]
    if (Addr == V_RESET)
 80044de:	88fb      	ldrh	r3, [r7, #6]
 80044e0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d10b      	bne.n	8004500 <ReleaseDevice+0x2c>
    {
        IR_Shift(IR_CNTRL_SIG_16BIT);
 80044e8:	20c8      	movs	r0, #200	; 0xc8
 80044ea:	f7ff fce8 	bl	8003ebe <IR_Shift>
        DR_Shift16(0x2C01);         // Perform a reset
 80044ee:	f642 4001 	movw	r0, #11265	; 0x2c01
 80044f2:	f7ff fcb5 	bl	8003e60 <DR_Shift16>
        DR_Shift16(0x2401);
 80044f6:	f242 4001 	movw	r0, #9217	; 0x2401
 80044fa:	f7ff fcb1 	bl	8003e60 <DR_Shift16>
 80044fe:	e003      	b.n	8004508 <ReleaseDevice+0x34>
    }
    else
    {
        SetPC(Addr);                // Set target CPU's PC
 8004500:	88fb      	ldrh	r3, [r7, #6]
 8004502:	4618      	mov	r0, r3
 8004504:	f7ff fdbf 	bl	8004086 <SetPC>
    }
    IR_Shift(IR_CNTRL_SIG_RELEASE);
 8004508:	20a8      	movs	r0, #168	; 0xa8
 800450a:	f7ff fcd8 	bl	8003ebe <IR_Shift>
}
 800450e:	bf00      	nop
 8004510:	3708      	adds	r7, #8
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}

08004516 <WriteMem>:
//! \brief This function writes one byte/word at a given address ( <0xA00)
//! \param[in] word Format (F_BYTE or F_WORD)
//! \param[in] word Addr (Address of data to be written)
//! \param[in] word Data (shifted data)
void WriteMem(word Format, word Addr, word Data)
{
 8004516:	b580      	push	{r7, lr}
 8004518:	b082      	sub	sp, #8
 800451a:	af00      	add	r7, sp, #0
 800451c:	4603      	mov	r3, r0
 800451e:	80fb      	strh	r3, [r7, #6]
 8004520:	460b      	mov	r3, r1
 8004522:	80bb      	strh	r3, [r7, #4]
 8004524:	4613      	mov	r3, r2
 8004526:	807b      	strh	r3, [r7, #2]
    HaltCPU();
 8004528:	f7ff fde8 	bl	80040fc <HaltCPU>

    ClrTCLK();
 800452c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004530:	2220      	movs	r2, #32
 8004532:	629a      	str	r2, [r3, #40]	; 0x28
    IR_Shift(IR_CNTRL_SIG_16BIT);
 8004534:	20c8      	movs	r0, #200	; 0xc8
 8004536:	f7ff fcc2 	bl	8003ebe <IR_Shift>
    if  (Format == F_WORD)
 800453a:	88fb      	ldrh	r3, [r7, #6]
 800453c:	2b10      	cmp	r3, #16
 800453e:	d104      	bne.n	800454a <WriteMem+0x34>
    {
        DR_Shift16(0x2408);     // Set word write
 8004540:	f242 4008 	movw	r0, #9224	; 0x2408
 8004544:	f7ff fc8c 	bl	8003e60 <DR_Shift16>
 8004548:	e003      	b.n	8004552 <WriteMem+0x3c>
    }
    else
    {
        DR_Shift16(0x2418);     // Set byte write
 800454a:	f242 4018 	movw	r0, #9240	; 0x2418
 800454e:	f7ff fc87 	bl	8003e60 <DR_Shift16>
    }
    IR_Shift(IR_ADDR_16BIT);
 8004552:	20c1      	movs	r0, #193	; 0xc1
 8004554:	f7ff fcb3 	bl	8003ebe <IR_Shift>
    DR_Shift16(Addr);           // Set addr
 8004558:	88bb      	ldrh	r3, [r7, #4]
 800455a:	4618      	mov	r0, r3
 800455c:	f7ff fc80 	bl	8003e60 <DR_Shift16>
    IR_Shift(IR_DATA_TO_ADDR);
 8004560:	20a1      	movs	r0, #161	; 0xa1
 8004562:	f7ff fcac 	bl	8003ebe <IR_Shift>
    DR_Shift16(Data);           // Shift in 16 bits
 8004566:	887b      	ldrh	r3, [r7, #2]
 8004568:	4618      	mov	r0, r3
 800456a:	f7ff fc79 	bl	8003e60 <DR_Shift16>
    SetTCLK();
 800456e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004572:	2220      	movs	r2, #32
 8004574:	619a      	str	r2, [r3, #24]

    ReleaseCPU();
 8004576:	f7ff fddd 	bl	8004134 <ReleaseCPU>
}
 800457a:	bf00      	nop
 800457c:	3708      	adds	r7, #8
 800457e:	46bd      	mov	sp, r7
 8004580:	bd80      	pop	{r7, pc}
	...

08004584 <WriteFLASH>:
//! memory by using the FLASH controller.
//! \param[in] word StartAddr (Start address of FLASH memory)
//! \param[in] word Length (Number of words to be programmed)
//! \param[in] word *DataArray (Pointer to array with the data)
void WriteFLASH(word StartAddr, word Length, word *DataArray)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b084      	sub	sp, #16
 8004588:	af00      	add	r7, sp, #0
 800458a:	4603      	mov	r3, r0
 800458c:	603a      	str	r2, [r7, #0]
 800458e:	80fb      	strh	r3, [r7, #6]
 8004590:	460b      	mov	r3, r1
 8004592:	80bb      	strh	r3, [r7, #4]
    word i;                     // Loop counter
    word addr = StartAddr;      // Address counter
 8004594:	88fb      	ldrh	r3, [r7, #6]
 8004596:	81bb      	strh	r3, [r7, #12]
    word FCTL3_val = SegmentInfoAKey;   // SegmentInfoAKey holds Lock-Key for Info
 8004598:	4b60      	ldr	r3, [pc, #384]	; (800471c <WriteFLASH+0x198>)
 800459a:	881b      	ldrh	r3, [r3, #0]
 800459c:	817b      	strh	r3, [r7, #10]
                                        // Seg. A 

    HaltCPU();
 800459e:	f7ff fdad 	bl	80040fc <HaltCPU>

    ClrTCLK();
 80045a2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80045a6:	2220      	movs	r2, #32
 80045a8:	629a      	str	r2, [r3, #40]	; 0x28
    IR_Shift(IR_CNTRL_SIG_16BIT);
 80045aa:	20c8      	movs	r0, #200	; 0xc8
 80045ac:	f7ff fc87 	bl	8003ebe <IR_Shift>
    DR_Shift16(0x2408);         // Set RW to write
 80045b0:	f242 4008 	movw	r0, #9224	; 0x2408
 80045b4:	f7ff fc54 	bl	8003e60 <DR_Shift16>
    IR_Shift(IR_ADDR_16BIT);
 80045b8:	20c1      	movs	r0, #193	; 0xc1
 80045ba:	f7ff fc80 	bl	8003ebe <IR_Shift>
    DR_Shift16(0x0128);         // FCTL1 register
 80045be:	f44f 7094 	mov.w	r0, #296	; 0x128
 80045c2:	f7ff fc4d 	bl	8003e60 <DR_Shift16>
    IR_Shift(IR_DATA_TO_ADDR);
 80045c6:	20a1      	movs	r0, #161	; 0xa1
 80045c8:	f7ff fc79 	bl	8003ebe <IR_Shift>
    DR_Shift16(0xA540);         // Enable FLASH write
 80045cc:	f24a 5040 	movw	r0, #42304	; 0xa540
 80045d0:	f7ff fc46 	bl	8003e60 <DR_Shift16>
    SetTCLK();
 80045d4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80045d8:	2220      	movs	r2, #32
 80045da:	619a      	str	r2, [r3, #24]

    ClrTCLK();
 80045dc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80045e0:	2220      	movs	r2, #32
 80045e2:	629a      	str	r2, [r3, #40]	; 0x28
    IR_Shift(IR_ADDR_16BIT);
 80045e4:	20c1      	movs	r0, #193	; 0xc1
 80045e6:	f7ff fc6a 	bl	8003ebe <IR_Shift>
    DR_Shift16(0x012A);         // FCTL2 register
 80045ea:	f44f 7095 	mov.w	r0, #298	; 0x12a
 80045ee:	f7ff fc37 	bl	8003e60 <DR_Shift16>
    IR_Shift(IR_DATA_TO_ADDR);
 80045f2:	20a1      	movs	r0, #161	; 0xa1
 80045f4:	f7ff fc63 	bl	8003ebe <IR_Shift>
    DR_Shift16(0xA540);         // Select MCLK as source, DIV=1
 80045f8:	f24a 5040 	movw	r0, #42304	; 0xa540
 80045fc:	f7ff fc30 	bl	8003e60 <DR_Shift16>
    SetTCLK();
 8004600:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004604:	2220      	movs	r2, #32
 8004606:	619a      	str	r2, [r3, #24]

    ClrTCLK();
 8004608:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800460c:	2220      	movs	r2, #32
 800460e:	629a      	str	r2, [r3, #40]	; 0x28
    IR_Shift(IR_ADDR_16BIT);
 8004610:	20c1      	movs	r0, #193	; 0xc1
 8004612:	f7ff fc54 	bl	8003ebe <IR_Shift>
    DR_Shift16(0x012C);         // FCTL3 register
 8004616:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800461a:	f7ff fc21 	bl	8003e60 <DR_Shift16>
    IR_Shift(IR_DATA_TO_ADDR);
 800461e:	20a1      	movs	r0, #161	; 0xa1
 8004620:	f7ff fc4d 	bl	8003ebe <IR_Shift>
    DR_Shift16(FCTL3_val);      // Clear FCTL3; F2xxx: Unlock Info-Seg.
 8004624:	897b      	ldrh	r3, [r7, #10]
 8004626:	4618      	mov	r0, r3
 8004628:	f7ff fc1a 	bl	8003e60 <DR_Shift16>
                                // A by toggling LOCKA-Bit if required,
    SetTCLK();
 800462c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004630:	2220      	movs	r2, #32
 8004632:	619a      	str	r2, [r3, #24]

    ClrTCLK();
 8004634:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004638:	2220      	movs	r2, #32
 800463a:	629a      	str	r2, [r3, #40]	; 0x28
    IR_Shift(IR_CNTRL_SIG_16BIT);
 800463c:	20c8      	movs	r0, #200	; 0xc8
 800463e:	f7ff fc3e 	bl	8003ebe <IR_Shift>

    for (i = 0; i < Length; i++, addr += 2)
 8004642:	2300      	movs	r3, #0
 8004644:	81fb      	strh	r3, [r7, #14]
 8004646:	e02d      	b.n	80046a4 <WriteFLASH+0x120>
    {
        DR_Shift16(0x2408);             // Set RW to write
 8004648:	f242 4008 	movw	r0, #9224	; 0x2408
 800464c:	f7ff fc08 	bl	8003e60 <DR_Shift16>
        IR_Shift(IR_ADDR_16BIT);
 8004650:	20c1      	movs	r0, #193	; 0xc1
 8004652:	f7ff fc34 	bl	8003ebe <IR_Shift>
        DR_Shift16(addr);               // Set address
 8004656:	89bb      	ldrh	r3, [r7, #12]
 8004658:	4618      	mov	r0, r3
 800465a:	f7ff fc01 	bl	8003e60 <DR_Shift16>
        IR_Shift(IR_DATA_TO_ADDR);
 800465e:	20a1      	movs	r0, #161	; 0xa1
 8004660:	f7ff fc2d 	bl	8003ebe <IR_Shift>
        DR_Shift16(DataArray[i]);       // Set data
 8004664:	89fb      	ldrh	r3, [r7, #14]
 8004666:	005b      	lsls	r3, r3, #1
 8004668:	683a      	ldr	r2, [r7, #0]
 800466a:	4413      	add	r3, r2
 800466c:	881b      	ldrh	r3, [r3, #0]
 800466e:	4618      	mov	r0, r3
 8004670:	f7ff fbf6 	bl	8003e60 <DR_Shift16>
        SetTCLK();
 8004674:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004678:	2220      	movs	r2, #32
 800467a:	619a      	str	r2, [r3, #24]
        ClrTCLK();
 800467c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004680:	2220      	movs	r2, #32
 8004682:	629a      	str	r2, [r3, #40]	; 0x28
        IR_Shift(IR_CNTRL_SIG_16BIT);
 8004684:	20c8      	movs	r0, #200	; 0xc8
 8004686:	f7ff fc1a 	bl	8003ebe <IR_Shift>
        DR_Shift16(0x2409);             // Set RW to read
 800468a:	f242 4009 	movw	r0, #9225	; 0x2409
 800468e:	f7ff fbe7 	bl	8003e60 <DR_Shift16>

        TCLKstrobes(30);        // Provide TCLKs, min. 33 for F149 and F449
 8004692:	201e      	movs	r0, #30
 8004694:	f000 fa88 	bl	8004ba8 <TCLKstrobes>
    for (i = 0; i < Length; i++, addr += 2)
 8004698:	89fb      	ldrh	r3, [r7, #14]
 800469a:	3301      	adds	r3, #1
 800469c:	81fb      	strh	r3, [r7, #14]
 800469e:	89bb      	ldrh	r3, [r7, #12]
 80046a0:	3302      	adds	r3, #2
 80046a2:	81bb      	strh	r3, [r7, #12]
 80046a4:	89fa      	ldrh	r2, [r7, #14]
 80046a6:	88bb      	ldrh	r3, [r7, #4]
 80046a8:	429a      	cmp	r2, r3
 80046aa:	d3cd      	bcc.n	8004648 <WriteFLASH+0xc4>
                                // F2xxx: 29 are ok
    }

    IR_Shift(IR_CNTRL_SIG_16BIT);
 80046ac:	20c8      	movs	r0, #200	; 0xc8
 80046ae:	f7ff fc06 	bl	8003ebe <IR_Shift>
    DR_Shift16(0x2408);         // Set RW to write
 80046b2:	f242 4008 	movw	r0, #9224	; 0x2408
 80046b6:	f7ff fbd3 	bl	8003e60 <DR_Shift16>
    IR_Shift(IR_ADDR_16BIT);
 80046ba:	20c1      	movs	r0, #193	; 0xc1
 80046bc:	f7ff fbff 	bl	8003ebe <IR_Shift>
    DR_Shift16(0x0128);         // FCTL1 register
 80046c0:	f44f 7094 	mov.w	r0, #296	; 0x128
 80046c4:	f7ff fbcc 	bl	8003e60 <DR_Shift16>
    IR_Shift(IR_DATA_TO_ADDR);
 80046c8:	20a1      	movs	r0, #161	; 0xa1
 80046ca:	f7ff fbf8 	bl	8003ebe <IR_Shift>
    DR_Shift16(0xA500);         // Disable FLASH write
 80046ce:	f44f 4025 	mov.w	r0, #42240	; 0xa500
 80046d2:	f7ff fbc5 	bl	8003e60 <DR_Shift16>
    SetTCLK();
 80046d6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80046da:	2220      	movs	r2, #32
 80046dc:	619a      	str	r2, [r3, #24]

    // set LOCK-Bits again
    ClrTCLK();
 80046de:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80046e2:	2220      	movs	r2, #32
 80046e4:	629a      	str	r2, [r3, #40]	; 0x28
    IR_Shift(IR_ADDR_16BIT);
 80046e6:	20c1      	movs	r0, #193	; 0xc1
 80046e8:	f7ff fbe9 	bl	8003ebe <IR_Shift>
    DR_Shift16(0x012C);         // FCTL3 address
 80046ec:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80046f0:	f7ff fbb6 	bl	8003e60 <DR_Shift16>
    IR_Shift(IR_DATA_TO_ADDR);
 80046f4:	20a1      	movs	r0, #161	; 0xa1
 80046f6:	f7ff fbe2 	bl	8003ebe <IR_Shift>
    DR_Shift16(FCTL3_val | 0x0010);      // Lock Inf-Seg. A by toggling LOCKA and set LOCK again
 80046fa:	897b      	ldrh	r3, [r7, #10]
 80046fc:	f043 0310 	orr.w	r3, r3, #16
 8004700:	b29b      	uxth	r3, r3
 8004702:	4618      	mov	r0, r3
 8004704:	f7ff fbac 	bl	8003e60 <DR_Shift16>
    SetTCLK();
 8004708:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800470c:	2220      	movs	r2, #32
 800470e:	619a      	str	r2, [r3, #24]

    ReleaseCPU();
 8004710:	f7ff fd10 	bl	8004134 <ReleaseCPU>
}
 8004714:	bf00      	nop
 8004716:	3710      	adds	r7, #16
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}
 800471c:	2000000a 	.word	0x2000000a

08004720 <ReadMem>:
//! \brief This function reads one byte/word from a given address in memory
//! \param[in] word Format (F_BYTE or F_WORD)
//! \param[in] word Addr (address of memory)
//! \return word (content of the addressed memory location)
word ReadMem(word Format, word Addr)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b084      	sub	sp, #16
 8004724:	af00      	add	r7, sp, #0
 8004726:	4603      	mov	r3, r0
 8004728:	460a      	mov	r2, r1
 800472a:	80fb      	strh	r3, [r7, #6]
 800472c:	4613      	mov	r3, r2
 800472e:	80bb      	strh	r3, [r7, #4]
    word TDOword;

    HaltCPU();
 8004730:	f7ff fce4 	bl	80040fc <HaltCPU>

    ClrTCLK();
 8004734:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004738:	2220      	movs	r2, #32
 800473a:	629a      	str	r2, [r3, #40]	; 0x28
    IR_Shift(IR_CNTRL_SIG_16BIT);
 800473c:	20c8      	movs	r0, #200	; 0xc8
 800473e:	f7ff fbbe 	bl	8003ebe <IR_Shift>
    if  (Format == F_WORD)
 8004742:	88fb      	ldrh	r3, [r7, #6]
 8004744:	2b10      	cmp	r3, #16
 8004746:	d104      	bne.n	8004752 <ReadMem+0x32>
    {
        DR_Shift16(0x2409);         // Set word read
 8004748:	f242 4009 	movw	r0, #9225	; 0x2409
 800474c:	f7ff fb88 	bl	8003e60 <DR_Shift16>
 8004750:	e003      	b.n	800475a <ReadMem+0x3a>
    }
    else
    {
        DR_Shift16(0x2419);         // Set byte read
 8004752:	f242 4019 	movw	r0, #9241	; 0x2419
 8004756:	f7ff fb83 	bl	8003e60 <DR_Shift16>
    }
    IR_Shift(IR_ADDR_16BIT);
 800475a:	20c1      	movs	r0, #193	; 0xc1
 800475c:	f7ff fbaf 	bl	8003ebe <IR_Shift>
    DR_Shift16(Addr);               // Set address
 8004760:	88bb      	ldrh	r3, [r7, #4]
 8004762:	4618      	mov	r0, r3
 8004764:	f7ff fb7c 	bl	8003e60 <DR_Shift16>
    IR_Shift(IR_DATA_TO_ADDR);
 8004768:	20a1      	movs	r0, #161	; 0xa1
 800476a:	f7ff fba8 	bl	8003ebe <IR_Shift>
    SetTCLK();
 800476e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004772:	2220      	movs	r2, #32
 8004774:	619a      	str	r2, [r3, #24]

    ClrTCLK();
 8004776:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800477a:	2220      	movs	r2, #32
 800477c:	629a      	str	r2, [r3, #40]	; 0x28
    TDOword = DR_Shift16(0x0000);   // Shift out 16 bits
 800477e:	2000      	movs	r0, #0
 8004780:	f7ff fb6e 	bl	8003e60 <DR_Shift16>
 8004784:	4603      	mov	r3, r0
 8004786:	81fb      	strh	r3, [r7, #14]

    ReleaseCPU();
 8004788:	f7ff fcd4 	bl	8004134 <ReleaseCPU>
    return(Format == F_WORD ? TDOword : TDOword & 0x00FF);
 800478c:	88fb      	ldrh	r3, [r7, #6]
 800478e:	2b10      	cmp	r3, #16
 8004790:	d003      	beq.n	800479a <ReadMem+0x7a>
 8004792:	89fb      	ldrh	r3, [r7, #14]
 8004794:	b2db      	uxtb	r3, r3
 8004796:	b29b      	uxth	r3, r3
 8004798:	e000      	b.n	800479c <ReadMem+0x7c>
 800479a:	89fb      	ldrh	r3, [r7, #14]
}
 800479c:	4618      	mov	r0, r3
 800479e:	3710      	adds	r7, #16
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bd80      	pop	{r7, pc}

080047a4 <ReadMemQuick>:
//! \brief This function reads an array of words from the memory.
//! \param[in] word StartAddr (Start address of memory to be read)
//! \param[in] word Length (Number of words to be read)
//! \param[out] word *DataArray (Pointer to array for the data)
void ReadMemQuick(word StartAddr, word Length, word *DataArray)
{
 80047a4:	b590      	push	{r4, r7, lr}
 80047a6:	b085      	sub	sp, #20
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	4603      	mov	r3, r0
 80047ac:	603a      	str	r2, [r7, #0]
 80047ae:	80fb      	strh	r3, [r7, #6]
 80047b0:	460b      	mov	r3, r1
 80047b2:	80bb      	strh	r3, [r7, #4]
    word i;

    // Initialize reading:
    SetPC(StartAddr-4);
 80047b4:	88fb      	ldrh	r3, [r7, #6]
 80047b6:	3b04      	subs	r3, #4
 80047b8:	b29b      	uxth	r3, r3
 80047ba:	4618      	mov	r0, r3
 80047bc:	f7ff fc63 	bl	8004086 <SetPC>
    HaltCPU();
 80047c0:	f7ff fc9c 	bl	80040fc <HaltCPU>

    ClrTCLK();
 80047c4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80047c8:	2220      	movs	r2, #32
 80047ca:	629a      	str	r2, [r3, #40]	; 0x28
    IR_Shift(IR_CNTRL_SIG_16BIT);
 80047cc:	20c8      	movs	r0, #200	; 0xc8
 80047ce:	f7ff fb76 	bl	8003ebe <IR_Shift>
    DR_Shift16(0x2409);                    // Set RW to read
 80047d2:	f242 4009 	movw	r0, #9225	; 0x2409
 80047d6:	f7ff fb43 	bl	8003e60 <DR_Shift16>
    IR_Shift(IR_DATA_QUICK);
 80047da:	20c2      	movs	r0, #194	; 0xc2
 80047dc:	f7ff fb6f 	bl	8003ebe <IR_Shift>

    for (i = 0; i < Length; i++)
 80047e0:	2300      	movs	r3, #0
 80047e2:	81fb      	strh	r3, [r7, #14]
 80047e4:	e013      	b.n	800480e <ReadMemQuick+0x6a>
    {
        SetTCLK();
 80047e6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80047ea:	2220      	movs	r2, #32
 80047ec:	619a      	str	r2, [r3, #24]
        DataArray[i] = DR_Shift16(0x0000); // Shift out the data
 80047ee:	89fb      	ldrh	r3, [r7, #14]
 80047f0:	005b      	lsls	r3, r3, #1
 80047f2:	683a      	ldr	r2, [r7, #0]
 80047f4:	18d4      	adds	r4, r2, r3
 80047f6:	2000      	movs	r0, #0
 80047f8:	f7ff fb32 	bl	8003e60 <DR_Shift16>
 80047fc:	4603      	mov	r3, r0
 80047fe:	8023      	strh	r3, [r4, #0]
                                           // from the target.
        ClrTCLK();
 8004800:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004804:	2220      	movs	r2, #32
 8004806:	629a      	str	r2, [r3, #40]	; 0x28
    for (i = 0; i < Length; i++)
 8004808:	89fb      	ldrh	r3, [r7, #14]
 800480a:	3301      	adds	r3, #1
 800480c:	81fb      	strh	r3, [r7, #14]
 800480e:	89fa      	ldrh	r2, [r7, #14]
 8004810:	88bb      	ldrh	r3, [r7, #4]
 8004812:	429a      	cmp	r2, r3
 8004814:	d3e7      	bcc.n	80047e6 <ReadMemQuick+0x42>
    }
    ReleaseCPU();
 8004816:	f7ff fc8d 	bl	8004134 <ReleaseCPU>
}
 800481a:	bf00      	nop
 800481c:	3714      	adds	r7, #20
 800481e:	46bd      	mov	sp, r7
 8004820:	bd90      	pop	{r4, r7, pc}
	...

08004824 <EraseFLASH>:
//! Large memory devices get additional mass erase operations to meet the spec.
//! (Could be extended with erase check via PSA)
//! \param[in] word Mode (could be ERASE_MASS or ERASE_MAIN or ERASE_SGMT)
//! \param[in] word Addr (any address within the selected segment)
void EraseFLASH(word EraseMode, word EraseAddr)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b084      	sub	sp, #16
 8004828:	af00      	add	r7, sp, #0
 800482a:	4603      	mov	r3, r0
 800482c:	460a      	mov	r2, r1
 800482e:	80fb      	strh	r3, [r7, #6]
 8004830:	4613      	mov	r3, r2
 8004832:	80bb      	strh	r3, [r7, #4]
#ifdef ixx_family
    word StrobeAmount = 9628;       // ixx family requires additional TCLKs due
                                    // due to larger segment size
#else
    word StrobeAmount = 4819;       // default for Segment Erase
 8004834:	f241 23d3 	movw	r3, #4819	; 0x12d3
 8004838:	81fb      	strh	r3, [r7, #14]
#endif
	word i, loopcount = 1;          // erase cycle repeating for Mass Erase
 800483a:	2301      	movs	r3, #1
 800483c:	817b      	strh	r3, [r7, #10]
    word FCTL3_val = SegmentInfoAKey;   // SegmentInfoAKey holds Lock-Key for Info
 800483e:	4b66      	ldr	r3, [pc, #408]	; (80049d8 <EraseFLASH+0x1b4>)
 8004840:	881b      	ldrh	r3, [r3, #0]
 8004842:	813b      	strh	r3, [r7, #8]
                                        // Seg. A     

    if ((EraseMode == ERASE_MASS) || (EraseMode == ERASE_MAIN))
 8004844:	88fb      	ldrh	r3, [r7, #6]
 8004846:	f24a 5206 	movw	r2, #42246	; 0xa506
 800484a:	4293      	cmp	r3, r2
 800484c:	d004      	beq.n	8004858 <EraseFLASH+0x34>
 800484e:	88fb      	ldrh	r3, [r7, #6]
 8004850:	f24a 5204 	movw	r2, #42244	; 0xa504
 8004854:	4293      	cmp	r3, r2
 8004856:	d10d      	bne.n	8004874 <EraseFLASH+0x50>
    {
        if(DeviceHas_FastFlash())
 8004858:	f7ff fad6 	bl	8003e08 <DeviceHas_FastFlash>
 800485c:	4603      	mov	r3, r0
 800485e:	2b00      	cmp	r3, #0
 8004860:	d003      	beq.n	800486a <EraseFLASH+0x46>
        {
            StrobeAmount = 10593;        // Larger Flash memories require
 8004862:	f642 1361 	movw	r3, #10593	; 0x2961
 8004866:	81fb      	strh	r3, [r7, #14]
 8004868:	e004      	b.n	8004874 <EraseFLASH+0x50>
        }
        else
        {
            StrobeAmount = 5300;        // Larger Flash memories require
 800486a:	f241 43b4 	movw	r3, #5300	; 0x14b4
 800486e:	81fb      	strh	r3, [r7, #14]
            loopcount = 19;             // additional cycles for erase.
 8004870:	2313      	movs	r3, #19
 8004872:	817b      	strh	r3, [r7, #10]
        }
    }
    HaltCPU();
 8004874:	f7ff fc42 	bl	80040fc <HaltCPU>

    for (i = loopcount; i > 0; i--)
 8004878:	897b      	ldrh	r3, [r7, #10]
 800487a:	81bb      	strh	r3, [r7, #12]
 800487c:	e089      	b.n	8004992 <EraseFLASH+0x16e>
    {
        ClrTCLK();
 800487e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004882:	2220      	movs	r2, #32
 8004884:	629a      	str	r2, [r3, #40]	; 0x28
        IR_Shift(IR_CNTRL_SIG_16BIT);
 8004886:	20c8      	movs	r0, #200	; 0xc8
 8004888:	f7ff fb19 	bl	8003ebe <IR_Shift>
        DR_Shift16(0x2408);         // set RW to write
 800488c:	f242 4008 	movw	r0, #9224	; 0x2408
 8004890:	f7ff fae6 	bl	8003e60 <DR_Shift16>
        IR_Shift(IR_ADDR_16BIT);
 8004894:	20c1      	movs	r0, #193	; 0xc1
 8004896:	f7ff fb12 	bl	8003ebe <IR_Shift>
        DR_Shift16(0x0128);         // FCTL1 address
 800489a:	f44f 7094 	mov.w	r0, #296	; 0x128
 800489e:	f7ff fadf 	bl	8003e60 <DR_Shift16>
        IR_Shift(IR_DATA_TO_ADDR);
 80048a2:	20a1      	movs	r0, #161	; 0xa1
 80048a4:	f7ff fb0b 	bl	8003ebe <IR_Shift>
        DR_Shift16(EraseMode);      // Enable erase mode
 80048a8:	88fb      	ldrh	r3, [r7, #6]
 80048aa:	4618      	mov	r0, r3
 80048ac:	f7ff fad8 	bl	8003e60 <DR_Shift16>
        SetTCLK();
 80048b0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80048b4:	2220      	movs	r2, #32
 80048b6:	619a      	str	r2, [r3, #24]

        ClrTCLK();
 80048b8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80048bc:	2220      	movs	r2, #32
 80048be:	629a      	str	r2, [r3, #40]	; 0x28
        IR_Shift(IR_ADDR_16BIT);
 80048c0:	20c1      	movs	r0, #193	; 0xc1
 80048c2:	f7ff fafc 	bl	8003ebe <IR_Shift>
        DR_Shift16(0x012A);         // FCTL2 address
 80048c6:	f44f 7095 	mov.w	r0, #298	; 0x12a
 80048ca:	f7ff fac9 	bl	8003e60 <DR_Shift16>
        IR_Shift(IR_DATA_TO_ADDR);
 80048ce:	20a1      	movs	r0, #161	; 0xa1
 80048d0:	f7ff faf5 	bl	8003ebe <IR_Shift>
        DR_Shift16(0xA540);         // MCLK is source, DIV=1
 80048d4:	f24a 5040 	movw	r0, #42304	; 0xa540
 80048d8:	f7ff fac2 	bl	8003e60 <DR_Shift16>
        SetTCLK();
 80048dc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80048e0:	2220      	movs	r2, #32
 80048e2:	619a      	str	r2, [r3, #24]

        ClrTCLK();
 80048e4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80048e8:	2220      	movs	r2, #32
 80048ea:	629a      	str	r2, [r3, #40]	; 0x28
        IR_Shift(IR_ADDR_16BIT);
 80048ec:	20c1      	movs	r0, #193	; 0xc1
 80048ee:	f7ff fae6 	bl	8003ebe <IR_Shift>
        DR_Shift16(0x012C);         // FCTL3 address
 80048f2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80048f6:	f7ff fab3 	bl	8003e60 <DR_Shift16>
        IR_Shift(IR_DATA_TO_ADDR);
 80048fa:	20a1      	movs	r0, #161	; 0xa1
 80048fc:	f7ff fadf 	bl	8003ebe <IR_Shift>
        DR_Shift16(FCTL3_val);      // Clear FCTL3; F2xxx: Unlock Info-Seg. A by toggling LOCKA-Bit if required,
 8004900:	893b      	ldrh	r3, [r7, #8]
 8004902:	4618      	mov	r0, r3
 8004904:	f7ff faac 	bl	8003e60 <DR_Shift16>
        SetTCLK();
 8004908:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800490c:	2220      	movs	r2, #32
 800490e:	619a      	str	r2, [r3, #24]

        ClrTCLK();
 8004910:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004914:	2220      	movs	r2, #32
 8004916:	629a      	str	r2, [r3, #40]	; 0x28
        IR_Shift(IR_ADDR_16BIT);
 8004918:	20c1      	movs	r0, #193	; 0xc1
 800491a:	f7ff fad0 	bl	8003ebe <IR_Shift>
        DR_Shift16(EraseAddr);      // Set erase address
 800491e:	88bb      	ldrh	r3, [r7, #4]
 8004920:	4618      	mov	r0, r3
 8004922:	f7ff fa9d 	bl	8003e60 <DR_Shift16>
        IR_Shift(IR_DATA_TO_ADDR);
 8004926:	20a1      	movs	r0, #161	; 0xa1
 8004928:	f7ff fac9 	bl	8003ebe <IR_Shift>
        DR_Shift16(0x55AA);         // Dummy write to start erase
 800492c:	f245 50aa 	movw	r0, #21930	; 0x55aa
 8004930:	f7ff fa96 	bl	8003e60 <DR_Shift16>
        SetTCLK();
 8004934:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004938:	2220      	movs	r2, #32
 800493a:	619a      	str	r2, [r3, #24]

        ClrTCLK();
 800493c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004940:	2220      	movs	r2, #32
 8004942:	629a      	str	r2, [r3, #40]	; 0x28
        IR_Shift(IR_CNTRL_SIG_16BIT);
 8004944:	20c8      	movs	r0, #200	; 0xc8
 8004946:	f7ff faba 	bl	8003ebe <IR_Shift>
        DR_Shift16(0x2409);         // Set RW to read
 800494a:	f242 4009 	movw	r0, #9225	; 0x2409
 800494e:	f7ff fa87 	bl	8003e60 <DR_Shift16>
        TCLKstrobes(StrobeAmount);  // Provide TCLKs
 8004952:	89fb      	ldrh	r3, [r7, #14]
 8004954:	4618      	mov	r0, r3
 8004956:	f000 f927 	bl	8004ba8 <TCLKstrobes>
        IR_Shift(IR_CNTRL_SIG_16BIT);
 800495a:	20c8      	movs	r0, #200	; 0xc8
 800495c:	f7ff faaf 	bl	8003ebe <IR_Shift>
        DR_Shift16(0x2408);         // Set RW to write
 8004960:	f242 4008 	movw	r0, #9224	; 0x2408
 8004964:	f7ff fa7c 	bl	8003e60 <DR_Shift16>
        IR_Shift(IR_ADDR_16BIT);
 8004968:	20c1      	movs	r0, #193	; 0xc1
 800496a:	f7ff faa8 	bl	8003ebe <IR_Shift>
        DR_Shift16(0x0128);         // FCTL1 address
 800496e:	f44f 7094 	mov.w	r0, #296	; 0x128
 8004972:	f7ff fa75 	bl	8003e60 <DR_Shift16>
        IR_Shift(IR_DATA_TO_ADDR);
 8004976:	20a1      	movs	r0, #161	; 0xa1
 8004978:	f7ff faa1 	bl	8003ebe <IR_Shift>
        DR_Shift16(0xA500);         // Disable erase
 800497c:	f44f 4025 	mov.w	r0, #42240	; 0xa500
 8004980:	f7ff fa6e 	bl	8003e60 <DR_Shift16>
        SetTCLK();
 8004984:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004988:	2220      	movs	r2, #32
 800498a:	619a      	str	r2, [r3, #24]
    for (i = loopcount; i > 0; i--)
 800498c:	89bb      	ldrh	r3, [r7, #12]
 800498e:	3b01      	subs	r3, #1
 8004990:	81bb      	strh	r3, [r7, #12]
 8004992:	89bb      	ldrh	r3, [r7, #12]
 8004994:	2b00      	cmp	r3, #0
 8004996:	f47f af72 	bne.w	800487e <EraseFLASH+0x5a>
    }
    // set LOCK-Bits again
    ClrTCLK();
 800499a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800499e:	2220      	movs	r2, #32
 80049a0:	629a      	str	r2, [r3, #40]	; 0x28
    IR_Shift(IR_ADDR_16BIT);
 80049a2:	20c1      	movs	r0, #193	; 0xc1
 80049a4:	f7ff fa8b 	bl	8003ebe <IR_Shift>
    DR_Shift16(0x012C);         // FCTL3 address
 80049a8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80049ac:	f7ff fa58 	bl	8003e60 <DR_Shift16>
    IR_Shift(IR_DATA_TO_ADDR);
 80049b0:	20a1      	movs	r0, #161	; 0xa1
 80049b2:	f7ff fa84 	bl	8003ebe <IR_Shift>
    DR_Shift16(FCTL3_val | 0x0010);      // Lock Inf-Seg. A by toggling LOCKA (F2xxx) and set LOCK again
 80049b6:	893b      	ldrh	r3, [r7, #8]
 80049b8:	f043 0310 	orr.w	r3, r3, #16
 80049bc:	b29b      	uxth	r3, r3
 80049be:	4618      	mov	r0, r3
 80049c0:	f7ff fa4e 	bl	8003e60 <DR_Shift16>
    SetTCLK();
 80049c4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80049c8:	2220      	movs	r2, #32
 80049ca:	619a      	str	r2, [r3, #24]

    ReleaseCPU();    
 80049cc:	f7ff fbb2 	bl	8004134 <ReleaseCPU>
}
 80049d0:	bf00      	nop
 80049d2:	3710      	adds	r7, #16
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd80      	pop	{r7, pc}
 80049d8:	2000000a 	.word	0x2000000a

080049dc <EraseCheck>:
//! \param[in] word StartAddr (Start address of memory to be checked)
//! \param[in] word Length (Number of words to be checked)
//! \return word (STATUS_OK if erase check was successful, STATUS_ERROR 
//! otherwise)
word EraseCheck(word StartAddr, word Length)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b082      	sub	sp, #8
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	4603      	mov	r3, r0
 80049e4:	460a      	mov	r2, r1
 80049e6:	80fb      	strh	r3, [r7, #6]
 80049e8:	4613      	mov	r3, r2
 80049ea:	80bb      	strh	r3, [r7, #4]
    return (VerifyPSA(StartAddr, Length, 0));
 80049ec:	88b9      	ldrh	r1, [r7, #4]
 80049ee:	88fb      	ldrh	r3, [r7, #6]
 80049f0:	2200      	movs	r2, #0
 80049f2:	4618      	mov	r0, r3
 80049f4:	f7ff fbb4 	bl	8004160 <VerifyPSA>
 80049f8:	4603      	mov	r3, r0
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3708      	adds	r7, #8
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}

08004a02 <VerifyMem>:
//! \param[in] word Length (Number of words to be verified)
//! \param[in] word *DataArray (Pointer to array with the data)
//! \return word (STATUS_OK if verification was successful, STATUS_ERROR
//! otherwise)
word VerifyMem(word StartAddr, word Length, word *DataArray)
{
 8004a02:	b580      	push	{r7, lr}
 8004a04:	b082      	sub	sp, #8
 8004a06:	af00      	add	r7, sp, #0
 8004a08:	4603      	mov	r3, r0
 8004a0a:	603a      	str	r2, [r7, #0]
 8004a0c:	80fb      	strh	r3, [r7, #6]
 8004a0e:	460b      	mov	r3, r1
 8004a10:	80bb      	strh	r3, [r7, #4]
    return (VerifyPSA(StartAddr, Length, DataArray));
 8004a12:	88b9      	ldrh	r1, [r7, #4]
 8004a14:	88fb      	ldrh	r3, [r7, #6]
 8004a16:	683a      	ldr	r2, [r7, #0]
 8004a18:	4618      	mov	r0, r3
 8004a1a:	f7ff fba1 	bl	8004160 <VerifyPSA>
 8004a1e:	4603      	mov	r3, r0
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	3708      	adds	r7, #8
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}

08004a28 <IsFuseBlown>:

//------------------------------------------------------------------------
//! \brief This function checks if the JTAG access security fuse is blown.
//! \return word (STATUS_OK if fuse is blown, STATUS_ERROR otherwise)
word IsFuseBlown(void)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b082      	sub	sp, #8
 8004a2c:	af00      	add	r7, sp, #0
    word i;

    for (i = 3; i > 0; i--)     //  First trial could be wrong
 8004a2e:	2303      	movs	r3, #3
 8004a30:	80fb      	strh	r3, [r7, #6]
 8004a32:	e011      	b.n	8004a58 <IsFuseBlown+0x30>
    {
        IR_Shift(IR_CNTRL_SIG_CAPTURE);
 8004a34:	2028      	movs	r0, #40	; 0x28
 8004a36:	f7ff fa42 	bl	8003ebe <IR_Shift>
        if (DR_Shift16(0xAAAA) == 0x5555)
 8004a3a:	f64a 20aa 	movw	r0, #43690	; 0xaaaa
 8004a3e:	f7ff fa0f 	bl	8003e60 <DR_Shift16>
 8004a42:	4603      	mov	r3, r0
 8004a44:	461a      	mov	r2, r3
 8004a46:	f245 5355 	movw	r3, #21845	; 0x5555
 8004a4a:	429a      	cmp	r2, r3
 8004a4c:	d101      	bne.n	8004a52 <IsFuseBlown+0x2a>
        {
            return(STATUS_OK);  // Fuse is blown
 8004a4e:	2301      	movs	r3, #1
 8004a50:	e006      	b.n	8004a60 <IsFuseBlown+0x38>
    for (i = 3; i > 0; i--)     //  First trial could be wrong
 8004a52:	88fb      	ldrh	r3, [r7, #6]
 8004a54:	3b01      	subs	r3, #1
 8004a56:	80fb      	strh	r3, [r7, #6]
 8004a58:	88fb      	ldrh	r3, [r7, #6]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d1ea      	bne.n	8004a34 <IsFuseBlown+0xc>
        }
    }
    return(STATUS_ERROR);       // fuse is not blown
 8004a5e:	2300      	movs	r3, #0
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	3708      	adds	r7, #8
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}

08004a68 <Shift>:
//! \param[in] Format (number of bits shifted, 8 (F_BYTE), 16 (F_WORD), 
//! 20 (F_ADDR) or 32 (F_LONG))
//! \param[in] Data (data to be shifted into TDI)
//! \return unsigned long (scanned TDO value)
word Shift(word Format, word Data)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b085      	sub	sp, #20
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	4603      	mov	r3, r0
 8004a70:	460a      	mov	r2, r1
 8004a72:	80fb      	strh	r3, [r7, #6]
 8004a74:	4613      	mov	r3, r2
 8004a76:	80bb      	strh	r3, [r7, #4]
    word tclk = StoreTCLK();        // Store TCLK state;
 8004a78:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004a7c:	695b      	ldr	r3, [r3, #20]
 8004a7e:	b29b      	uxth	r3, r3
 8004a80:	f003 0320 	and.w	r3, r3, #32
 8004a84:	817b      	strh	r3, [r7, #10]
    word TDOword = 0x0000;          // Initialize shifted-in word
 8004a86:	2300      	movs	r3, #0
 8004a88:	81fb      	strh	r3, [r7, #14]
    word MSB = 0x0000;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	81bb      	strh	r3, [r7, #12]

    // Shift via port pins, no coding necessary
    volatile word i;
   (Format == F_WORD) ? (MSB = 0x8000) : (MSB = 0x80);
 8004a8e:	88fb      	ldrh	r3, [r7, #6]
 8004a90:	2b10      	cmp	r3, #16
 8004a92:	d103      	bne.n	8004a9c <Shift+0x34>
 8004a94:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a98:	81bb      	strh	r3, [r7, #12]
 8004a9a:	e001      	b.n	8004aa0 <Shift+0x38>
 8004a9c:	2380      	movs	r3, #128	; 0x80
 8004a9e:	81bb      	strh	r3, [r7, #12]
   for (i = Format; i > 0; i--)
 8004aa0:	88fb      	ldrh	r3, [r7, #6]
 8004aa2:	813b      	strh	r3, [r7, #8]
 8004aa4:	e033      	b.n	8004b0e <Shift+0xa6>
   {
		if((Data & MSB) == 0)
 8004aa6:	88ba      	ldrh	r2, [r7, #4]
 8004aa8:	89bb      	ldrh	r3, [r7, #12]
 8004aaa:	4013      	ands	r3, r2
 8004aac:	b29b      	uxth	r3, r3
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d104      	bne.n	8004abc <Shift+0x54>
		{
			ClrTDI();
 8004ab2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004ab6:	2220      	movs	r2, #32
 8004ab8:	629a      	str	r2, [r3, #40]	; 0x28
 8004aba:	e003      	b.n	8004ac4 <Shift+0x5c>
		}
		else
		{
			SetTDI();
 8004abc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004ac0:	2220      	movs	r2, #32
 8004ac2:	619a      	str	r2, [r3, #24]
		}
        Data <<= 1;
 8004ac4:	88bb      	ldrh	r3, [r7, #4]
 8004ac6:	005b      	lsls	r3, r3, #1
 8004ac8:	80bb      	strh	r3, [r7, #4]
        if (i == 1)                 // Last bit requires TMS=1
 8004aca:	893b      	ldrh	r3, [r7, #8]
 8004acc:	b29b      	uxth	r3, r3
 8004ace:	2b01      	cmp	r3, #1
 8004ad0:	d103      	bne.n	8004ada <Shift+0x72>
        {
            SetTMS();
 8004ad2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004ad6:	2208      	movs	r2, #8
 8004ad8:	619a      	str	r2, [r3, #24]
        }
        ClrTCK();
 8004ada:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004ade:	2210      	movs	r2, #16
 8004ae0:	629a      	str	r2, [r3, #40]	; 0x28
        SetTCK();
 8004ae2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004ae6:	2210      	movs	r2, #16
 8004ae8:	619a      	str	r2, [r3, #24]
        TDOword <<= 1;              // TDO could be any port pin
 8004aea:	89fb      	ldrh	r3, [r7, #14]
 8004aec:	005b      	lsls	r3, r3, #1
 8004aee:	81fb      	strh	r3, [r7, #14]
        if (ScanTDO() != 0)
 8004af0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004af4:	691b      	ldr	r3, [r3, #16]
 8004af6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d002      	beq.n	8004b04 <Shift+0x9c>
        {          
            TDOword++;
 8004afe:	89fb      	ldrh	r3, [r7, #14]
 8004b00:	3301      	adds	r3, #1
 8004b02:	81fb      	strh	r3, [r7, #14]
   for (i = Format; i > 0; i--)
 8004b04:	893b      	ldrh	r3, [r7, #8]
 8004b06:	b29b      	uxth	r3, r3
 8004b08:	3b01      	subs	r3, #1
 8004b0a:	b29b      	uxth	r3, r3
 8004b0c:	813b      	strh	r3, [r7, #8]
 8004b0e:	893b      	ldrh	r3, [r7, #8]
 8004b10:	b29b      	uxth	r3, r3
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d1c7      	bne.n	8004aa6 <Shift+0x3e>
        }
    }
    // common exit
    RestoreTCLK(tclk);                  // restore TCLK state
 8004b16:	897b      	ldrh	r3, [r7, #10]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d104      	bne.n	8004b26 <Shift+0xbe>
 8004b1c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004b20:	2220      	movs	r2, #32
 8004b22:	629a      	str	r2, [r3, #40]	; 0x28
 8004b24:	e003      	b.n	8004b2e <Shift+0xc6>
 8004b26:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004b2a:	2220      	movs	r2, #32
 8004b2c:	619a      	str	r2, [r3, #24]
    
    // JTAG FSM = Exit-DR
    ClrTCK();
 8004b2e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004b32:	2210      	movs	r2, #16
 8004b34:	629a      	str	r2, [r3, #40]	; 0x28
    SetTCK();
 8004b36:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004b3a:	2210      	movs	r2, #16
 8004b3c:	619a      	str	r2, [r3, #24]
    // JTAG FSM = Update-DR
    ClrTMS();
 8004b3e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004b42:	2208      	movs	r2, #8
 8004b44:	629a      	str	r2, [r3, #40]	; 0x28
    ClrTCK();
 8004b46:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004b4a:	2210      	movs	r2, #16
 8004b4c:	629a      	str	r2, [r3, #40]	; 0x28
    SetTCK();
 8004b4e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004b52:	2210      	movs	r2, #16
 8004b54:	619a      	str	r2, [r3, #24]
    // JTAG FSM = Run-Test/Idle
    return(TDOword);
 8004b56:	89fb      	ldrh	r3, [r7, #14]
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	3714      	adds	r7, #20
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b62:	4770      	bx	lr

08004b64 <usDelay>:

//----------------------------------------------------------------------------
//! \brief Delay function (resolution is ~1 us)
//! \param[in] microseconds (number of ms, max number is 0xFFFF)
void usDelay(word microseconds)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b083      	sub	sp, #12
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	80fb      	strh	r3, [r7, #6]
    do
    {	// 16 noops should be about 1us when HCLK is 16MHZ
    	__NOP();
 8004b6e:	bf00      	nop
        __NOP();
 8004b70:	bf00      	nop
        __NOP();
 8004b72:	bf00      	nop
        __NOP();
 8004b74:	bf00      	nop
        __NOP();
 8004b76:	bf00      	nop
        __NOP();
 8004b78:	bf00      	nop
        __NOP();
 8004b7a:	bf00      	nop
        __NOP();
 8004b7c:	bf00      	nop
        __NOP();
 8004b7e:	bf00      	nop
        __NOP();
 8004b80:	bf00      	nop
        __NOP();
 8004b82:	bf00      	nop
        __NOP();
 8004b84:	bf00      	nop
        __NOP();
 8004b86:	bf00      	nop
        __NOP();
 8004b88:	bf00      	nop
        __NOP();
 8004b8a:	bf00      	nop
        __NOP();
 8004b8c:	bf00      	nop
    }
    while (--microseconds > 0);
 8004b8e:	88fb      	ldrh	r3, [r7, #6]
 8004b90:	3b01      	subs	r3, #1
 8004b92:	80fb      	strh	r3, [r7, #6]
 8004b94:	88fb      	ldrh	r3, [r7, #6]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d1e9      	bne.n	8004b6e <usDelay+0xa>
}
 8004b9a:	bf00      	nop
 8004b9c:	bf00      	nop
 8004b9e:	370c      	adds	r7, #12
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba6:	4770      	bx	lr

08004ba8 <TCLKstrobes>:
//! Used freq. in procedure - 400 kHz\n
//! User knows target frequency, instruction cycles, C implementation.\n
//! No. of MCKL cycles - 18MHz/400 kHz = 45 or 12MHz/400 kHz = 30
//! \param[in] Amount (number of strobes to be generated)
void TCLKstrobes(word Amount)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b085      	sub	sp, #20
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	4603      	mov	r3, r0
 8004bb0:	80fb      	strh	r3, [r7, #6]
    // DO NOT MODIFY IT !

    // assuming we have 16MHZ clock, for 400KHz strokes, need 2.5us period.
    // this is 40 cycles.

	for (i = Amount; i > 0; i--) {
 8004bb2:	88fb      	ldrh	r3, [r7, #6]
 8004bb4:	81fb      	strh	r3, [r7, #14]
 8004bb6:	e02c      	b.n	8004c12 <TCLKstrobes+0x6a>
		SetTCLK();	// 19 NOPs each = 40 instructions total per for loop iter.
 8004bb8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004bbc:	2220      	movs	r2, #32
 8004bbe:	619a      	str	r2, [r3, #24]

		__NOP();
 8004bc0:	bf00      	nop
		__NOP();
 8004bc2:	bf00      	nop
		__NOP();
 8004bc4:	bf00      	nop
		__NOP();
 8004bc6:	bf00      	nop
		__NOP();
 8004bc8:	bf00      	nop
		__NOP();
 8004bca:	bf00      	nop
		__NOP();
 8004bcc:	bf00      	nop
		__NOP();
 8004bce:	bf00      	nop
		__NOP();
 8004bd0:	bf00      	nop
		__NOP();
 8004bd2:	bf00      	nop
		__NOP();
 8004bd4:	bf00      	nop
		__NOP();
 8004bd6:	bf00      	nop
		__NOP();
 8004bd8:	bf00      	nop
		__NOP();
 8004bda:	bf00      	nop
		__NOP();
 8004bdc:	bf00      	nop
		__NOP();
 8004bde:	bf00      	nop
		__NOP();
 8004be0:	bf00      	nop
		__NOP();
 8004be2:	bf00      	nop
		__NOP();
 8004be4:	bf00      	nop

		ClrTCLK();
 8004be6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004bea:	2220      	movs	r2, #32
 8004bec:	629a      	str	r2, [r3, #40]	; 0x28

		__NOP();
 8004bee:	bf00      	nop
		__NOP();
 8004bf0:	bf00      	nop
		__NOP();
 8004bf2:	bf00      	nop
		__NOP();
 8004bf4:	bf00      	nop
		__NOP();
 8004bf6:	bf00      	nop
		__NOP();
 8004bf8:	bf00      	nop
		__NOP();
 8004bfa:	bf00      	nop
		__NOP();
 8004bfc:	bf00      	nop
		__NOP();
 8004bfe:	bf00      	nop
		__NOP();
 8004c00:	bf00      	nop
		__NOP();
 8004c02:	bf00      	nop
		__NOP();
 8004c04:	bf00      	nop
		__NOP();
 8004c06:	bf00      	nop
	for (i = Amount; i > 0; i--) {
 8004c08:	89fb      	ldrh	r3, [r7, #14]
 8004c0a:	b29b      	uxth	r3, r3
 8004c0c:	3b01      	subs	r3, #1
 8004c0e:	b29b      	uxth	r3, r3
 8004c10:	81fb      	strh	r3, [r7, #14]
 8004c12:	89fb      	ldrh	r3, [r7, #14]
 8004c14:	b29b      	uxth	r3, r3
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d1ce      	bne.n	8004bb8 <TCLKstrobes+0x10>
//		__NOP();
//		__NOP();
//		__NOP();

	}
}
 8004c1a:	bf00      	nop
 8004c1c:	bf00      	nop
 8004c1e:	3714      	adds	r7, #20
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr

08004c28 <malloc>:
 8004c28:	4b02      	ldr	r3, [pc, #8]	; (8004c34 <malloc+0xc>)
 8004c2a:	4601      	mov	r1, r0
 8004c2c:	6818      	ldr	r0, [r3, #0]
 8004c2e:	f000 b82b 	b.w	8004c88 <_malloc_r>
 8004c32:	bf00      	nop
 8004c34:	20000064 	.word	0x20000064

08004c38 <free>:
 8004c38:	4b02      	ldr	r3, [pc, #8]	; (8004c44 <free+0xc>)
 8004c3a:	4601      	mov	r1, r0
 8004c3c:	6818      	ldr	r0, [r3, #0]
 8004c3e:	f000 bb45 	b.w	80052cc <_free_r>
 8004c42:	bf00      	nop
 8004c44:	20000064 	.word	0x20000064

08004c48 <sbrk_aligned>:
 8004c48:	b570      	push	{r4, r5, r6, lr}
 8004c4a:	4e0e      	ldr	r6, [pc, #56]	; (8004c84 <sbrk_aligned+0x3c>)
 8004c4c:	460c      	mov	r4, r1
 8004c4e:	6831      	ldr	r1, [r6, #0]
 8004c50:	4605      	mov	r5, r0
 8004c52:	b911      	cbnz	r1, 8004c5a <sbrk_aligned+0x12>
 8004c54:	f000 fade 	bl	8005214 <_sbrk_r>
 8004c58:	6030      	str	r0, [r6, #0]
 8004c5a:	4621      	mov	r1, r4
 8004c5c:	4628      	mov	r0, r5
 8004c5e:	f000 fad9 	bl	8005214 <_sbrk_r>
 8004c62:	1c43      	adds	r3, r0, #1
 8004c64:	d00a      	beq.n	8004c7c <sbrk_aligned+0x34>
 8004c66:	1cc4      	adds	r4, r0, #3
 8004c68:	f024 0403 	bic.w	r4, r4, #3
 8004c6c:	42a0      	cmp	r0, r4
 8004c6e:	d007      	beq.n	8004c80 <sbrk_aligned+0x38>
 8004c70:	1a21      	subs	r1, r4, r0
 8004c72:	4628      	mov	r0, r5
 8004c74:	f000 face 	bl	8005214 <_sbrk_r>
 8004c78:	3001      	adds	r0, #1
 8004c7a:	d101      	bne.n	8004c80 <sbrk_aligned+0x38>
 8004c7c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004c80:	4620      	mov	r0, r4
 8004c82:	bd70      	pop	{r4, r5, r6, pc}
 8004c84:	2000011c 	.word	0x2000011c

08004c88 <_malloc_r>:
 8004c88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c8c:	1ccd      	adds	r5, r1, #3
 8004c8e:	f025 0503 	bic.w	r5, r5, #3
 8004c92:	3508      	adds	r5, #8
 8004c94:	2d0c      	cmp	r5, #12
 8004c96:	bf38      	it	cc
 8004c98:	250c      	movcc	r5, #12
 8004c9a:	2d00      	cmp	r5, #0
 8004c9c:	4607      	mov	r7, r0
 8004c9e:	db01      	blt.n	8004ca4 <_malloc_r+0x1c>
 8004ca0:	42a9      	cmp	r1, r5
 8004ca2:	d905      	bls.n	8004cb0 <_malloc_r+0x28>
 8004ca4:	230c      	movs	r3, #12
 8004ca6:	603b      	str	r3, [r7, #0]
 8004ca8:	2600      	movs	r6, #0
 8004caa:	4630      	mov	r0, r6
 8004cac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004cb0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004d84 <_malloc_r+0xfc>
 8004cb4:	f000 f868 	bl	8004d88 <__malloc_lock>
 8004cb8:	f8d8 3000 	ldr.w	r3, [r8]
 8004cbc:	461c      	mov	r4, r3
 8004cbe:	bb5c      	cbnz	r4, 8004d18 <_malloc_r+0x90>
 8004cc0:	4629      	mov	r1, r5
 8004cc2:	4638      	mov	r0, r7
 8004cc4:	f7ff ffc0 	bl	8004c48 <sbrk_aligned>
 8004cc8:	1c43      	adds	r3, r0, #1
 8004cca:	4604      	mov	r4, r0
 8004ccc:	d155      	bne.n	8004d7a <_malloc_r+0xf2>
 8004cce:	f8d8 4000 	ldr.w	r4, [r8]
 8004cd2:	4626      	mov	r6, r4
 8004cd4:	2e00      	cmp	r6, #0
 8004cd6:	d145      	bne.n	8004d64 <_malloc_r+0xdc>
 8004cd8:	2c00      	cmp	r4, #0
 8004cda:	d048      	beq.n	8004d6e <_malloc_r+0xe6>
 8004cdc:	6823      	ldr	r3, [r4, #0]
 8004cde:	4631      	mov	r1, r6
 8004ce0:	4638      	mov	r0, r7
 8004ce2:	eb04 0903 	add.w	r9, r4, r3
 8004ce6:	f000 fa95 	bl	8005214 <_sbrk_r>
 8004cea:	4581      	cmp	r9, r0
 8004cec:	d13f      	bne.n	8004d6e <_malloc_r+0xe6>
 8004cee:	6821      	ldr	r1, [r4, #0]
 8004cf0:	1a6d      	subs	r5, r5, r1
 8004cf2:	4629      	mov	r1, r5
 8004cf4:	4638      	mov	r0, r7
 8004cf6:	f7ff ffa7 	bl	8004c48 <sbrk_aligned>
 8004cfa:	3001      	adds	r0, #1
 8004cfc:	d037      	beq.n	8004d6e <_malloc_r+0xe6>
 8004cfe:	6823      	ldr	r3, [r4, #0]
 8004d00:	442b      	add	r3, r5
 8004d02:	6023      	str	r3, [r4, #0]
 8004d04:	f8d8 3000 	ldr.w	r3, [r8]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d038      	beq.n	8004d7e <_malloc_r+0xf6>
 8004d0c:	685a      	ldr	r2, [r3, #4]
 8004d0e:	42a2      	cmp	r2, r4
 8004d10:	d12b      	bne.n	8004d6a <_malloc_r+0xe2>
 8004d12:	2200      	movs	r2, #0
 8004d14:	605a      	str	r2, [r3, #4]
 8004d16:	e00f      	b.n	8004d38 <_malloc_r+0xb0>
 8004d18:	6822      	ldr	r2, [r4, #0]
 8004d1a:	1b52      	subs	r2, r2, r5
 8004d1c:	d41f      	bmi.n	8004d5e <_malloc_r+0xd6>
 8004d1e:	2a0b      	cmp	r2, #11
 8004d20:	d917      	bls.n	8004d52 <_malloc_r+0xca>
 8004d22:	1961      	adds	r1, r4, r5
 8004d24:	42a3      	cmp	r3, r4
 8004d26:	6025      	str	r5, [r4, #0]
 8004d28:	bf18      	it	ne
 8004d2a:	6059      	strne	r1, [r3, #4]
 8004d2c:	6863      	ldr	r3, [r4, #4]
 8004d2e:	bf08      	it	eq
 8004d30:	f8c8 1000 	streq.w	r1, [r8]
 8004d34:	5162      	str	r2, [r4, r5]
 8004d36:	604b      	str	r3, [r1, #4]
 8004d38:	4638      	mov	r0, r7
 8004d3a:	f104 060b 	add.w	r6, r4, #11
 8004d3e:	f000 f829 	bl	8004d94 <__malloc_unlock>
 8004d42:	f026 0607 	bic.w	r6, r6, #7
 8004d46:	1d23      	adds	r3, r4, #4
 8004d48:	1af2      	subs	r2, r6, r3
 8004d4a:	d0ae      	beq.n	8004caa <_malloc_r+0x22>
 8004d4c:	1b9b      	subs	r3, r3, r6
 8004d4e:	50a3      	str	r3, [r4, r2]
 8004d50:	e7ab      	b.n	8004caa <_malloc_r+0x22>
 8004d52:	42a3      	cmp	r3, r4
 8004d54:	6862      	ldr	r2, [r4, #4]
 8004d56:	d1dd      	bne.n	8004d14 <_malloc_r+0x8c>
 8004d58:	f8c8 2000 	str.w	r2, [r8]
 8004d5c:	e7ec      	b.n	8004d38 <_malloc_r+0xb0>
 8004d5e:	4623      	mov	r3, r4
 8004d60:	6864      	ldr	r4, [r4, #4]
 8004d62:	e7ac      	b.n	8004cbe <_malloc_r+0x36>
 8004d64:	4634      	mov	r4, r6
 8004d66:	6876      	ldr	r6, [r6, #4]
 8004d68:	e7b4      	b.n	8004cd4 <_malloc_r+0x4c>
 8004d6a:	4613      	mov	r3, r2
 8004d6c:	e7cc      	b.n	8004d08 <_malloc_r+0x80>
 8004d6e:	230c      	movs	r3, #12
 8004d70:	603b      	str	r3, [r7, #0]
 8004d72:	4638      	mov	r0, r7
 8004d74:	f000 f80e 	bl	8004d94 <__malloc_unlock>
 8004d78:	e797      	b.n	8004caa <_malloc_r+0x22>
 8004d7a:	6025      	str	r5, [r4, #0]
 8004d7c:	e7dc      	b.n	8004d38 <_malloc_r+0xb0>
 8004d7e:	605b      	str	r3, [r3, #4]
 8004d80:	deff      	udf	#255	; 0xff
 8004d82:	bf00      	nop
 8004d84:	20000118 	.word	0x20000118

08004d88 <__malloc_lock>:
 8004d88:	4801      	ldr	r0, [pc, #4]	; (8004d90 <__malloc_lock+0x8>)
 8004d8a:	f000 ba8f 	b.w	80052ac <__retarget_lock_acquire_recursive>
 8004d8e:	bf00      	nop
 8004d90:	20000260 	.word	0x20000260

08004d94 <__malloc_unlock>:
 8004d94:	4801      	ldr	r0, [pc, #4]	; (8004d9c <__malloc_unlock+0x8>)
 8004d96:	f000 ba8a 	b.w	80052ae <__retarget_lock_release_recursive>
 8004d9a:	bf00      	nop
 8004d9c:	20000260 	.word	0x20000260

08004da0 <std>:
 8004da0:	2300      	movs	r3, #0
 8004da2:	b510      	push	{r4, lr}
 8004da4:	4604      	mov	r4, r0
 8004da6:	e9c0 3300 	strd	r3, r3, [r0]
 8004daa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004dae:	6083      	str	r3, [r0, #8]
 8004db0:	8181      	strh	r1, [r0, #12]
 8004db2:	6643      	str	r3, [r0, #100]	; 0x64
 8004db4:	81c2      	strh	r2, [r0, #14]
 8004db6:	6183      	str	r3, [r0, #24]
 8004db8:	4619      	mov	r1, r3
 8004dba:	2208      	movs	r2, #8
 8004dbc:	305c      	adds	r0, #92	; 0x5c
 8004dbe:	f000 f9ed 	bl	800519c <memset>
 8004dc2:	4b05      	ldr	r3, [pc, #20]	; (8004dd8 <std+0x38>)
 8004dc4:	6263      	str	r3, [r4, #36]	; 0x24
 8004dc6:	4b05      	ldr	r3, [pc, #20]	; (8004ddc <std+0x3c>)
 8004dc8:	62a3      	str	r3, [r4, #40]	; 0x28
 8004dca:	4b05      	ldr	r3, [pc, #20]	; (8004de0 <std+0x40>)
 8004dcc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004dce:	4b05      	ldr	r3, [pc, #20]	; (8004de4 <std+0x44>)
 8004dd0:	6224      	str	r4, [r4, #32]
 8004dd2:	6323      	str	r3, [r4, #48]	; 0x30
 8004dd4:	bd10      	pop	{r4, pc}
 8004dd6:	bf00      	nop
 8004dd8:	08004fed 	.word	0x08004fed
 8004ddc:	0800500f 	.word	0x0800500f
 8004de0:	08005047 	.word	0x08005047
 8004de4:	0800506b 	.word	0x0800506b

08004de8 <stdio_exit_handler>:
 8004de8:	4a02      	ldr	r2, [pc, #8]	; (8004df4 <stdio_exit_handler+0xc>)
 8004dea:	4903      	ldr	r1, [pc, #12]	; (8004df8 <stdio_exit_handler+0x10>)
 8004dec:	4803      	ldr	r0, [pc, #12]	; (8004dfc <stdio_exit_handler+0x14>)
 8004dee:	f000 b869 	b.w	8004ec4 <_fwalk_sglue>
 8004df2:	bf00      	nop
 8004df4:	2000000c 	.word	0x2000000c
 8004df8:	08005a19 	.word	0x08005a19
 8004dfc:	20000018 	.word	0x20000018

08004e00 <cleanup_stdio>:
 8004e00:	6841      	ldr	r1, [r0, #4]
 8004e02:	4b0c      	ldr	r3, [pc, #48]	; (8004e34 <cleanup_stdio+0x34>)
 8004e04:	4299      	cmp	r1, r3
 8004e06:	b510      	push	{r4, lr}
 8004e08:	4604      	mov	r4, r0
 8004e0a:	d001      	beq.n	8004e10 <cleanup_stdio+0x10>
 8004e0c:	f000 fe04 	bl	8005a18 <_fflush_r>
 8004e10:	68a1      	ldr	r1, [r4, #8]
 8004e12:	4b09      	ldr	r3, [pc, #36]	; (8004e38 <cleanup_stdio+0x38>)
 8004e14:	4299      	cmp	r1, r3
 8004e16:	d002      	beq.n	8004e1e <cleanup_stdio+0x1e>
 8004e18:	4620      	mov	r0, r4
 8004e1a:	f000 fdfd 	bl	8005a18 <_fflush_r>
 8004e1e:	68e1      	ldr	r1, [r4, #12]
 8004e20:	4b06      	ldr	r3, [pc, #24]	; (8004e3c <cleanup_stdio+0x3c>)
 8004e22:	4299      	cmp	r1, r3
 8004e24:	d004      	beq.n	8004e30 <cleanup_stdio+0x30>
 8004e26:	4620      	mov	r0, r4
 8004e28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e2c:	f000 bdf4 	b.w	8005a18 <_fflush_r>
 8004e30:	bd10      	pop	{r4, pc}
 8004e32:	bf00      	nop
 8004e34:	20000120 	.word	0x20000120
 8004e38:	20000188 	.word	0x20000188
 8004e3c:	200001f0 	.word	0x200001f0

08004e40 <global_stdio_init.part.0>:
 8004e40:	b510      	push	{r4, lr}
 8004e42:	4b0b      	ldr	r3, [pc, #44]	; (8004e70 <global_stdio_init.part.0+0x30>)
 8004e44:	4c0b      	ldr	r4, [pc, #44]	; (8004e74 <global_stdio_init.part.0+0x34>)
 8004e46:	4a0c      	ldr	r2, [pc, #48]	; (8004e78 <global_stdio_init.part.0+0x38>)
 8004e48:	601a      	str	r2, [r3, #0]
 8004e4a:	4620      	mov	r0, r4
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	2104      	movs	r1, #4
 8004e50:	f7ff ffa6 	bl	8004da0 <std>
 8004e54:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004e58:	2201      	movs	r2, #1
 8004e5a:	2109      	movs	r1, #9
 8004e5c:	f7ff ffa0 	bl	8004da0 <std>
 8004e60:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004e64:	2202      	movs	r2, #2
 8004e66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e6a:	2112      	movs	r1, #18
 8004e6c:	f7ff bf98 	b.w	8004da0 <std>
 8004e70:	20000258 	.word	0x20000258
 8004e74:	20000120 	.word	0x20000120
 8004e78:	08004de9 	.word	0x08004de9

08004e7c <__sfp_lock_acquire>:
 8004e7c:	4801      	ldr	r0, [pc, #4]	; (8004e84 <__sfp_lock_acquire+0x8>)
 8004e7e:	f000 ba15 	b.w	80052ac <__retarget_lock_acquire_recursive>
 8004e82:	bf00      	nop
 8004e84:	20000261 	.word	0x20000261

08004e88 <__sfp_lock_release>:
 8004e88:	4801      	ldr	r0, [pc, #4]	; (8004e90 <__sfp_lock_release+0x8>)
 8004e8a:	f000 ba10 	b.w	80052ae <__retarget_lock_release_recursive>
 8004e8e:	bf00      	nop
 8004e90:	20000261 	.word	0x20000261

08004e94 <__sinit>:
 8004e94:	b510      	push	{r4, lr}
 8004e96:	4604      	mov	r4, r0
 8004e98:	f7ff fff0 	bl	8004e7c <__sfp_lock_acquire>
 8004e9c:	6a23      	ldr	r3, [r4, #32]
 8004e9e:	b11b      	cbz	r3, 8004ea8 <__sinit+0x14>
 8004ea0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ea4:	f7ff bff0 	b.w	8004e88 <__sfp_lock_release>
 8004ea8:	4b04      	ldr	r3, [pc, #16]	; (8004ebc <__sinit+0x28>)
 8004eaa:	6223      	str	r3, [r4, #32]
 8004eac:	4b04      	ldr	r3, [pc, #16]	; (8004ec0 <__sinit+0x2c>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d1f5      	bne.n	8004ea0 <__sinit+0xc>
 8004eb4:	f7ff ffc4 	bl	8004e40 <global_stdio_init.part.0>
 8004eb8:	e7f2      	b.n	8004ea0 <__sinit+0xc>
 8004eba:	bf00      	nop
 8004ebc:	08004e01 	.word	0x08004e01
 8004ec0:	20000258 	.word	0x20000258

08004ec4 <_fwalk_sglue>:
 8004ec4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ec8:	4607      	mov	r7, r0
 8004eca:	4688      	mov	r8, r1
 8004ecc:	4614      	mov	r4, r2
 8004ece:	2600      	movs	r6, #0
 8004ed0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004ed4:	f1b9 0901 	subs.w	r9, r9, #1
 8004ed8:	d505      	bpl.n	8004ee6 <_fwalk_sglue+0x22>
 8004eda:	6824      	ldr	r4, [r4, #0]
 8004edc:	2c00      	cmp	r4, #0
 8004ede:	d1f7      	bne.n	8004ed0 <_fwalk_sglue+0xc>
 8004ee0:	4630      	mov	r0, r6
 8004ee2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ee6:	89ab      	ldrh	r3, [r5, #12]
 8004ee8:	2b01      	cmp	r3, #1
 8004eea:	d907      	bls.n	8004efc <_fwalk_sglue+0x38>
 8004eec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004ef0:	3301      	adds	r3, #1
 8004ef2:	d003      	beq.n	8004efc <_fwalk_sglue+0x38>
 8004ef4:	4629      	mov	r1, r5
 8004ef6:	4638      	mov	r0, r7
 8004ef8:	47c0      	blx	r8
 8004efa:	4306      	orrs	r6, r0
 8004efc:	3568      	adds	r5, #104	; 0x68
 8004efe:	e7e9      	b.n	8004ed4 <_fwalk_sglue+0x10>

08004f00 <iprintf>:
 8004f00:	b40f      	push	{r0, r1, r2, r3}
 8004f02:	b507      	push	{r0, r1, r2, lr}
 8004f04:	4906      	ldr	r1, [pc, #24]	; (8004f20 <iprintf+0x20>)
 8004f06:	ab04      	add	r3, sp, #16
 8004f08:	6808      	ldr	r0, [r1, #0]
 8004f0a:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f0e:	6881      	ldr	r1, [r0, #8]
 8004f10:	9301      	str	r3, [sp, #4]
 8004f12:	f000 fa51 	bl	80053b8 <_vfiprintf_r>
 8004f16:	b003      	add	sp, #12
 8004f18:	f85d eb04 	ldr.w	lr, [sp], #4
 8004f1c:	b004      	add	sp, #16
 8004f1e:	4770      	bx	lr
 8004f20:	20000064 	.word	0x20000064

08004f24 <putchar>:
 8004f24:	4b02      	ldr	r3, [pc, #8]	; (8004f30 <putchar+0xc>)
 8004f26:	4601      	mov	r1, r0
 8004f28:	6818      	ldr	r0, [r3, #0]
 8004f2a:	6882      	ldr	r2, [r0, #8]
 8004f2c:	f000 bdfe 	b.w	8005b2c <_putc_r>
 8004f30:	20000064 	.word	0x20000064

08004f34 <_puts_r>:
 8004f34:	6a03      	ldr	r3, [r0, #32]
 8004f36:	b570      	push	{r4, r5, r6, lr}
 8004f38:	6884      	ldr	r4, [r0, #8]
 8004f3a:	4605      	mov	r5, r0
 8004f3c:	460e      	mov	r6, r1
 8004f3e:	b90b      	cbnz	r3, 8004f44 <_puts_r+0x10>
 8004f40:	f7ff ffa8 	bl	8004e94 <__sinit>
 8004f44:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004f46:	07db      	lsls	r3, r3, #31
 8004f48:	d405      	bmi.n	8004f56 <_puts_r+0x22>
 8004f4a:	89a3      	ldrh	r3, [r4, #12]
 8004f4c:	0598      	lsls	r0, r3, #22
 8004f4e:	d402      	bmi.n	8004f56 <_puts_r+0x22>
 8004f50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004f52:	f000 f9ab 	bl	80052ac <__retarget_lock_acquire_recursive>
 8004f56:	89a3      	ldrh	r3, [r4, #12]
 8004f58:	0719      	lsls	r1, r3, #28
 8004f5a:	d513      	bpl.n	8004f84 <_puts_r+0x50>
 8004f5c:	6923      	ldr	r3, [r4, #16]
 8004f5e:	b18b      	cbz	r3, 8004f84 <_puts_r+0x50>
 8004f60:	3e01      	subs	r6, #1
 8004f62:	68a3      	ldr	r3, [r4, #8]
 8004f64:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004f68:	3b01      	subs	r3, #1
 8004f6a:	60a3      	str	r3, [r4, #8]
 8004f6c:	b9e9      	cbnz	r1, 8004faa <_puts_r+0x76>
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	da2e      	bge.n	8004fd0 <_puts_r+0x9c>
 8004f72:	4622      	mov	r2, r4
 8004f74:	210a      	movs	r1, #10
 8004f76:	4628      	mov	r0, r5
 8004f78:	f000 f87b 	bl	8005072 <__swbuf_r>
 8004f7c:	3001      	adds	r0, #1
 8004f7e:	d007      	beq.n	8004f90 <_puts_r+0x5c>
 8004f80:	250a      	movs	r5, #10
 8004f82:	e007      	b.n	8004f94 <_puts_r+0x60>
 8004f84:	4621      	mov	r1, r4
 8004f86:	4628      	mov	r0, r5
 8004f88:	f000 f8b0 	bl	80050ec <__swsetup_r>
 8004f8c:	2800      	cmp	r0, #0
 8004f8e:	d0e7      	beq.n	8004f60 <_puts_r+0x2c>
 8004f90:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8004f94:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004f96:	07da      	lsls	r2, r3, #31
 8004f98:	d405      	bmi.n	8004fa6 <_puts_r+0x72>
 8004f9a:	89a3      	ldrh	r3, [r4, #12]
 8004f9c:	059b      	lsls	r3, r3, #22
 8004f9e:	d402      	bmi.n	8004fa6 <_puts_r+0x72>
 8004fa0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004fa2:	f000 f984 	bl	80052ae <__retarget_lock_release_recursive>
 8004fa6:	4628      	mov	r0, r5
 8004fa8:	bd70      	pop	{r4, r5, r6, pc}
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	da04      	bge.n	8004fb8 <_puts_r+0x84>
 8004fae:	69a2      	ldr	r2, [r4, #24]
 8004fb0:	429a      	cmp	r2, r3
 8004fb2:	dc06      	bgt.n	8004fc2 <_puts_r+0x8e>
 8004fb4:	290a      	cmp	r1, #10
 8004fb6:	d004      	beq.n	8004fc2 <_puts_r+0x8e>
 8004fb8:	6823      	ldr	r3, [r4, #0]
 8004fba:	1c5a      	adds	r2, r3, #1
 8004fbc:	6022      	str	r2, [r4, #0]
 8004fbe:	7019      	strb	r1, [r3, #0]
 8004fc0:	e7cf      	b.n	8004f62 <_puts_r+0x2e>
 8004fc2:	4622      	mov	r2, r4
 8004fc4:	4628      	mov	r0, r5
 8004fc6:	f000 f854 	bl	8005072 <__swbuf_r>
 8004fca:	3001      	adds	r0, #1
 8004fcc:	d1c9      	bne.n	8004f62 <_puts_r+0x2e>
 8004fce:	e7df      	b.n	8004f90 <_puts_r+0x5c>
 8004fd0:	6823      	ldr	r3, [r4, #0]
 8004fd2:	250a      	movs	r5, #10
 8004fd4:	1c5a      	adds	r2, r3, #1
 8004fd6:	6022      	str	r2, [r4, #0]
 8004fd8:	701d      	strb	r5, [r3, #0]
 8004fda:	e7db      	b.n	8004f94 <_puts_r+0x60>

08004fdc <puts>:
 8004fdc:	4b02      	ldr	r3, [pc, #8]	; (8004fe8 <puts+0xc>)
 8004fde:	4601      	mov	r1, r0
 8004fe0:	6818      	ldr	r0, [r3, #0]
 8004fe2:	f7ff bfa7 	b.w	8004f34 <_puts_r>
 8004fe6:	bf00      	nop
 8004fe8:	20000064 	.word	0x20000064

08004fec <__sread>:
 8004fec:	b510      	push	{r4, lr}
 8004fee:	460c      	mov	r4, r1
 8004ff0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ff4:	f000 f8fc 	bl	80051f0 <_read_r>
 8004ff8:	2800      	cmp	r0, #0
 8004ffa:	bfab      	itete	ge
 8004ffc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004ffe:	89a3      	ldrhlt	r3, [r4, #12]
 8005000:	181b      	addge	r3, r3, r0
 8005002:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005006:	bfac      	ite	ge
 8005008:	6563      	strge	r3, [r4, #84]	; 0x54
 800500a:	81a3      	strhlt	r3, [r4, #12]
 800500c:	bd10      	pop	{r4, pc}

0800500e <__swrite>:
 800500e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005012:	461f      	mov	r7, r3
 8005014:	898b      	ldrh	r3, [r1, #12]
 8005016:	05db      	lsls	r3, r3, #23
 8005018:	4605      	mov	r5, r0
 800501a:	460c      	mov	r4, r1
 800501c:	4616      	mov	r6, r2
 800501e:	d505      	bpl.n	800502c <__swrite+0x1e>
 8005020:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005024:	2302      	movs	r3, #2
 8005026:	2200      	movs	r2, #0
 8005028:	f000 f8d0 	bl	80051cc <_lseek_r>
 800502c:	89a3      	ldrh	r3, [r4, #12]
 800502e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005032:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005036:	81a3      	strh	r3, [r4, #12]
 8005038:	4632      	mov	r2, r6
 800503a:	463b      	mov	r3, r7
 800503c:	4628      	mov	r0, r5
 800503e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005042:	f000 b8f7 	b.w	8005234 <_write_r>

08005046 <__sseek>:
 8005046:	b510      	push	{r4, lr}
 8005048:	460c      	mov	r4, r1
 800504a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800504e:	f000 f8bd 	bl	80051cc <_lseek_r>
 8005052:	1c43      	adds	r3, r0, #1
 8005054:	89a3      	ldrh	r3, [r4, #12]
 8005056:	bf15      	itete	ne
 8005058:	6560      	strne	r0, [r4, #84]	; 0x54
 800505a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800505e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005062:	81a3      	strheq	r3, [r4, #12]
 8005064:	bf18      	it	ne
 8005066:	81a3      	strhne	r3, [r4, #12]
 8005068:	bd10      	pop	{r4, pc}

0800506a <__sclose>:
 800506a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800506e:	f000 b89d 	b.w	80051ac <_close_r>

08005072 <__swbuf_r>:
 8005072:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005074:	460e      	mov	r6, r1
 8005076:	4614      	mov	r4, r2
 8005078:	4605      	mov	r5, r0
 800507a:	b118      	cbz	r0, 8005084 <__swbuf_r+0x12>
 800507c:	6a03      	ldr	r3, [r0, #32]
 800507e:	b90b      	cbnz	r3, 8005084 <__swbuf_r+0x12>
 8005080:	f7ff ff08 	bl	8004e94 <__sinit>
 8005084:	69a3      	ldr	r3, [r4, #24]
 8005086:	60a3      	str	r3, [r4, #8]
 8005088:	89a3      	ldrh	r3, [r4, #12]
 800508a:	071a      	lsls	r2, r3, #28
 800508c:	d525      	bpl.n	80050da <__swbuf_r+0x68>
 800508e:	6923      	ldr	r3, [r4, #16]
 8005090:	b31b      	cbz	r3, 80050da <__swbuf_r+0x68>
 8005092:	6823      	ldr	r3, [r4, #0]
 8005094:	6922      	ldr	r2, [r4, #16]
 8005096:	1a98      	subs	r0, r3, r2
 8005098:	6963      	ldr	r3, [r4, #20]
 800509a:	b2f6      	uxtb	r6, r6
 800509c:	4283      	cmp	r3, r0
 800509e:	4637      	mov	r7, r6
 80050a0:	dc04      	bgt.n	80050ac <__swbuf_r+0x3a>
 80050a2:	4621      	mov	r1, r4
 80050a4:	4628      	mov	r0, r5
 80050a6:	f000 fcb7 	bl	8005a18 <_fflush_r>
 80050aa:	b9e0      	cbnz	r0, 80050e6 <__swbuf_r+0x74>
 80050ac:	68a3      	ldr	r3, [r4, #8]
 80050ae:	3b01      	subs	r3, #1
 80050b0:	60a3      	str	r3, [r4, #8]
 80050b2:	6823      	ldr	r3, [r4, #0]
 80050b4:	1c5a      	adds	r2, r3, #1
 80050b6:	6022      	str	r2, [r4, #0]
 80050b8:	701e      	strb	r6, [r3, #0]
 80050ba:	6962      	ldr	r2, [r4, #20]
 80050bc:	1c43      	adds	r3, r0, #1
 80050be:	429a      	cmp	r2, r3
 80050c0:	d004      	beq.n	80050cc <__swbuf_r+0x5a>
 80050c2:	89a3      	ldrh	r3, [r4, #12]
 80050c4:	07db      	lsls	r3, r3, #31
 80050c6:	d506      	bpl.n	80050d6 <__swbuf_r+0x64>
 80050c8:	2e0a      	cmp	r6, #10
 80050ca:	d104      	bne.n	80050d6 <__swbuf_r+0x64>
 80050cc:	4621      	mov	r1, r4
 80050ce:	4628      	mov	r0, r5
 80050d0:	f000 fca2 	bl	8005a18 <_fflush_r>
 80050d4:	b938      	cbnz	r0, 80050e6 <__swbuf_r+0x74>
 80050d6:	4638      	mov	r0, r7
 80050d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80050da:	4621      	mov	r1, r4
 80050dc:	4628      	mov	r0, r5
 80050de:	f000 f805 	bl	80050ec <__swsetup_r>
 80050e2:	2800      	cmp	r0, #0
 80050e4:	d0d5      	beq.n	8005092 <__swbuf_r+0x20>
 80050e6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80050ea:	e7f4      	b.n	80050d6 <__swbuf_r+0x64>

080050ec <__swsetup_r>:
 80050ec:	b538      	push	{r3, r4, r5, lr}
 80050ee:	4b2a      	ldr	r3, [pc, #168]	; (8005198 <__swsetup_r+0xac>)
 80050f0:	4605      	mov	r5, r0
 80050f2:	6818      	ldr	r0, [r3, #0]
 80050f4:	460c      	mov	r4, r1
 80050f6:	b118      	cbz	r0, 8005100 <__swsetup_r+0x14>
 80050f8:	6a03      	ldr	r3, [r0, #32]
 80050fa:	b90b      	cbnz	r3, 8005100 <__swsetup_r+0x14>
 80050fc:	f7ff feca 	bl	8004e94 <__sinit>
 8005100:	89a3      	ldrh	r3, [r4, #12]
 8005102:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005106:	0718      	lsls	r0, r3, #28
 8005108:	d422      	bmi.n	8005150 <__swsetup_r+0x64>
 800510a:	06d9      	lsls	r1, r3, #27
 800510c:	d407      	bmi.n	800511e <__swsetup_r+0x32>
 800510e:	2309      	movs	r3, #9
 8005110:	602b      	str	r3, [r5, #0]
 8005112:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005116:	81a3      	strh	r3, [r4, #12]
 8005118:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800511c:	e034      	b.n	8005188 <__swsetup_r+0x9c>
 800511e:	0758      	lsls	r0, r3, #29
 8005120:	d512      	bpl.n	8005148 <__swsetup_r+0x5c>
 8005122:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005124:	b141      	cbz	r1, 8005138 <__swsetup_r+0x4c>
 8005126:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800512a:	4299      	cmp	r1, r3
 800512c:	d002      	beq.n	8005134 <__swsetup_r+0x48>
 800512e:	4628      	mov	r0, r5
 8005130:	f000 f8cc 	bl	80052cc <_free_r>
 8005134:	2300      	movs	r3, #0
 8005136:	6363      	str	r3, [r4, #52]	; 0x34
 8005138:	89a3      	ldrh	r3, [r4, #12]
 800513a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800513e:	81a3      	strh	r3, [r4, #12]
 8005140:	2300      	movs	r3, #0
 8005142:	6063      	str	r3, [r4, #4]
 8005144:	6923      	ldr	r3, [r4, #16]
 8005146:	6023      	str	r3, [r4, #0]
 8005148:	89a3      	ldrh	r3, [r4, #12]
 800514a:	f043 0308 	orr.w	r3, r3, #8
 800514e:	81a3      	strh	r3, [r4, #12]
 8005150:	6923      	ldr	r3, [r4, #16]
 8005152:	b94b      	cbnz	r3, 8005168 <__swsetup_r+0x7c>
 8005154:	89a3      	ldrh	r3, [r4, #12]
 8005156:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800515a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800515e:	d003      	beq.n	8005168 <__swsetup_r+0x7c>
 8005160:	4621      	mov	r1, r4
 8005162:	4628      	mov	r0, r5
 8005164:	f000 fca6 	bl	8005ab4 <__smakebuf_r>
 8005168:	89a0      	ldrh	r0, [r4, #12]
 800516a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800516e:	f010 0301 	ands.w	r3, r0, #1
 8005172:	d00a      	beq.n	800518a <__swsetup_r+0x9e>
 8005174:	2300      	movs	r3, #0
 8005176:	60a3      	str	r3, [r4, #8]
 8005178:	6963      	ldr	r3, [r4, #20]
 800517a:	425b      	negs	r3, r3
 800517c:	61a3      	str	r3, [r4, #24]
 800517e:	6923      	ldr	r3, [r4, #16]
 8005180:	b943      	cbnz	r3, 8005194 <__swsetup_r+0xa8>
 8005182:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005186:	d1c4      	bne.n	8005112 <__swsetup_r+0x26>
 8005188:	bd38      	pop	{r3, r4, r5, pc}
 800518a:	0781      	lsls	r1, r0, #30
 800518c:	bf58      	it	pl
 800518e:	6963      	ldrpl	r3, [r4, #20]
 8005190:	60a3      	str	r3, [r4, #8]
 8005192:	e7f4      	b.n	800517e <__swsetup_r+0x92>
 8005194:	2000      	movs	r0, #0
 8005196:	e7f7      	b.n	8005188 <__swsetup_r+0x9c>
 8005198:	20000064 	.word	0x20000064

0800519c <memset>:
 800519c:	4402      	add	r2, r0
 800519e:	4603      	mov	r3, r0
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d100      	bne.n	80051a6 <memset+0xa>
 80051a4:	4770      	bx	lr
 80051a6:	f803 1b01 	strb.w	r1, [r3], #1
 80051aa:	e7f9      	b.n	80051a0 <memset+0x4>

080051ac <_close_r>:
 80051ac:	b538      	push	{r3, r4, r5, lr}
 80051ae:	4d06      	ldr	r5, [pc, #24]	; (80051c8 <_close_r+0x1c>)
 80051b0:	2300      	movs	r3, #0
 80051b2:	4604      	mov	r4, r0
 80051b4:	4608      	mov	r0, r1
 80051b6:	602b      	str	r3, [r5, #0]
 80051b8:	f7fc f933 	bl	8001422 <_close>
 80051bc:	1c43      	adds	r3, r0, #1
 80051be:	d102      	bne.n	80051c6 <_close_r+0x1a>
 80051c0:	682b      	ldr	r3, [r5, #0]
 80051c2:	b103      	cbz	r3, 80051c6 <_close_r+0x1a>
 80051c4:	6023      	str	r3, [r4, #0]
 80051c6:	bd38      	pop	{r3, r4, r5, pc}
 80051c8:	2000025c 	.word	0x2000025c

080051cc <_lseek_r>:
 80051cc:	b538      	push	{r3, r4, r5, lr}
 80051ce:	4d07      	ldr	r5, [pc, #28]	; (80051ec <_lseek_r+0x20>)
 80051d0:	4604      	mov	r4, r0
 80051d2:	4608      	mov	r0, r1
 80051d4:	4611      	mov	r1, r2
 80051d6:	2200      	movs	r2, #0
 80051d8:	602a      	str	r2, [r5, #0]
 80051da:	461a      	mov	r2, r3
 80051dc:	f7fc f948 	bl	8001470 <_lseek>
 80051e0:	1c43      	adds	r3, r0, #1
 80051e2:	d102      	bne.n	80051ea <_lseek_r+0x1e>
 80051e4:	682b      	ldr	r3, [r5, #0]
 80051e6:	b103      	cbz	r3, 80051ea <_lseek_r+0x1e>
 80051e8:	6023      	str	r3, [r4, #0]
 80051ea:	bd38      	pop	{r3, r4, r5, pc}
 80051ec:	2000025c 	.word	0x2000025c

080051f0 <_read_r>:
 80051f0:	b538      	push	{r3, r4, r5, lr}
 80051f2:	4d07      	ldr	r5, [pc, #28]	; (8005210 <_read_r+0x20>)
 80051f4:	4604      	mov	r4, r0
 80051f6:	4608      	mov	r0, r1
 80051f8:	4611      	mov	r1, r2
 80051fa:	2200      	movs	r2, #0
 80051fc:	602a      	str	r2, [r5, #0]
 80051fe:	461a      	mov	r2, r3
 8005200:	f7fc f8d6 	bl	80013b0 <_read>
 8005204:	1c43      	adds	r3, r0, #1
 8005206:	d102      	bne.n	800520e <_read_r+0x1e>
 8005208:	682b      	ldr	r3, [r5, #0]
 800520a:	b103      	cbz	r3, 800520e <_read_r+0x1e>
 800520c:	6023      	str	r3, [r4, #0]
 800520e:	bd38      	pop	{r3, r4, r5, pc}
 8005210:	2000025c 	.word	0x2000025c

08005214 <_sbrk_r>:
 8005214:	b538      	push	{r3, r4, r5, lr}
 8005216:	4d06      	ldr	r5, [pc, #24]	; (8005230 <_sbrk_r+0x1c>)
 8005218:	2300      	movs	r3, #0
 800521a:	4604      	mov	r4, r0
 800521c:	4608      	mov	r0, r1
 800521e:	602b      	str	r3, [r5, #0]
 8005220:	f7fc f934 	bl	800148c <_sbrk>
 8005224:	1c43      	adds	r3, r0, #1
 8005226:	d102      	bne.n	800522e <_sbrk_r+0x1a>
 8005228:	682b      	ldr	r3, [r5, #0]
 800522a:	b103      	cbz	r3, 800522e <_sbrk_r+0x1a>
 800522c:	6023      	str	r3, [r4, #0]
 800522e:	bd38      	pop	{r3, r4, r5, pc}
 8005230:	2000025c 	.word	0x2000025c

08005234 <_write_r>:
 8005234:	b538      	push	{r3, r4, r5, lr}
 8005236:	4d07      	ldr	r5, [pc, #28]	; (8005254 <_write_r+0x20>)
 8005238:	4604      	mov	r4, r0
 800523a:	4608      	mov	r0, r1
 800523c:	4611      	mov	r1, r2
 800523e:	2200      	movs	r2, #0
 8005240:	602a      	str	r2, [r5, #0]
 8005242:	461a      	mov	r2, r3
 8005244:	f7fc f8d1 	bl	80013ea <_write>
 8005248:	1c43      	adds	r3, r0, #1
 800524a:	d102      	bne.n	8005252 <_write_r+0x1e>
 800524c:	682b      	ldr	r3, [r5, #0]
 800524e:	b103      	cbz	r3, 8005252 <_write_r+0x1e>
 8005250:	6023      	str	r3, [r4, #0]
 8005252:	bd38      	pop	{r3, r4, r5, pc}
 8005254:	2000025c 	.word	0x2000025c

08005258 <__errno>:
 8005258:	4b01      	ldr	r3, [pc, #4]	; (8005260 <__errno+0x8>)
 800525a:	6818      	ldr	r0, [r3, #0]
 800525c:	4770      	bx	lr
 800525e:	bf00      	nop
 8005260:	20000064 	.word	0x20000064

08005264 <__libc_init_array>:
 8005264:	b570      	push	{r4, r5, r6, lr}
 8005266:	4d0d      	ldr	r5, [pc, #52]	; (800529c <__libc_init_array+0x38>)
 8005268:	4c0d      	ldr	r4, [pc, #52]	; (80052a0 <__libc_init_array+0x3c>)
 800526a:	1b64      	subs	r4, r4, r5
 800526c:	10a4      	asrs	r4, r4, #2
 800526e:	2600      	movs	r6, #0
 8005270:	42a6      	cmp	r6, r4
 8005272:	d109      	bne.n	8005288 <__libc_init_array+0x24>
 8005274:	4d0b      	ldr	r5, [pc, #44]	; (80052a4 <__libc_init_array+0x40>)
 8005276:	4c0c      	ldr	r4, [pc, #48]	; (80052a8 <__libc_init_array+0x44>)
 8005278:	f000 fcae 	bl	8005bd8 <_init>
 800527c:	1b64      	subs	r4, r4, r5
 800527e:	10a4      	asrs	r4, r4, #2
 8005280:	2600      	movs	r6, #0
 8005282:	42a6      	cmp	r6, r4
 8005284:	d105      	bne.n	8005292 <__libc_init_array+0x2e>
 8005286:	bd70      	pop	{r4, r5, r6, pc}
 8005288:	f855 3b04 	ldr.w	r3, [r5], #4
 800528c:	4798      	blx	r3
 800528e:	3601      	adds	r6, #1
 8005290:	e7ee      	b.n	8005270 <__libc_init_array+0xc>
 8005292:	f855 3b04 	ldr.w	r3, [r5], #4
 8005296:	4798      	blx	r3
 8005298:	3601      	adds	r6, #1
 800529a:	e7f2      	b.n	8005282 <__libc_init_array+0x1e>
 800529c:	080065d0 	.word	0x080065d0
 80052a0:	080065d0 	.word	0x080065d0
 80052a4:	080065d0 	.word	0x080065d0
 80052a8:	080065d4 	.word	0x080065d4

080052ac <__retarget_lock_acquire_recursive>:
 80052ac:	4770      	bx	lr

080052ae <__retarget_lock_release_recursive>:
 80052ae:	4770      	bx	lr

080052b0 <memcpy>:
 80052b0:	440a      	add	r2, r1
 80052b2:	4291      	cmp	r1, r2
 80052b4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80052b8:	d100      	bne.n	80052bc <memcpy+0xc>
 80052ba:	4770      	bx	lr
 80052bc:	b510      	push	{r4, lr}
 80052be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80052c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80052c6:	4291      	cmp	r1, r2
 80052c8:	d1f9      	bne.n	80052be <memcpy+0xe>
 80052ca:	bd10      	pop	{r4, pc}

080052cc <_free_r>:
 80052cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80052ce:	2900      	cmp	r1, #0
 80052d0:	d044      	beq.n	800535c <_free_r+0x90>
 80052d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80052d6:	9001      	str	r0, [sp, #4]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	f1a1 0404 	sub.w	r4, r1, #4
 80052de:	bfb8      	it	lt
 80052e0:	18e4      	addlt	r4, r4, r3
 80052e2:	f7ff fd51 	bl	8004d88 <__malloc_lock>
 80052e6:	4a1e      	ldr	r2, [pc, #120]	; (8005360 <_free_r+0x94>)
 80052e8:	9801      	ldr	r0, [sp, #4]
 80052ea:	6813      	ldr	r3, [r2, #0]
 80052ec:	b933      	cbnz	r3, 80052fc <_free_r+0x30>
 80052ee:	6063      	str	r3, [r4, #4]
 80052f0:	6014      	str	r4, [r2, #0]
 80052f2:	b003      	add	sp, #12
 80052f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80052f8:	f7ff bd4c 	b.w	8004d94 <__malloc_unlock>
 80052fc:	42a3      	cmp	r3, r4
 80052fe:	d908      	bls.n	8005312 <_free_r+0x46>
 8005300:	6825      	ldr	r5, [r4, #0]
 8005302:	1961      	adds	r1, r4, r5
 8005304:	428b      	cmp	r3, r1
 8005306:	bf01      	itttt	eq
 8005308:	6819      	ldreq	r1, [r3, #0]
 800530a:	685b      	ldreq	r3, [r3, #4]
 800530c:	1949      	addeq	r1, r1, r5
 800530e:	6021      	streq	r1, [r4, #0]
 8005310:	e7ed      	b.n	80052ee <_free_r+0x22>
 8005312:	461a      	mov	r2, r3
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	b10b      	cbz	r3, 800531c <_free_r+0x50>
 8005318:	42a3      	cmp	r3, r4
 800531a:	d9fa      	bls.n	8005312 <_free_r+0x46>
 800531c:	6811      	ldr	r1, [r2, #0]
 800531e:	1855      	adds	r5, r2, r1
 8005320:	42a5      	cmp	r5, r4
 8005322:	d10b      	bne.n	800533c <_free_r+0x70>
 8005324:	6824      	ldr	r4, [r4, #0]
 8005326:	4421      	add	r1, r4
 8005328:	1854      	adds	r4, r2, r1
 800532a:	42a3      	cmp	r3, r4
 800532c:	6011      	str	r1, [r2, #0]
 800532e:	d1e0      	bne.n	80052f2 <_free_r+0x26>
 8005330:	681c      	ldr	r4, [r3, #0]
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	6053      	str	r3, [r2, #4]
 8005336:	440c      	add	r4, r1
 8005338:	6014      	str	r4, [r2, #0]
 800533a:	e7da      	b.n	80052f2 <_free_r+0x26>
 800533c:	d902      	bls.n	8005344 <_free_r+0x78>
 800533e:	230c      	movs	r3, #12
 8005340:	6003      	str	r3, [r0, #0]
 8005342:	e7d6      	b.n	80052f2 <_free_r+0x26>
 8005344:	6825      	ldr	r5, [r4, #0]
 8005346:	1961      	adds	r1, r4, r5
 8005348:	428b      	cmp	r3, r1
 800534a:	bf04      	itt	eq
 800534c:	6819      	ldreq	r1, [r3, #0]
 800534e:	685b      	ldreq	r3, [r3, #4]
 8005350:	6063      	str	r3, [r4, #4]
 8005352:	bf04      	itt	eq
 8005354:	1949      	addeq	r1, r1, r5
 8005356:	6021      	streq	r1, [r4, #0]
 8005358:	6054      	str	r4, [r2, #4]
 800535a:	e7ca      	b.n	80052f2 <_free_r+0x26>
 800535c:	b003      	add	sp, #12
 800535e:	bd30      	pop	{r4, r5, pc}
 8005360:	20000118 	.word	0x20000118

08005364 <__sfputc_r>:
 8005364:	6893      	ldr	r3, [r2, #8]
 8005366:	3b01      	subs	r3, #1
 8005368:	2b00      	cmp	r3, #0
 800536a:	b410      	push	{r4}
 800536c:	6093      	str	r3, [r2, #8]
 800536e:	da08      	bge.n	8005382 <__sfputc_r+0x1e>
 8005370:	6994      	ldr	r4, [r2, #24]
 8005372:	42a3      	cmp	r3, r4
 8005374:	db01      	blt.n	800537a <__sfputc_r+0x16>
 8005376:	290a      	cmp	r1, #10
 8005378:	d103      	bne.n	8005382 <__sfputc_r+0x1e>
 800537a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800537e:	f7ff be78 	b.w	8005072 <__swbuf_r>
 8005382:	6813      	ldr	r3, [r2, #0]
 8005384:	1c58      	adds	r0, r3, #1
 8005386:	6010      	str	r0, [r2, #0]
 8005388:	7019      	strb	r1, [r3, #0]
 800538a:	4608      	mov	r0, r1
 800538c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005390:	4770      	bx	lr

08005392 <__sfputs_r>:
 8005392:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005394:	4606      	mov	r6, r0
 8005396:	460f      	mov	r7, r1
 8005398:	4614      	mov	r4, r2
 800539a:	18d5      	adds	r5, r2, r3
 800539c:	42ac      	cmp	r4, r5
 800539e:	d101      	bne.n	80053a4 <__sfputs_r+0x12>
 80053a0:	2000      	movs	r0, #0
 80053a2:	e007      	b.n	80053b4 <__sfputs_r+0x22>
 80053a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053a8:	463a      	mov	r2, r7
 80053aa:	4630      	mov	r0, r6
 80053ac:	f7ff ffda 	bl	8005364 <__sfputc_r>
 80053b0:	1c43      	adds	r3, r0, #1
 80053b2:	d1f3      	bne.n	800539c <__sfputs_r+0xa>
 80053b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080053b8 <_vfiprintf_r>:
 80053b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053bc:	460d      	mov	r5, r1
 80053be:	b09d      	sub	sp, #116	; 0x74
 80053c0:	4614      	mov	r4, r2
 80053c2:	4698      	mov	r8, r3
 80053c4:	4606      	mov	r6, r0
 80053c6:	b118      	cbz	r0, 80053d0 <_vfiprintf_r+0x18>
 80053c8:	6a03      	ldr	r3, [r0, #32]
 80053ca:	b90b      	cbnz	r3, 80053d0 <_vfiprintf_r+0x18>
 80053cc:	f7ff fd62 	bl	8004e94 <__sinit>
 80053d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80053d2:	07d9      	lsls	r1, r3, #31
 80053d4:	d405      	bmi.n	80053e2 <_vfiprintf_r+0x2a>
 80053d6:	89ab      	ldrh	r3, [r5, #12]
 80053d8:	059a      	lsls	r2, r3, #22
 80053da:	d402      	bmi.n	80053e2 <_vfiprintf_r+0x2a>
 80053dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80053de:	f7ff ff65 	bl	80052ac <__retarget_lock_acquire_recursive>
 80053e2:	89ab      	ldrh	r3, [r5, #12]
 80053e4:	071b      	lsls	r3, r3, #28
 80053e6:	d501      	bpl.n	80053ec <_vfiprintf_r+0x34>
 80053e8:	692b      	ldr	r3, [r5, #16]
 80053ea:	b99b      	cbnz	r3, 8005414 <_vfiprintf_r+0x5c>
 80053ec:	4629      	mov	r1, r5
 80053ee:	4630      	mov	r0, r6
 80053f0:	f7ff fe7c 	bl	80050ec <__swsetup_r>
 80053f4:	b170      	cbz	r0, 8005414 <_vfiprintf_r+0x5c>
 80053f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80053f8:	07dc      	lsls	r4, r3, #31
 80053fa:	d504      	bpl.n	8005406 <_vfiprintf_r+0x4e>
 80053fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005400:	b01d      	add	sp, #116	; 0x74
 8005402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005406:	89ab      	ldrh	r3, [r5, #12]
 8005408:	0598      	lsls	r0, r3, #22
 800540a:	d4f7      	bmi.n	80053fc <_vfiprintf_r+0x44>
 800540c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800540e:	f7ff ff4e 	bl	80052ae <__retarget_lock_release_recursive>
 8005412:	e7f3      	b.n	80053fc <_vfiprintf_r+0x44>
 8005414:	2300      	movs	r3, #0
 8005416:	9309      	str	r3, [sp, #36]	; 0x24
 8005418:	2320      	movs	r3, #32
 800541a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800541e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005422:	2330      	movs	r3, #48	; 0x30
 8005424:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80055d8 <_vfiprintf_r+0x220>
 8005428:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800542c:	f04f 0901 	mov.w	r9, #1
 8005430:	4623      	mov	r3, r4
 8005432:	469a      	mov	sl, r3
 8005434:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005438:	b10a      	cbz	r2, 800543e <_vfiprintf_r+0x86>
 800543a:	2a25      	cmp	r2, #37	; 0x25
 800543c:	d1f9      	bne.n	8005432 <_vfiprintf_r+0x7a>
 800543e:	ebba 0b04 	subs.w	fp, sl, r4
 8005442:	d00b      	beq.n	800545c <_vfiprintf_r+0xa4>
 8005444:	465b      	mov	r3, fp
 8005446:	4622      	mov	r2, r4
 8005448:	4629      	mov	r1, r5
 800544a:	4630      	mov	r0, r6
 800544c:	f7ff ffa1 	bl	8005392 <__sfputs_r>
 8005450:	3001      	adds	r0, #1
 8005452:	f000 80a9 	beq.w	80055a8 <_vfiprintf_r+0x1f0>
 8005456:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005458:	445a      	add	r2, fp
 800545a:	9209      	str	r2, [sp, #36]	; 0x24
 800545c:	f89a 3000 	ldrb.w	r3, [sl]
 8005460:	2b00      	cmp	r3, #0
 8005462:	f000 80a1 	beq.w	80055a8 <_vfiprintf_r+0x1f0>
 8005466:	2300      	movs	r3, #0
 8005468:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800546c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005470:	f10a 0a01 	add.w	sl, sl, #1
 8005474:	9304      	str	r3, [sp, #16]
 8005476:	9307      	str	r3, [sp, #28]
 8005478:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800547c:	931a      	str	r3, [sp, #104]	; 0x68
 800547e:	4654      	mov	r4, sl
 8005480:	2205      	movs	r2, #5
 8005482:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005486:	4854      	ldr	r0, [pc, #336]	; (80055d8 <_vfiprintf_r+0x220>)
 8005488:	f7fa fea2 	bl	80001d0 <memchr>
 800548c:	9a04      	ldr	r2, [sp, #16]
 800548e:	b9d8      	cbnz	r0, 80054c8 <_vfiprintf_r+0x110>
 8005490:	06d1      	lsls	r1, r2, #27
 8005492:	bf44      	itt	mi
 8005494:	2320      	movmi	r3, #32
 8005496:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800549a:	0713      	lsls	r3, r2, #28
 800549c:	bf44      	itt	mi
 800549e:	232b      	movmi	r3, #43	; 0x2b
 80054a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80054a4:	f89a 3000 	ldrb.w	r3, [sl]
 80054a8:	2b2a      	cmp	r3, #42	; 0x2a
 80054aa:	d015      	beq.n	80054d8 <_vfiprintf_r+0x120>
 80054ac:	9a07      	ldr	r2, [sp, #28]
 80054ae:	4654      	mov	r4, sl
 80054b0:	2000      	movs	r0, #0
 80054b2:	f04f 0c0a 	mov.w	ip, #10
 80054b6:	4621      	mov	r1, r4
 80054b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80054bc:	3b30      	subs	r3, #48	; 0x30
 80054be:	2b09      	cmp	r3, #9
 80054c0:	d94d      	bls.n	800555e <_vfiprintf_r+0x1a6>
 80054c2:	b1b0      	cbz	r0, 80054f2 <_vfiprintf_r+0x13a>
 80054c4:	9207      	str	r2, [sp, #28]
 80054c6:	e014      	b.n	80054f2 <_vfiprintf_r+0x13a>
 80054c8:	eba0 0308 	sub.w	r3, r0, r8
 80054cc:	fa09 f303 	lsl.w	r3, r9, r3
 80054d0:	4313      	orrs	r3, r2
 80054d2:	9304      	str	r3, [sp, #16]
 80054d4:	46a2      	mov	sl, r4
 80054d6:	e7d2      	b.n	800547e <_vfiprintf_r+0xc6>
 80054d8:	9b03      	ldr	r3, [sp, #12]
 80054da:	1d19      	adds	r1, r3, #4
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	9103      	str	r1, [sp, #12]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	bfbb      	ittet	lt
 80054e4:	425b      	neglt	r3, r3
 80054e6:	f042 0202 	orrlt.w	r2, r2, #2
 80054ea:	9307      	strge	r3, [sp, #28]
 80054ec:	9307      	strlt	r3, [sp, #28]
 80054ee:	bfb8      	it	lt
 80054f0:	9204      	strlt	r2, [sp, #16]
 80054f2:	7823      	ldrb	r3, [r4, #0]
 80054f4:	2b2e      	cmp	r3, #46	; 0x2e
 80054f6:	d10c      	bne.n	8005512 <_vfiprintf_r+0x15a>
 80054f8:	7863      	ldrb	r3, [r4, #1]
 80054fa:	2b2a      	cmp	r3, #42	; 0x2a
 80054fc:	d134      	bne.n	8005568 <_vfiprintf_r+0x1b0>
 80054fe:	9b03      	ldr	r3, [sp, #12]
 8005500:	1d1a      	adds	r2, r3, #4
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	9203      	str	r2, [sp, #12]
 8005506:	2b00      	cmp	r3, #0
 8005508:	bfb8      	it	lt
 800550a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800550e:	3402      	adds	r4, #2
 8005510:	9305      	str	r3, [sp, #20]
 8005512:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80055e8 <_vfiprintf_r+0x230>
 8005516:	7821      	ldrb	r1, [r4, #0]
 8005518:	2203      	movs	r2, #3
 800551a:	4650      	mov	r0, sl
 800551c:	f7fa fe58 	bl	80001d0 <memchr>
 8005520:	b138      	cbz	r0, 8005532 <_vfiprintf_r+0x17a>
 8005522:	9b04      	ldr	r3, [sp, #16]
 8005524:	eba0 000a 	sub.w	r0, r0, sl
 8005528:	2240      	movs	r2, #64	; 0x40
 800552a:	4082      	lsls	r2, r0
 800552c:	4313      	orrs	r3, r2
 800552e:	3401      	adds	r4, #1
 8005530:	9304      	str	r3, [sp, #16]
 8005532:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005536:	4829      	ldr	r0, [pc, #164]	; (80055dc <_vfiprintf_r+0x224>)
 8005538:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800553c:	2206      	movs	r2, #6
 800553e:	f7fa fe47 	bl	80001d0 <memchr>
 8005542:	2800      	cmp	r0, #0
 8005544:	d03f      	beq.n	80055c6 <_vfiprintf_r+0x20e>
 8005546:	4b26      	ldr	r3, [pc, #152]	; (80055e0 <_vfiprintf_r+0x228>)
 8005548:	bb1b      	cbnz	r3, 8005592 <_vfiprintf_r+0x1da>
 800554a:	9b03      	ldr	r3, [sp, #12]
 800554c:	3307      	adds	r3, #7
 800554e:	f023 0307 	bic.w	r3, r3, #7
 8005552:	3308      	adds	r3, #8
 8005554:	9303      	str	r3, [sp, #12]
 8005556:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005558:	443b      	add	r3, r7
 800555a:	9309      	str	r3, [sp, #36]	; 0x24
 800555c:	e768      	b.n	8005430 <_vfiprintf_r+0x78>
 800555e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005562:	460c      	mov	r4, r1
 8005564:	2001      	movs	r0, #1
 8005566:	e7a6      	b.n	80054b6 <_vfiprintf_r+0xfe>
 8005568:	2300      	movs	r3, #0
 800556a:	3401      	adds	r4, #1
 800556c:	9305      	str	r3, [sp, #20]
 800556e:	4619      	mov	r1, r3
 8005570:	f04f 0c0a 	mov.w	ip, #10
 8005574:	4620      	mov	r0, r4
 8005576:	f810 2b01 	ldrb.w	r2, [r0], #1
 800557a:	3a30      	subs	r2, #48	; 0x30
 800557c:	2a09      	cmp	r2, #9
 800557e:	d903      	bls.n	8005588 <_vfiprintf_r+0x1d0>
 8005580:	2b00      	cmp	r3, #0
 8005582:	d0c6      	beq.n	8005512 <_vfiprintf_r+0x15a>
 8005584:	9105      	str	r1, [sp, #20]
 8005586:	e7c4      	b.n	8005512 <_vfiprintf_r+0x15a>
 8005588:	fb0c 2101 	mla	r1, ip, r1, r2
 800558c:	4604      	mov	r4, r0
 800558e:	2301      	movs	r3, #1
 8005590:	e7f0      	b.n	8005574 <_vfiprintf_r+0x1bc>
 8005592:	ab03      	add	r3, sp, #12
 8005594:	9300      	str	r3, [sp, #0]
 8005596:	462a      	mov	r2, r5
 8005598:	4b12      	ldr	r3, [pc, #72]	; (80055e4 <_vfiprintf_r+0x22c>)
 800559a:	a904      	add	r1, sp, #16
 800559c:	4630      	mov	r0, r6
 800559e:	f3af 8000 	nop.w
 80055a2:	4607      	mov	r7, r0
 80055a4:	1c78      	adds	r0, r7, #1
 80055a6:	d1d6      	bne.n	8005556 <_vfiprintf_r+0x19e>
 80055a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80055aa:	07d9      	lsls	r1, r3, #31
 80055ac:	d405      	bmi.n	80055ba <_vfiprintf_r+0x202>
 80055ae:	89ab      	ldrh	r3, [r5, #12]
 80055b0:	059a      	lsls	r2, r3, #22
 80055b2:	d402      	bmi.n	80055ba <_vfiprintf_r+0x202>
 80055b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80055b6:	f7ff fe7a 	bl	80052ae <__retarget_lock_release_recursive>
 80055ba:	89ab      	ldrh	r3, [r5, #12]
 80055bc:	065b      	lsls	r3, r3, #25
 80055be:	f53f af1d 	bmi.w	80053fc <_vfiprintf_r+0x44>
 80055c2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80055c4:	e71c      	b.n	8005400 <_vfiprintf_r+0x48>
 80055c6:	ab03      	add	r3, sp, #12
 80055c8:	9300      	str	r3, [sp, #0]
 80055ca:	462a      	mov	r2, r5
 80055cc:	4b05      	ldr	r3, [pc, #20]	; (80055e4 <_vfiprintf_r+0x22c>)
 80055ce:	a904      	add	r1, sp, #16
 80055d0:	4630      	mov	r0, r6
 80055d2:	f000 f879 	bl	80056c8 <_printf_i>
 80055d6:	e7e4      	b.n	80055a2 <_vfiprintf_r+0x1ea>
 80055d8:	08006594 	.word	0x08006594
 80055dc:	0800659e 	.word	0x0800659e
 80055e0:	00000000 	.word	0x00000000
 80055e4:	08005393 	.word	0x08005393
 80055e8:	0800659a 	.word	0x0800659a

080055ec <_printf_common>:
 80055ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055f0:	4616      	mov	r6, r2
 80055f2:	4699      	mov	r9, r3
 80055f4:	688a      	ldr	r2, [r1, #8]
 80055f6:	690b      	ldr	r3, [r1, #16]
 80055f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80055fc:	4293      	cmp	r3, r2
 80055fe:	bfb8      	it	lt
 8005600:	4613      	movlt	r3, r2
 8005602:	6033      	str	r3, [r6, #0]
 8005604:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005608:	4607      	mov	r7, r0
 800560a:	460c      	mov	r4, r1
 800560c:	b10a      	cbz	r2, 8005612 <_printf_common+0x26>
 800560e:	3301      	adds	r3, #1
 8005610:	6033      	str	r3, [r6, #0]
 8005612:	6823      	ldr	r3, [r4, #0]
 8005614:	0699      	lsls	r1, r3, #26
 8005616:	bf42      	ittt	mi
 8005618:	6833      	ldrmi	r3, [r6, #0]
 800561a:	3302      	addmi	r3, #2
 800561c:	6033      	strmi	r3, [r6, #0]
 800561e:	6825      	ldr	r5, [r4, #0]
 8005620:	f015 0506 	ands.w	r5, r5, #6
 8005624:	d106      	bne.n	8005634 <_printf_common+0x48>
 8005626:	f104 0a19 	add.w	sl, r4, #25
 800562a:	68e3      	ldr	r3, [r4, #12]
 800562c:	6832      	ldr	r2, [r6, #0]
 800562e:	1a9b      	subs	r3, r3, r2
 8005630:	42ab      	cmp	r3, r5
 8005632:	dc26      	bgt.n	8005682 <_printf_common+0x96>
 8005634:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005638:	1e13      	subs	r3, r2, #0
 800563a:	6822      	ldr	r2, [r4, #0]
 800563c:	bf18      	it	ne
 800563e:	2301      	movne	r3, #1
 8005640:	0692      	lsls	r2, r2, #26
 8005642:	d42b      	bmi.n	800569c <_printf_common+0xb0>
 8005644:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005648:	4649      	mov	r1, r9
 800564a:	4638      	mov	r0, r7
 800564c:	47c0      	blx	r8
 800564e:	3001      	adds	r0, #1
 8005650:	d01e      	beq.n	8005690 <_printf_common+0xa4>
 8005652:	6823      	ldr	r3, [r4, #0]
 8005654:	6922      	ldr	r2, [r4, #16]
 8005656:	f003 0306 	and.w	r3, r3, #6
 800565a:	2b04      	cmp	r3, #4
 800565c:	bf02      	ittt	eq
 800565e:	68e5      	ldreq	r5, [r4, #12]
 8005660:	6833      	ldreq	r3, [r6, #0]
 8005662:	1aed      	subeq	r5, r5, r3
 8005664:	68a3      	ldr	r3, [r4, #8]
 8005666:	bf0c      	ite	eq
 8005668:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800566c:	2500      	movne	r5, #0
 800566e:	4293      	cmp	r3, r2
 8005670:	bfc4      	itt	gt
 8005672:	1a9b      	subgt	r3, r3, r2
 8005674:	18ed      	addgt	r5, r5, r3
 8005676:	2600      	movs	r6, #0
 8005678:	341a      	adds	r4, #26
 800567a:	42b5      	cmp	r5, r6
 800567c:	d11a      	bne.n	80056b4 <_printf_common+0xc8>
 800567e:	2000      	movs	r0, #0
 8005680:	e008      	b.n	8005694 <_printf_common+0xa8>
 8005682:	2301      	movs	r3, #1
 8005684:	4652      	mov	r2, sl
 8005686:	4649      	mov	r1, r9
 8005688:	4638      	mov	r0, r7
 800568a:	47c0      	blx	r8
 800568c:	3001      	adds	r0, #1
 800568e:	d103      	bne.n	8005698 <_printf_common+0xac>
 8005690:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005694:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005698:	3501      	adds	r5, #1
 800569a:	e7c6      	b.n	800562a <_printf_common+0x3e>
 800569c:	18e1      	adds	r1, r4, r3
 800569e:	1c5a      	adds	r2, r3, #1
 80056a0:	2030      	movs	r0, #48	; 0x30
 80056a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80056a6:	4422      	add	r2, r4
 80056a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80056ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80056b0:	3302      	adds	r3, #2
 80056b2:	e7c7      	b.n	8005644 <_printf_common+0x58>
 80056b4:	2301      	movs	r3, #1
 80056b6:	4622      	mov	r2, r4
 80056b8:	4649      	mov	r1, r9
 80056ba:	4638      	mov	r0, r7
 80056bc:	47c0      	blx	r8
 80056be:	3001      	adds	r0, #1
 80056c0:	d0e6      	beq.n	8005690 <_printf_common+0xa4>
 80056c2:	3601      	adds	r6, #1
 80056c4:	e7d9      	b.n	800567a <_printf_common+0x8e>
	...

080056c8 <_printf_i>:
 80056c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80056cc:	7e0f      	ldrb	r7, [r1, #24]
 80056ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80056d0:	2f78      	cmp	r7, #120	; 0x78
 80056d2:	4691      	mov	r9, r2
 80056d4:	4680      	mov	r8, r0
 80056d6:	460c      	mov	r4, r1
 80056d8:	469a      	mov	sl, r3
 80056da:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80056de:	d807      	bhi.n	80056f0 <_printf_i+0x28>
 80056e0:	2f62      	cmp	r7, #98	; 0x62
 80056e2:	d80a      	bhi.n	80056fa <_printf_i+0x32>
 80056e4:	2f00      	cmp	r7, #0
 80056e6:	f000 80d4 	beq.w	8005892 <_printf_i+0x1ca>
 80056ea:	2f58      	cmp	r7, #88	; 0x58
 80056ec:	f000 80c0 	beq.w	8005870 <_printf_i+0x1a8>
 80056f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80056f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80056f8:	e03a      	b.n	8005770 <_printf_i+0xa8>
 80056fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80056fe:	2b15      	cmp	r3, #21
 8005700:	d8f6      	bhi.n	80056f0 <_printf_i+0x28>
 8005702:	a101      	add	r1, pc, #4	; (adr r1, 8005708 <_printf_i+0x40>)
 8005704:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005708:	08005761 	.word	0x08005761
 800570c:	08005775 	.word	0x08005775
 8005710:	080056f1 	.word	0x080056f1
 8005714:	080056f1 	.word	0x080056f1
 8005718:	080056f1 	.word	0x080056f1
 800571c:	080056f1 	.word	0x080056f1
 8005720:	08005775 	.word	0x08005775
 8005724:	080056f1 	.word	0x080056f1
 8005728:	080056f1 	.word	0x080056f1
 800572c:	080056f1 	.word	0x080056f1
 8005730:	080056f1 	.word	0x080056f1
 8005734:	08005879 	.word	0x08005879
 8005738:	080057a1 	.word	0x080057a1
 800573c:	08005833 	.word	0x08005833
 8005740:	080056f1 	.word	0x080056f1
 8005744:	080056f1 	.word	0x080056f1
 8005748:	0800589b 	.word	0x0800589b
 800574c:	080056f1 	.word	0x080056f1
 8005750:	080057a1 	.word	0x080057a1
 8005754:	080056f1 	.word	0x080056f1
 8005758:	080056f1 	.word	0x080056f1
 800575c:	0800583b 	.word	0x0800583b
 8005760:	682b      	ldr	r3, [r5, #0]
 8005762:	1d1a      	adds	r2, r3, #4
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	602a      	str	r2, [r5, #0]
 8005768:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800576c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005770:	2301      	movs	r3, #1
 8005772:	e09f      	b.n	80058b4 <_printf_i+0x1ec>
 8005774:	6820      	ldr	r0, [r4, #0]
 8005776:	682b      	ldr	r3, [r5, #0]
 8005778:	0607      	lsls	r7, r0, #24
 800577a:	f103 0104 	add.w	r1, r3, #4
 800577e:	6029      	str	r1, [r5, #0]
 8005780:	d501      	bpl.n	8005786 <_printf_i+0xbe>
 8005782:	681e      	ldr	r6, [r3, #0]
 8005784:	e003      	b.n	800578e <_printf_i+0xc6>
 8005786:	0646      	lsls	r6, r0, #25
 8005788:	d5fb      	bpl.n	8005782 <_printf_i+0xba>
 800578a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800578e:	2e00      	cmp	r6, #0
 8005790:	da03      	bge.n	800579a <_printf_i+0xd2>
 8005792:	232d      	movs	r3, #45	; 0x2d
 8005794:	4276      	negs	r6, r6
 8005796:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800579a:	485a      	ldr	r0, [pc, #360]	; (8005904 <_printf_i+0x23c>)
 800579c:	230a      	movs	r3, #10
 800579e:	e012      	b.n	80057c6 <_printf_i+0xfe>
 80057a0:	682b      	ldr	r3, [r5, #0]
 80057a2:	6820      	ldr	r0, [r4, #0]
 80057a4:	1d19      	adds	r1, r3, #4
 80057a6:	6029      	str	r1, [r5, #0]
 80057a8:	0605      	lsls	r5, r0, #24
 80057aa:	d501      	bpl.n	80057b0 <_printf_i+0xe8>
 80057ac:	681e      	ldr	r6, [r3, #0]
 80057ae:	e002      	b.n	80057b6 <_printf_i+0xee>
 80057b0:	0641      	lsls	r1, r0, #25
 80057b2:	d5fb      	bpl.n	80057ac <_printf_i+0xe4>
 80057b4:	881e      	ldrh	r6, [r3, #0]
 80057b6:	4853      	ldr	r0, [pc, #332]	; (8005904 <_printf_i+0x23c>)
 80057b8:	2f6f      	cmp	r7, #111	; 0x6f
 80057ba:	bf0c      	ite	eq
 80057bc:	2308      	moveq	r3, #8
 80057be:	230a      	movne	r3, #10
 80057c0:	2100      	movs	r1, #0
 80057c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80057c6:	6865      	ldr	r5, [r4, #4]
 80057c8:	60a5      	str	r5, [r4, #8]
 80057ca:	2d00      	cmp	r5, #0
 80057cc:	bfa2      	ittt	ge
 80057ce:	6821      	ldrge	r1, [r4, #0]
 80057d0:	f021 0104 	bicge.w	r1, r1, #4
 80057d4:	6021      	strge	r1, [r4, #0]
 80057d6:	b90e      	cbnz	r6, 80057dc <_printf_i+0x114>
 80057d8:	2d00      	cmp	r5, #0
 80057da:	d04b      	beq.n	8005874 <_printf_i+0x1ac>
 80057dc:	4615      	mov	r5, r2
 80057de:	fbb6 f1f3 	udiv	r1, r6, r3
 80057e2:	fb03 6711 	mls	r7, r3, r1, r6
 80057e6:	5dc7      	ldrb	r7, [r0, r7]
 80057e8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80057ec:	4637      	mov	r7, r6
 80057ee:	42bb      	cmp	r3, r7
 80057f0:	460e      	mov	r6, r1
 80057f2:	d9f4      	bls.n	80057de <_printf_i+0x116>
 80057f4:	2b08      	cmp	r3, #8
 80057f6:	d10b      	bne.n	8005810 <_printf_i+0x148>
 80057f8:	6823      	ldr	r3, [r4, #0]
 80057fa:	07de      	lsls	r6, r3, #31
 80057fc:	d508      	bpl.n	8005810 <_printf_i+0x148>
 80057fe:	6923      	ldr	r3, [r4, #16]
 8005800:	6861      	ldr	r1, [r4, #4]
 8005802:	4299      	cmp	r1, r3
 8005804:	bfde      	ittt	le
 8005806:	2330      	movle	r3, #48	; 0x30
 8005808:	f805 3c01 	strble.w	r3, [r5, #-1]
 800580c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005810:	1b52      	subs	r2, r2, r5
 8005812:	6122      	str	r2, [r4, #16]
 8005814:	f8cd a000 	str.w	sl, [sp]
 8005818:	464b      	mov	r3, r9
 800581a:	aa03      	add	r2, sp, #12
 800581c:	4621      	mov	r1, r4
 800581e:	4640      	mov	r0, r8
 8005820:	f7ff fee4 	bl	80055ec <_printf_common>
 8005824:	3001      	adds	r0, #1
 8005826:	d14a      	bne.n	80058be <_printf_i+0x1f6>
 8005828:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800582c:	b004      	add	sp, #16
 800582e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005832:	6823      	ldr	r3, [r4, #0]
 8005834:	f043 0320 	orr.w	r3, r3, #32
 8005838:	6023      	str	r3, [r4, #0]
 800583a:	4833      	ldr	r0, [pc, #204]	; (8005908 <_printf_i+0x240>)
 800583c:	2778      	movs	r7, #120	; 0x78
 800583e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005842:	6823      	ldr	r3, [r4, #0]
 8005844:	6829      	ldr	r1, [r5, #0]
 8005846:	061f      	lsls	r7, r3, #24
 8005848:	f851 6b04 	ldr.w	r6, [r1], #4
 800584c:	d402      	bmi.n	8005854 <_printf_i+0x18c>
 800584e:	065f      	lsls	r7, r3, #25
 8005850:	bf48      	it	mi
 8005852:	b2b6      	uxthmi	r6, r6
 8005854:	07df      	lsls	r7, r3, #31
 8005856:	bf48      	it	mi
 8005858:	f043 0320 	orrmi.w	r3, r3, #32
 800585c:	6029      	str	r1, [r5, #0]
 800585e:	bf48      	it	mi
 8005860:	6023      	strmi	r3, [r4, #0]
 8005862:	b91e      	cbnz	r6, 800586c <_printf_i+0x1a4>
 8005864:	6823      	ldr	r3, [r4, #0]
 8005866:	f023 0320 	bic.w	r3, r3, #32
 800586a:	6023      	str	r3, [r4, #0]
 800586c:	2310      	movs	r3, #16
 800586e:	e7a7      	b.n	80057c0 <_printf_i+0xf8>
 8005870:	4824      	ldr	r0, [pc, #144]	; (8005904 <_printf_i+0x23c>)
 8005872:	e7e4      	b.n	800583e <_printf_i+0x176>
 8005874:	4615      	mov	r5, r2
 8005876:	e7bd      	b.n	80057f4 <_printf_i+0x12c>
 8005878:	682b      	ldr	r3, [r5, #0]
 800587a:	6826      	ldr	r6, [r4, #0]
 800587c:	6961      	ldr	r1, [r4, #20]
 800587e:	1d18      	adds	r0, r3, #4
 8005880:	6028      	str	r0, [r5, #0]
 8005882:	0635      	lsls	r5, r6, #24
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	d501      	bpl.n	800588c <_printf_i+0x1c4>
 8005888:	6019      	str	r1, [r3, #0]
 800588a:	e002      	b.n	8005892 <_printf_i+0x1ca>
 800588c:	0670      	lsls	r0, r6, #25
 800588e:	d5fb      	bpl.n	8005888 <_printf_i+0x1c0>
 8005890:	8019      	strh	r1, [r3, #0]
 8005892:	2300      	movs	r3, #0
 8005894:	6123      	str	r3, [r4, #16]
 8005896:	4615      	mov	r5, r2
 8005898:	e7bc      	b.n	8005814 <_printf_i+0x14c>
 800589a:	682b      	ldr	r3, [r5, #0]
 800589c:	1d1a      	adds	r2, r3, #4
 800589e:	602a      	str	r2, [r5, #0]
 80058a0:	681d      	ldr	r5, [r3, #0]
 80058a2:	6862      	ldr	r2, [r4, #4]
 80058a4:	2100      	movs	r1, #0
 80058a6:	4628      	mov	r0, r5
 80058a8:	f7fa fc92 	bl	80001d0 <memchr>
 80058ac:	b108      	cbz	r0, 80058b2 <_printf_i+0x1ea>
 80058ae:	1b40      	subs	r0, r0, r5
 80058b0:	6060      	str	r0, [r4, #4]
 80058b2:	6863      	ldr	r3, [r4, #4]
 80058b4:	6123      	str	r3, [r4, #16]
 80058b6:	2300      	movs	r3, #0
 80058b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80058bc:	e7aa      	b.n	8005814 <_printf_i+0x14c>
 80058be:	6923      	ldr	r3, [r4, #16]
 80058c0:	462a      	mov	r2, r5
 80058c2:	4649      	mov	r1, r9
 80058c4:	4640      	mov	r0, r8
 80058c6:	47d0      	blx	sl
 80058c8:	3001      	adds	r0, #1
 80058ca:	d0ad      	beq.n	8005828 <_printf_i+0x160>
 80058cc:	6823      	ldr	r3, [r4, #0]
 80058ce:	079b      	lsls	r3, r3, #30
 80058d0:	d413      	bmi.n	80058fa <_printf_i+0x232>
 80058d2:	68e0      	ldr	r0, [r4, #12]
 80058d4:	9b03      	ldr	r3, [sp, #12]
 80058d6:	4298      	cmp	r0, r3
 80058d8:	bfb8      	it	lt
 80058da:	4618      	movlt	r0, r3
 80058dc:	e7a6      	b.n	800582c <_printf_i+0x164>
 80058de:	2301      	movs	r3, #1
 80058e0:	4632      	mov	r2, r6
 80058e2:	4649      	mov	r1, r9
 80058e4:	4640      	mov	r0, r8
 80058e6:	47d0      	blx	sl
 80058e8:	3001      	adds	r0, #1
 80058ea:	d09d      	beq.n	8005828 <_printf_i+0x160>
 80058ec:	3501      	adds	r5, #1
 80058ee:	68e3      	ldr	r3, [r4, #12]
 80058f0:	9903      	ldr	r1, [sp, #12]
 80058f2:	1a5b      	subs	r3, r3, r1
 80058f4:	42ab      	cmp	r3, r5
 80058f6:	dcf2      	bgt.n	80058de <_printf_i+0x216>
 80058f8:	e7eb      	b.n	80058d2 <_printf_i+0x20a>
 80058fa:	2500      	movs	r5, #0
 80058fc:	f104 0619 	add.w	r6, r4, #25
 8005900:	e7f5      	b.n	80058ee <_printf_i+0x226>
 8005902:	bf00      	nop
 8005904:	080065a5 	.word	0x080065a5
 8005908:	080065b6 	.word	0x080065b6

0800590c <__sflush_r>:
 800590c:	898a      	ldrh	r2, [r1, #12]
 800590e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005912:	4605      	mov	r5, r0
 8005914:	0710      	lsls	r0, r2, #28
 8005916:	460c      	mov	r4, r1
 8005918:	d458      	bmi.n	80059cc <__sflush_r+0xc0>
 800591a:	684b      	ldr	r3, [r1, #4]
 800591c:	2b00      	cmp	r3, #0
 800591e:	dc05      	bgt.n	800592c <__sflush_r+0x20>
 8005920:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005922:	2b00      	cmp	r3, #0
 8005924:	dc02      	bgt.n	800592c <__sflush_r+0x20>
 8005926:	2000      	movs	r0, #0
 8005928:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800592c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800592e:	2e00      	cmp	r6, #0
 8005930:	d0f9      	beq.n	8005926 <__sflush_r+0x1a>
 8005932:	2300      	movs	r3, #0
 8005934:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005938:	682f      	ldr	r7, [r5, #0]
 800593a:	6a21      	ldr	r1, [r4, #32]
 800593c:	602b      	str	r3, [r5, #0]
 800593e:	d032      	beq.n	80059a6 <__sflush_r+0x9a>
 8005940:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005942:	89a3      	ldrh	r3, [r4, #12]
 8005944:	075a      	lsls	r2, r3, #29
 8005946:	d505      	bpl.n	8005954 <__sflush_r+0x48>
 8005948:	6863      	ldr	r3, [r4, #4]
 800594a:	1ac0      	subs	r0, r0, r3
 800594c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800594e:	b10b      	cbz	r3, 8005954 <__sflush_r+0x48>
 8005950:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005952:	1ac0      	subs	r0, r0, r3
 8005954:	2300      	movs	r3, #0
 8005956:	4602      	mov	r2, r0
 8005958:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800595a:	6a21      	ldr	r1, [r4, #32]
 800595c:	4628      	mov	r0, r5
 800595e:	47b0      	blx	r6
 8005960:	1c43      	adds	r3, r0, #1
 8005962:	89a3      	ldrh	r3, [r4, #12]
 8005964:	d106      	bne.n	8005974 <__sflush_r+0x68>
 8005966:	6829      	ldr	r1, [r5, #0]
 8005968:	291d      	cmp	r1, #29
 800596a:	d82b      	bhi.n	80059c4 <__sflush_r+0xb8>
 800596c:	4a29      	ldr	r2, [pc, #164]	; (8005a14 <__sflush_r+0x108>)
 800596e:	410a      	asrs	r2, r1
 8005970:	07d6      	lsls	r6, r2, #31
 8005972:	d427      	bmi.n	80059c4 <__sflush_r+0xb8>
 8005974:	2200      	movs	r2, #0
 8005976:	6062      	str	r2, [r4, #4]
 8005978:	04d9      	lsls	r1, r3, #19
 800597a:	6922      	ldr	r2, [r4, #16]
 800597c:	6022      	str	r2, [r4, #0]
 800597e:	d504      	bpl.n	800598a <__sflush_r+0x7e>
 8005980:	1c42      	adds	r2, r0, #1
 8005982:	d101      	bne.n	8005988 <__sflush_r+0x7c>
 8005984:	682b      	ldr	r3, [r5, #0]
 8005986:	b903      	cbnz	r3, 800598a <__sflush_r+0x7e>
 8005988:	6560      	str	r0, [r4, #84]	; 0x54
 800598a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800598c:	602f      	str	r7, [r5, #0]
 800598e:	2900      	cmp	r1, #0
 8005990:	d0c9      	beq.n	8005926 <__sflush_r+0x1a>
 8005992:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005996:	4299      	cmp	r1, r3
 8005998:	d002      	beq.n	80059a0 <__sflush_r+0x94>
 800599a:	4628      	mov	r0, r5
 800599c:	f7ff fc96 	bl	80052cc <_free_r>
 80059a0:	2000      	movs	r0, #0
 80059a2:	6360      	str	r0, [r4, #52]	; 0x34
 80059a4:	e7c0      	b.n	8005928 <__sflush_r+0x1c>
 80059a6:	2301      	movs	r3, #1
 80059a8:	4628      	mov	r0, r5
 80059aa:	47b0      	blx	r6
 80059ac:	1c41      	adds	r1, r0, #1
 80059ae:	d1c8      	bne.n	8005942 <__sflush_r+0x36>
 80059b0:	682b      	ldr	r3, [r5, #0]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d0c5      	beq.n	8005942 <__sflush_r+0x36>
 80059b6:	2b1d      	cmp	r3, #29
 80059b8:	d001      	beq.n	80059be <__sflush_r+0xb2>
 80059ba:	2b16      	cmp	r3, #22
 80059bc:	d101      	bne.n	80059c2 <__sflush_r+0xb6>
 80059be:	602f      	str	r7, [r5, #0]
 80059c0:	e7b1      	b.n	8005926 <__sflush_r+0x1a>
 80059c2:	89a3      	ldrh	r3, [r4, #12]
 80059c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80059c8:	81a3      	strh	r3, [r4, #12]
 80059ca:	e7ad      	b.n	8005928 <__sflush_r+0x1c>
 80059cc:	690f      	ldr	r7, [r1, #16]
 80059ce:	2f00      	cmp	r7, #0
 80059d0:	d0a9      	beq.n	8005926 <__sflush_r+0x1a>
 80059d2:	0793      	lsls	r3, r2, #30
 80059d4:	680e      	ldr	r6, [r1, #0]
 80059d6:	bf08      	it	eq
 80059d8:	694b      	ldreq	r3, [r1, #20]
 80059da:	600f      	str	r7, [r1, #0]
 80059dc:	bf18      	it	ne
 80059de:	2300      	movne	r3, #0
 80059e0:	eba6 0807 	sub.w	r8, r6, r7
 80059e4:	608b      	str	r3, [r1, #8]
 80059e6:	f1b8 0f00 	cmp.w	r8, #0
 80059ea:	dd9c      	ble.n	8005926 <__sflush_r+0x1a>
 80059ec:	6a21      	ldr	r1, [r4, #32]
 80059ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80059f0:	4643      	mov	r3, r8
 80059f2:	463a      	mov	r2, r7
 80059f4:	4628      	mov	r0, r5
 80059f6:	47b0      	blx	r6
 80059f8:	2800      	cmp	r0, #0
 80059fa:	dc06      	bgt.n	8005a0a <__sflush_r+0xfe>
 80059fc:	89a3      	ldrh	r3, [r4, #12]
 80059fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a02:	81a3      	strh	r3, [r4, #12]
 8005a04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005a08:	e78e      	b.n	8005928 <__sflush_r+0x1c>
 8005a0a:	4407      	add	r7, r0
 8005a0c:	eba8 0800 	sub.w	r8, r8, r0
 8005a10:	e7e9      	b.n	80059e6 <__sflush_r+0xda>
 8005a12:	bf00      	nop
 8005a14:	dfbffffe 	.word	0xdfbffffe

08005a18 <_fflush_r>:
 8005a18:	b538      	push	{r3, r4, r5, lr}
 8005a1a:	690b      	ldr	r3, [r1, #16]
 8005a1c:	4605      	mov	r5, r0
 8005a1e:	460c      	mov	r4, r1
 8005a20:	b913      	cbnz	r3, 8005a28 <_fflush_r+0x10>
 8005a22:	2500      	movs	r5, #0
 8005a24:	4628      	mov	r0, r5
 8005a26:	bd38      	pop	{r3, r4, r5, pc}
 8005a28:	b118      	cbz	r0, 8005a32 <_fflush_r+0x1a>
 8005a2a:	6a03      	ldr	r3, [r0, #32]
 8005a2c:	b90b      	cbnz	r3, 8005a32 <_fflush_r+0x1a>
 8005a2e:	f7ff fa31 	bl	8004e94 <__sinit>
 8005a32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d0f3      	beq.n	8005a22 <_fflush_r+0xa>
 8005a3a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005a3c:	07d0      	lsls	r0, r2, #31
 8005a3e:	d404      	bmi.n	8005a4a <_fflush_r+0x32>
 8005a40:	0599      	lsls	r1, r3, #22
 8005a42:	d402      	bmi.n	8005a4a <_fflush_r+0x32>
 8005a44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005a46:	f7ff fc31 	bl	80052ac <__retarget_lock_acquire_recursive>
 8005a4a:	4628      	mov	r0, r5
 8005a4c:	4621      	mov	r1, r4
 8005a4e:	f7ff ff5d 	bl	800590c <__sflush_r>
 8005a52:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005a54:	07da      	lsls	r2, r3, #31
 8005a56:	4605      	mov	r5, r0
 8005a58:	d4e4      	bmi.n	8005a24 <_fflush_r+0xc>
 8005a5a:	89a3      	ldrh	r3, [r4, #12]
 8005a5c:	059b      	lsls	r3, r3, #22
 8005a5e:	d4e1      	bmi.n	8005a24 <_fflush_r+0xc>
 8005a60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005a62:	f7ff fc24 	bl	80052ae <__retarget_lock_release_recursive>
 8005a66:	e7dd      	b.n	8005a24 <_fflush_r+0xc>

08005a68 <__swhatbuf_r>:
 8005a68:	b570      	push	{r4, r5, r6, lr}
 8005a6a:	460c      	mov	r4, r1
 8005a6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a70:	2900      	cmp	r1, #0
 8005a72:	b096      	sub	sp, #88	; 0x58
 8005a74:	4615      	mov	r5, r2
 8005a76:	461e      	mov	r6, r3
 8005a78:	da0d      	bge.n	8005a96 <__swhatbuf_r+0x2e>
 8005a7a:	89a3      	ldrh	r3, [r4, #12]
 8005a7c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005a80:	f04f 0100 	mov.w	r1, #0
 8005a84:	bf0c      	ite	eq
 8005a86:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005a8a:	2340      	movne	r3, #64	; 0x40
 8005a8c:	2000      	movs	r0, #0
 8005a8e:	6031      	str	r1, [r6, #0]
 8005a90:	602b      	str	r3, [r5, #0]
 8005a92:	b016      	add	sp, #88	; 0x58
 8005a94:	bd70      	pop	{r4, r5, r6, pc}
 8005a96:	466a      	mov	r2, sp
 8005a98:	f000 f87c 	bl	8005b94 <_fstat_r>
 8005a9c:	2800      	cmp	r0, #0
 8005a9e:	dbec      	blt.n	8005a7a <__swhatbuf_r+0x12>
 8005aa0:	9901      	ldr	r1, [sp, #4]
 8005aa2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005aa6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005aaa:	4259      	negs	r1, r3
 8005aac:	4159      	adcs	r1, r3
 8005aae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ab2:	e7eb      	b.n	8005a8c <__swhatbuf_r+0x24>

08005ab4 <__smakebuf_r>:
 8005ab4:	898b      	ldrh	r3, [r1, #12]
 8005ab6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005ab8:	079d      	lsls	r5, r3, #30
 8005aba:	4606      	mov	r6, r0
 8005abc:	460c      	mov	r4, r1
 8005abe:	d507      	bpl.n	8005ad0 <__smakebuf_r+0x1c>
 8005ac0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005ac4:	6023      	str	r3, [r4, #0]
 8005ac6:	6123      	str	r3, [r4, #16]
 8005ac8:	2301      	movs	r3, #1
 8005aca:	6163      	str	r3, [r4, #20]
 8005acc:	b002      	add	sp, #8
 8005ace:	bd70      	pop	{r4, r5, r6, pc}
 8005ad0:	ab01      	add	r3, sp, #4
 8005ad2:	466a      	mov	r2, sp
 8005ad4:	f7ff ffc8 	bl	8005a68 <__swhatbuf_r>
 8005ad8:	9900      	ldr	r1, [sp, #0]
 8005ada:	4605      	mov	r5, r0
 8005adc:	4630      	mov	r0, r6
 8005ade:	f7ff f8d3 	bl	8004c88 <_malloc_r>
 8005ae2:	b948      	cbnz	r0, 8005af8 <__smakebuf_r+0x44>
 8005ae4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ae8:	059a      	lsls	r2, r3, #22
 8005aea:	d4ef      	bmi.n	8005acc <__smakebuf_r+0x18>
 8005aec:	f023 0303 	bic.w	r3, r3, #3
 8005af0:	f043 0302 	orr.w	r3, r3, #2
 8005af4:	81a3      	strh	r3, [r4, #12]
 8005af6:	e7e3      	b.n	8005ac0 <__smakebuf_r+0xc>
 8005af8:	89a3      	ldrh	r3, [r4, #12]
 8005afa:	6020      	str	r0, [r4, #0]
 8005afc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b00:	81a3      	strh	r3, [r4, #12]
 8005b02:	9b00      	ldr	r3, [sp, #0]
 8005b04:	6163      	str	r3, [r4, #20]
 8005b06:	9b01      	ldr	r3, [sp, #4]
 8005b08:	6120      	str	r0, [r4, #16]
 8005b0a:	b15b      	cbz	r3, 8005b24 <__smakebuf_r+0x70>
 8005b0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005b10:	4630      	mov	r0, r6
 8005b12:	f000 f851 	bl	8005bb8 <_isatty_r>
 8005b16:	b128      	cbz	r0, 8005b24 <__smakebuf_r+0x70>
 8005b18:	89a3      	ldrh	r3, [r4, #12]
 8005b1a:	f023 0303 	bic.w	r3, r3, #3
 8005b1e:	f043 0301 	orr.w	r3, r3, #1
 8005b22:	81a3      	strh	r3, [r4, #12]
 8005b24:	89a3      	ldrh	r3, [r4, #12]
 8005b26:	431d      	orrs	r5, r3
 8005b28:	81a5      	strh	r5, [r4, #12]
 8005b2a:	e7cf      	b.n	8005acc <__smakebuf_r+0x18>

08005b2c <_putc_r>:
 8005b2c:	b570      	push	{r4, r5, r6, lr}
 8005b2e:	460d      	mov	r5, r1
 8005b30:	4614      	mov	r4, r2
 8005b32:	4606      	mov	r6, r0
 8005b34:	b118      	cbz	r0, 8005b3e <_putc_r+0x12>
 8005b36:	6a03      	ldr	r3, [r0, #32]
 8005b38:	b90b      	cbnz	r3, 8005b3e <_putc_r+0x12>
 8005b3a:	f7ff f9ab 	bl	8004e94 <__sinit>
 8005b3e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005b40:	07d8      	lsls	r0, r3, #31
 8005b42:	d405      	bmi.n	8005b50 <_putc_r+0x24>
 8005b44:	89a3      	ldrh	r3, [r4, #12]
 8005b46:	0599      	lsls	r1, r3, #22
 8005b48:	d402      	bmi.n	8005b50 <_putc_r+0x24>
 8005b4a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b4c:	f7ff fbae 	bl	80052ac <__retarget_lock_acquire_recursive>
 8005b50:	68a3      	ldr	r3, [r4, #8]
 8005b52:	3b01      	subs	r3, #1
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	60a3      	str	r3, [r4, #8]
 8005b58:	da05      	bge.n	8005b66 <_putc_r+0x3a>
 8005b5a:	69a2      	ldr	r2, [r4, #24]
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	db12      	blt.n	8005b86 <_putc_r+0x5a>
 8005b60:	b2eb      	uxtb	r3, r5
 8005b62:	2b0a      	cmp	r3, #10
 8005b64:	d00f      	beq.n	8005b86 <_putc_r+0x5a>
 8005b66:	6823      	ldr	r3, [r4, #0]
 8005b68:	1c5a      	adds	r2, r3, #1
 8005b6a:	6022      	str	r2, [r4, #0]
 8005b6c:	701d      	strb	r5, [r3, #0]
 8005b6e:	b2ed      	uxtb	r5, r5
 8005b70:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005b72:	07da      	lsls	r2, r3, #31
 8005b74:	d405      	bmi.n	8005b82 <_putc_r+0x56>
 8005b76:	89a3      	ldrh	r3, [r4, #12]
 8005b78:	059b      	lsls	r3, r3, #22
 8005b7a:	d402      	bmi.n	8005b82 <_putc_r+0x56>
 8005b7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b7e:	f7ff fb96 	bl	80052ae <__retarget_lock_release_recursive>
 8005b82:	4628      	mov	r0, r5
 8005b84:	bd70      	pop	{r4, r5, r6, pc}
 8005b86:	4629      	mov	r1, r5
 8005b88:	4622      	mov	r2, r4
 8005b8a:	4630      	mov	r0, r6
 8005b8c:	f7ff fa71 	bl	8005072 <__swbuf_r>
 8005b90:	4605      	mov	r5, r0
 8005b92:	e7ed      	b.n	8005b70 <_putc_r+0x44>

08005b94 <_fstat_r>:
 8005b94:	b538      	push	{r3, r4, r5, lr}
 8005b96:	4d07      	ldr	r5, [pc, #28]	; (8005bb4 <_fstat_r+0x20>)
 8005b98:	2300      	movs	r3, #0
 8005b9a:	4604      	mov	r4, r0
 8005b9c:	4608      	mov	r0, r1
 8005b9e:	4611      	mov	r1, r2
 8005ba0:	602b      	str	r3, [r5, #0]
 8005ba2:	f7fb fc4a 	bl	800143a <_fstat>
 8005ba6:	1c43      	adds	r3, r0, #1
 8005ba8:	d102      	bne.n	8005bb0 <_fstat_r+0x1c>
 8005baa:	682b      	ldr	r3, [r5, #0]
 8005bac:	b103      	cbz	r3, 8005bb0 <_fstat_r+0x1c>
 8005bae:	6023      	str	r3, [r4, #0]
 8005bb0:	bd38      	pop	{r3, r4, r5, pc}
 8005bb2:	bf00      	nop
 8005bb4:	2000025c 	.word	0x2000025c

08005bb8 <_isatty_r>:
 8005bb8:	b538      	push	{r3, r4, r5, lr}
 8005bba:	4d06      	ldr	r5, [pc, #24]	; (8005bd4 <_isatty_r+0x1c>)
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	4604      	mov	r4, r0
 8005bc0:	4608      	mov	r0, r1
 8005bc2:	602b      	str	r3, [r5, #0]
 8005bc4:	f7fb fc49 	bl	800145a <_isatty>
 8005bc8:	1c43      	adds	r3, r0, #1
 8005bca:	d102      	bne.n	8005bd2 <_isatty_r+0x1a>
 8005bcc:	682b      	ldr	r3, [r5, #0]
 8005bce:	b103      	cbz	r3, 8005bd2 <_isatty_r+0x1a>
 8005bd0:	6023      	str	r3, [r4, #0]
 8005bd2:	bd38      	pop	{r3, r4, r5, pc}
 8005bd4:	2000025c 	.word	0x2000025c

08005bd8 <_init>:
 8005bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bda:	bf00      	nop
 8005bdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bde:	bc08      	pop	{r3}
 8005be0:	469e      	mov	lr, r3
 8005be2:	4770      	bx	lr

08005be4 <_fini>:
 8005be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005be6:	bf00      	nop
 8005be8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bea:	bc08      	pop	{r3}
 8005bec:	469e      	mov	lr, r3
 8005bee:	4770      	bx	lr
